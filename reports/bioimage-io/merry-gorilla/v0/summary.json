{
    "rdf_content": {
        "authors": [
            {
                "affiliation": "Human Technopole",
                "email": "damian.dalle@fht.org",
                "github_user": "damiandn",
                "name": "Damian Dalle Nogare"
            },
            {
                "affiliation": "Human Technopole",
                "email": "mehdi.seifi@fht.org",
                "github_user": null,
                "name": "Mehdi Seifi"
            }
        ],
        "cite": [
            {
                "doi": "10.1038/s41592-020-01018-x",
                "text": "Stringer, C., Wang, T., Michaelos, M. et al. Cellpose: a generalist algorithm for cellular segmentation. Nat Methods 18, 100‚Äì106 (2021).",
                "url": null
            },
            {
                "doi": "10.1038/s41592-022-01663-4",
                "text": "Pachitariu, M., Stringer, C. Cellpose 2.0: how to train your own model. Nat Methods 19, 1634‚Äì1641 (2022).",
                "url": null
            },
            {
                "doi": "10.1101/2024.02.10.579780",
                "text": "Stringer, Carsen, and Marius Pachitariu. \"Cellpose3: one-click image restoration for improved cellular segmentation.\" bioRxiv (2024).",
                "url": null
            }
        ],
        "config": {
            "bioimageio": {
                "thumbnails": {
                    "cover.png": "cover.thumbnail.png"
                }
            }
        },
        "covers": [
            "cover.png"
        ],
        "description": "Segmentation of nuclei in cultured cells overexpressing motor proteins of the kif family.",
        "documentation": "doc.md",
        "format_version": "0.5.3",
        "git_repo": "https://github.com/ai4life-opencalls/oc_1_project_66",
        "id": "merry-gorilla",
        "id_emoji": "ü¶ç",
        "inputs": [
            {
                "axes": [
                    {
                        "type": "batch"
                    },
                    {
                        "channel_names": [
                            "channel"
                        ],
                        "type": "channel"
                    },
                    {
                        "id": "y",
                        "size": 1440,
                        "type": "space"
                    },
                    {
                        "id": "x",
                        "size": 1920,
                        "type": "space"
                    }
                ],
                "id": "input",
                "test_tensor": {
                    "sha256": "24d6e99a3a203f5473128500cf55f558cf1a878639c8b85d8e32689c090877db",
                    "source": "input_sample.npy"
                }
            }
        ],
        "license": "BSD-3-Clause",
        "links": [
            "https://github.com/mouseland/cellpose"
        ],
        "maintainers": [],
        "name": "OC1 Project 66 Cellpose",
        "outputs": [
            {
                "axes": [
                    {
                        "type": "batch"
                    },
                    {
                        "id": "y",
                        "size": 1440,
                        "type": "space"
                    },
                    {
                        "id": "x",
                        "size": 1920,
                        "type": "space"
                    }
                ],
                "id": "masks",
                "test_tensor": {
                    "sha256": "e5175d029e499ac10a532840d7b46d555e3fa08ec665bb6124236e5c496a73c1",
                    "source": "output_sample1_masks.npy"
                }
            },
            {
                "axes": [
                    {
                        "type": "batch"
                    },
                    {
                        "channel_names": [
                            "ch_0",
                            "ch_1",
                            "ch_2",
                            "ch_3",
                            "ch_4",
                            "ch_5"
                        ],
                        "type": "channel"
                    },
                    {
                        "id": "y",
                        "size": 1440,
                        "type": "space"
                    },
                    {
                        "id": "x",
                        "size": 1920,
                        "type": "space"
                    }
                ],
                "id": "flows",
                "test_tensor": {
                    "sha256": "7c17c9ae0592ff8c0981b5c87fc195151b85d2c8b343cf2af7cfe72ac172471e",
                    "source": "output_sample2_flows.npy"
                }
            },
            {
                "axes": [
                    {
                        "type": "batch"
                    },
                    {
                        "id": "y",
                        "size": 256,
                        "type": "space"
                    }
                ],
                "id": "styles",
                "test_tensor": {
                    "sha256": "7d1b01acb617af866ab8d7d7e9bb9e078eece2f18d12fb31dd0f1a1ad395fe93",
                    "source": "output_sample3_styles.npy"
                }
            },
            {
                "axes": [
                    {
                        "type": "batch"
                    },
                    {
                        "id": "y",
                        "size": 1,
                        "type": "space"
                    }
                ],
                "id": "diams",
                "test_tensor": {
                    "sha256": "d055edccdb5c1a97c34832dd66fdf7049466a63c7422d9af875c06bf9de79b8b",
                    "source": "output_sample4_diams.npy"
                }
            }
        ],
        "tags": [
            "Cellpose",
            "Nuclei Segmentation",
            "Cilia Analysis",
            "Fluorescence Microscopy",
            "2D"
        ],
        "type": "model",
        "uploader": {
            "email": "mehdi.seifi@fht.org",
            "name": "Mehdi Seifi"
        },
        "version": "0.1.0",
        "weights": {
            "pytorch_state_dict": {
                "architecture": {
                    "callable": "CellPoseWrapper",
                    "kwargs": {
                        "cellprob_threshold": 0,
                        "channels": [
                            0,
                            0
                        ],
                        "cp_batch_size": 8,
                        "do_3D": false,
                        "estimate_diam": false,
                        "flow_threshold": 0.4,
                        "gpu": false,
                        "model_type": "nuclei",
                        "normalize": true,
                        "stitch_threshold": 0
                    },
                    "sha256": "55815a78a51843e389578aebfcec2d1a57a96d420aa5e2c61a6a91a18efcc7c3",
                    "source": "model.py"
                },
                "dependencies": {
                    "sha256": "00ac7eec0874433d577220e6f251f61916edc00c7f1358903319dc8d718e8c6f",
                    "source": "env.yml"
                },
                "pytorch_version": "2.5.1",
                "sha256": "4deb1ac38f6b9a449c8316bb1a504ce7509fd3b7b21274c3c3970c84c030b2d8",
                "source": "cilia_cellpose_nuc"
            }
        }
    },
    "rdf_yaml_sha256": "a477d6b81379f2c966f59bf4fc48ad0dc29a1a89ad1a5ec20f3bd25fccc41c7a",
    "scores": {
        "core_compatibility": 0.0,
        "metadata_completeness": 0.0,
        "metadata_format": 0.0,
        "overall_compatibility": 0.0,
        "overall_partner_tool_compatibility": 0.0,
        "tool_compatibility": {},
        "tool_compatibility_version_specific": {}
    },
    "status": "failed",
    "tests": {
        "biapy": {
            "3.6.5": {
                "badge": null,
                "details": "[all] pytorch_state_dict not found in model RDF or inputs != 1\n",
                "error": "[all] pytorch_state_dict not found in model RDF or inputs != 1\n",
                "links": [
                    "biapy/biapy"
                ],
                "score": 0.0,
                "status": "failed"
            }
        },
        "bioimageio.core": {
            "0.9.4": {
                "badge": null,
                "details": {
                    "details": [
                        {
                            "context": {
                                "file_name": "rdf.yaml",
                                "known_files": {
                                    "cilia_cellpose_nuc": "4deb1ac38f6b9a449c8316bb1a504ce7509fd3b7b21274c3c3970c84c030b2d8",
                                    "env.yml": "00ac7eec0874433d577220e6f251f61916edc00c7f1358903319dc8d718e8c6f",
                                    "https://github.com/ai4life-opencalls/oc_1_project_66": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/merry-gorilla/files/cilia_cellpose_nuc?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/merry-gorilla/files/cover.png?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/merry-gorilla/files/doc.md?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/merry-gorilla/files/env.yml?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/merry-gorilla/files/input_sample.npy?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/merry-gorilla/files/model.py?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/merry-gorilla/files/output_sample3_styles.npy?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/merry-gorilla/files/output_sample4_diams.npy?version=v0": null,
                                    "input_sample.npy": "24d6e99a3a203f5473128500cf55f558cf1a878639c8b85d8e32689c090877db",
                                    "model.py": "55815a78a51843e389578aebfcec2d1a57a96d420aa5e2c61a6a91a18efcc7c3",
                                    "output_sample1_masks.npy": "e5175d029e499ac10a532840d7b46d555e3fa08ec665bb6124236e5c496a73c1",
                                    "output_sample2_flows.npy": "7c17c9ae0592ff8c0981b5c87fc195151b85d2c8b343cf2af7cfe72ac172471e",
                                    "output_sample3_styles.npy": "7d1b01acb617af866ab8d7d7e9bb9e078eece2f18d12fb31dd0f1a1ad395fe93",
                                    "output_sample4_diams.npy": "d055edccdb5c1a97c34832dd66fdf7049466a63c7422d9af875c06bf9de79b8b"
                                },
                                "original_source_name": null,
                                "perform_io_checks": true,
                                "root": "https://hypha.aicell.io/bioimage-io/artifacts/merry-gorilla/files?version=v0",
                                "update_hashes": false
                            },
                            "errors": [],
                            "loc": [],
                            "name": "Successfully created `ModelDescr` instance.",
                            "recommended_env": null,
                            "saved_conda_compare": null,
                            "status": "passed",
                            "warnings": []
                        },
                        {
                            "context": {
                                "file_name": "rdf.yaml",
                                "known_files": {
                                    "cilia_cellpose_nuc": "4deb1ac38f6b9a449c8316bb1a504ce7509fd3b7b21274c3c3970c84c030b2d8",
                                    "env.yml": "00ac7eec0874433d577220e6f251f61916edc00c7f1358903319dc8d718e8c6f",
                                    "https://github.com/ai4life-opencalls/oc_1_project_66": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/merry-gorilla/files/cilia_cellpose_nuc?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/merry-gorilla/files/cover.png?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/merry-gorilla/files/doc.md?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/merry-gorilla/files/env.yml?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/merry-gorilla/files/input_sample.npy?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/merry-gorilla/files/model.py?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/merry-gorilla/files/output_sample1_masks.npy?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/merry-gorilla/files/output_sample2_flows.npy?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/merry-gorilla/files/output_sample3_styles.npy?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/merry-gorilla/files/output_sample4_diams.npy?version=v0": null,
                                    "input_sample.npy": "24d6e99a3a203f5473128500cf55f558cf1a878639c8b85d8e32689c090877db",
                                    "model.py": "55815a78a51843e389578aebfcec2d1a57a96d420aa5e2c61a6a91a18efcc7c3",
                                    "output_sample1_masks.npy": "e5175d029e499ac10a532840d7b46d555e3fa08ec665bb6124236e5c496a73c1",
                                    "output_sample2_flows.npy": "7c17c9ae0592ff8c0981b5c87fc195151b85d2c8b343cf2af7cfe72ac172471e",
                                    "output_sample3_styles.npy": "7d1b01acb617af866ab8d7d7e9bb9e078eece2f18d12fb31dd0f1a1ad395fe93",
                                    "output_sample4_diams.npy": "d055edccdb5c1a97c34832dd66fdf7049466a63c7422d9af875c06bf9de79b8b"
                                },
                                "original_source_name": null,
                                "perform_io_checks": true,
                                "root": "https://hypha.aicell.io/bioimage-io/artifacts/merry-gorilla/files?version=v0",
                                "update_hashes": false
                            },
                            "errors": [],
                            "loc": [],
                            "name": "bioimageio.spec format validation model 0.5.4",
                            "recommended_env": null,
                            "saved_conda_compare": null,
                            "status": "passed",
                            "warnings": []
                        },
                        {
                            "context": null,
                            "errors": [
                                {
                                    "loc": [
                                        "weights",
                                        "pytorch_state_dict"
                                    ],
                                    "msg": "'model_55815a78a51843e389578aebfcec2d1a57a96d420aa5e2c61a6a91a18efcc7c3'",
                                    "traceback_html": "<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<style>\n.r1 {color: #800000; text-decoration-color: #800000}\n.r2 {color: #800000; text-decoration-color: #800000; font-weight: bold}\n.r3 {color: #bf7f7f; text-decoration-color: #bf7f7f; font-weight: bold}\n.r4 {color: #7f7f7f; text-decoration-color: #7f7f7f}\n.r5 {color: #0000ff; text-decoration-color: #0000ff}\n.r6 {color: #ff00ff; text-decoration-color: #ff00ff}\n.r7 {color: #808000; text-decoration-color: #808000}\n.r8 {color: #ff0000; text-decoration-color: #ff0000; font-weight: bold}\n.r9 {color: #800080; text-decoration-color: #800080; font-weight: bold}\n.r10 {font-weight: bold}\n.r11 {color: #008000; text-decoration-color: #008000}\n.r12 {font-style: italic}\n.r13 {color: #00ffff; text-decoration-color: #00ffff}\n.r14 {color: #808080; text-decoration-color: #808080}\n.r15 {color: #00ffff; text-decoration-color: #00ffff; text-decoration: underline}\nbody {\n    color: #000000;\n    background-color: #ffffff;\n}\n</style>\n</head>\n<body>\n    <pre style=\"font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><code style=\"font-family:inherit\"><span class=\"r1\">‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ </span><span class=\"r2\">Traceback </span><span class=\"r3\">(most recent call last)</span><span class=\"r1\"> ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/1df8590deee1e057f10712bab6245b52fe8e4e83af79ab71e057848d23ff19f1/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">108 </span><span class=\"r4\">‚îÇ   </span>module = sys.modules.get(module_name)                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">109 </span><span class=\"r4\">‚îÇ   </span><span class=\"r5\">if</span> module <span class=\"r6\">is</span> <span class=\"r5\">None</span>:                                                                     <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">110 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">try</span>:                                                                               <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span>111 <span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span>tmp_dir = TemporaryDirectory(ignore_cleanup_errors=<span class=\"r5\">True</span>)                       <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">112 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span>module_path = Path(tmp_dir.name) / module_name                                 <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">113 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">if</span> reader.original_file_name.endswith(<span class=\"r7\">&quot;.zip&quot;</span>) <span class=\"r6\">or</span> is_zipfile(reader):           <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">114 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span>module_path.mkdir()                                                        <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ</span>\n<span class=\"r8\">TypeError: </span><span class=\"r9\">__init__</span><span class=\"r10\">()</span> got an unexpected keyword argument <span class=\"r11\">&#x27;ignore_cleanup_errors&#x27;</span>\n\n<span class=\"r12\">During handling of the above exception, another exception occurred:</span>\n\n<span class=\"r1\">‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ </span><span class=\"r2\">Traceback </span><span class=\"r3\">(most recent call last)</span><span class=\"r1\"> ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/1df8590deee1e057f10712bab6245b52fe8e4e83af79ab71e057848d23ff19f1/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">642 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>inputs = get_test_inputs(model)                                                    <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">643 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>expected = get_test_outputs(model)                                                 <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">644 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>                                                                                   <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span>645 <span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">with</span> create_prediction_pipeline(                                                   <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">646 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span>bioimageio_model=model, devices=devices, weight_format=weight_format           <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">647 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>) <span class=\"r5\">as</span> prediction_pipeline:                                                          <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">648 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span>results = prediction_pipeline.predict_sample_without_blocking(inputs)          <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/1df8590deee1e057f10712bab6245b52fe8e4e83af79ab71e057848d23ff19f1/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">368 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r7\">f&quot;deprecated create_prediction_pipeline kwargs: {</span><span class=\"r13\">set</span>(deprecated_kwargs)<span class=\"r7\">}&quot;</span>      <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">369 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>)                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">370 </span><span class=\"r4\">‚îÇ   </span>                                                                                       <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span>371 <span class=\"r4\">‚îÇ   </span>model_adapter = model_adapter <span class=\"r6\">or</span> create_model_adapter(                                 <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">372 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>model_description=bioimageio_model,                                                <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">373 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>devices=devices,                                                                   <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">374 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>weight_format_priority_order=weights_format <span class=\"r6\">and</span> (weights_format,),                 <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/1df8590deee1e057f10712bab6245b52fe8e4e83af79ab71e057848d23ff19f1/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">166 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">assert</span> errors                                                                      <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">167 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">if</span> <span class=\"r13\">len</span>(weight_format_priority_order) == <span class=\"r5\">1</span>:                                         <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">168 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">assert</span> <span class=\"r13\">len</span>(errors) == <span class=\"r5\">1</span>                                                        <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span>169 <span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">raise</span> errors[<span class=\"r5\">0</span>]                                                                <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">170 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>                                                                                   <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">171 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">else</span>:                                                                              <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">172 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span>msg = (                                                                        <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/1df8590deee1e057f10712bab6245b52fe8e4e83af79ab71e057848d23ff19f1/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">109 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">try</span>:                                                                       <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">110 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">from</span><span class=\"r14\"> </span><span class=\"r15\">.pytorch_backend</span><span class=\"r14\"> </span><span class=\"r5\">import</span> PytorchModelAdapter                       <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">111 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span>                                                                       <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span>112 <span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">return</span> PytorchModelAdapter(                                            <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">113 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span>model_description=model_description, devices=devices               <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">114 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span>)                                                                      <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">115 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">except</span> <span class=\"r13\">Exception</span> <span class=\"r5\">as</span> e:                                                     <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/1df8590deee1e057f10712bab6245b52fe8e4e83af79ab71e057848d23ff19f1/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 35 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">raise</span> <span class=\"r13\">ValueError</span>(<span class=\"r7\">&quot;No `pytorch_state_dict` weights found&quot;</span>)                      <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 36 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>                                                                                   <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 37 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>devices = get_devices(devices)                                                     <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span> 38 <span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r13\">self</span>._model = load_torch_model(weights, load_state=<span class=\"r5\">True</span>, devices=devices)          <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 39 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">if</span> mode == <span class=\"r7\">&quot;eval&quot;</span>:                                                                 <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 40 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r13\">self</span>._model = <span class=\"r13\">self</span>._model.eval()                                               <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 41 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">elif</span> mode == <span class=\"r7\">&quot;train&quot;</span>:                                                              <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/1df8590deee1e057f10712bab6245b52fe8e4e83af79ab71e057848d23ff19f1/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">100 </span><span class=\"r4\">‚îÇ   </span>load_state: <span class=\"r13\">bool</span> = <span class=\"r5\">True</span>,                                                               <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">101 </span><span class=\"r4\">‚îÇ   </span>devices: Optional[Sequence[Union[<span class=\"r13\">str</span>, torch.device]]] = <span class=\"r5\">None</span>,                          <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">102 </span>) -&gt; nn.Module:                                                                            <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span>103 <span class=\"r4\">‚îÇ   </span>custom_callable = import_callable(                                                     <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">104 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>weight_spec.architecture,                                                          <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">105 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>sha256=(                                                                           <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">106 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span>weight_spec.architecture_sha256                                                <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/1df8590deee1e057f10712bab6245b52fe8e4e83af79ab71e057848d23ff19f1/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 74 </span><span class=\"r4\">‚îÇ   </span><span class=\"r5\">elif</span> <span class=\"r13\">isinstance</span>(node, CallableFromFile):                                               <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 75 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>c = _import_from_file_impl(node.source_file, <span class=\"r13\">str</span>(node.callable_name), **kwargs)    <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 76 </span><span class=\"r4\">‚îÇ   </span><span class=\"r5\">elif</span> <span class=\"r13\">isinstance</span>(node, ArchitectureFromFileDescr):                                      <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span> 77 <span class=\"r4\">‚îÇ   ‚îÇ   </span>c = _import_from_file_impl(node.source, <span class=\"r13\">str</span>(node.callable), sha256=node.sha256)    <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 78 </span><span class=\"r4\">‚îÇ   </span><span class=\"r5\">else</span>:                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 79 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>assert_never(node)                                                                 <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 80 </span>                                                                                           <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/1df8590deee1e057f10712bab6245b52fe8e4e83af79ab71e057848d23ff19f1/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">132 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span>importlib_spec.loader.exec_module(module)                                      <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">133 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>                                                                                   <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">134 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">except</span> <span class=\"r13\">Exception</span> <span class=\"r5\">as</span> e:                                                             <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span>135 <span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">del</span> sys.modules[module_name]                                                   <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">136 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">raise</span> <span class=\"r13\">ImportError</span>(<span class=\"r7\">f&quot;Failed to import {</span>source<span class=\"r7\">}&quot;</span>) <span class=\"r5\">from</span><span class=\"r14\"> </span><span class=\"r15\">e</span>                         <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">137 </span><span class=\"r4\">‚îÇ   </span>                                                                                       <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">138 </span><span class=\"r4\">‚îÇ   </span><span class=\"r5\">try</span>:                                                                                   <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ</span>\n<span class=\"r8\">KeyError: </span><span class=\"r11\">&#x27;model_55815a78a51843e389578aebfcec2d1a57a96d420aa5e2c61a6a91a18efcc7c3&#x27;</span>\n</code></pre>\n</body>\n</html>\n",
                                    "traceback_md": "‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Traceback (most recent call last) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ /usr/share/miniconda/envs/1df8590deee1e057f10712bab6245b52fe8e4e83af79ab71e057848d23ff19f1/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ   108 ‚îÇ   module = sys.modules.get(module_name)                                                  ‚îÇ\n‚îÇ   109 ‚îÇ   if module is None:                                                                     ‚îÇ\n‚îÇ   110 ‚îÇ   ‚îÇ   try:                                                                               ‚îÇ\n‚îÇ ‚ù± 111 ‚îÇ   ‚îÇ   ‚îÇ   tmp_dir = TemporaryDirectory(ignore_cleanup_errors=True)                       ‚îÇ\n‚îÇ   112 ‚îÇ   ‚îÇ   ‚îÇ   module_path = Path(tmp_dir.name) / module_name                                 ‚îÇ\n‚îÇ   113 ‚îÇ   ‚îÇ   ‚îÇ   if reader.original_file_name.endswith(\".zip\") or is_zipfile(reader):           ‚îÇ\n‚îÇ   114 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   module_path.mkdir()                                                        ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\nTypeError: __init__() got an unexpected keyword argument 'ignore_cleanup_errors'\n\nDuring handling of the above exception, another exception occurred:\n\n‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Traceback (most recent call last) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ /usr/share/miniconda/envs/1df8590deee1e057f10712bab6245b52fe8e4e83af79ab71e057848d23ff19f1/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ   642 ‚îÇ   ‚îÇ   inputs = get_test_inputs(model)                                                    ‚îÇ\n‚îÇ   643 ‚îÇ   ‚îÇ   expected = get_test_outputs(model)                                                 ‚îÇ\n‚îÇ   644 ‚îÇ   ‚îÇ                                                                                      ‚îÇ\n‚îÇ ‚ù± 645 ‚îÇ   ‚îÇ   with create_prediction_pipeline(                                                   ‚îÇ\n‚îÇ   646 ‚îÇ   ‚îÇ   ‚îÇ   bioimageio_model=model, devices=devices, weight_format=weight_format           ‚îÇ\n‚îÇ   647 ‚îÇ   ‚îÇ   ) as prediction_pipeline:                                                          ‚îÇ\n‚îÇ   648 ‚îÇ   ‚îÇ   ‚îÇ   results = prediction_pipeline.predict_sample_without_blocking(inputs)          ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ /usr/share/miniconda/envs/1df8590deee1e057f10712bab6245b52fe8e4e83af79ab71e057848d23ff19f1/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ   368 ‚îÇ   ‚îÇ   ‚îÇ   f\"deprecated create_prediction_pipeline kwargs: {set(deprecated_kwargs)}\"      ‚îÇ\n‚îÇ   369 ‚îÇ   ‚îÇ   )                                                                                  ‚îÇ\n‚îÇ   370 ‚îÇ                                                                                          ‚îÇ\n‚îÇ ‚ù± 371 ‚îÇ   model_adapter = model_adapter or create_model_adapter(                                 ‚îÇ\n‚îÇ   372 ‚îÇ   ‚îÇ   model_description=bioimageio_model,                                                ‚îÇ\n‚îÇ   373 ‚îÇ   ‚îÇ   devices=devices,                                                                   ‚îÇ\n‚îÇ   374 ‚îÇ   ‚îÇ   weight_format_priority_order=weights_format and (weights_format,),                 ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ /usr/share/miniconda/envs/1df8590deee1e057f10712bab6245b52fe8e4e83af79ab71e057848d23ff19f1/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ   166 ‚îÇ   ‚îÇ   assert errors                                                                      ‚îÇ\n‚îÇ   167 ‚îÇ   ‚îÇ   if len(weight_format_priority_order) == 1:                                         ‚îÇ\n‚îÇ   168 ‚îÇ   ‚îÇ   ‚îÇ   assert len(errors) == 1                                                        ‚îÇ\n‚îÇ ‚ù± 169 ‚îÇ   ‚îÇ   ‚îÇ   raise errors[0]                                                                ‚îÇ\n‚îÇ   170 ‚îÇ   ‚îÇ                                                                                      ‚îÇ\n‚îÇ   171 ‚îÇ   ‚îÇ   else:                                                                              ‚îÇ\n‚îÇ   172 ‚îÇ   ‚îÇ   ‚îÇ   msg = (                                                                        ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ /usr/share/miniconda/envs/1df8590deee1e057f10712bab6245b52fe8e4e83af79ab71e057848d23ff19f1/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ   109 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   try:                                                                       ‚îÇ\n‚îÇ   110 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   from .pytorch_backend import PytorchModelAdapter                       ‚îÇ\n‚îÇ   111 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ                                                                          ‚îÇ\n‚îÇ ‚ù± 112 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   return PytorchModelAdapter(                                            ‚îÇ\n‚îÇ   113 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   model_description=model_description, devices=devices               ‚îÇ\n‚îÇ   114 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   )                                                                      ‚îÇ\n‚îÇ   115 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   except Exception as e:                                                     ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ /usr/share/miniconda/envs/1df8590deee1e057f10712bab6245b52fe8e4e83af79ab71e057848d23ff19f1/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ    35 ‚îÇ   ‚îÇ   ‚îÇ   raise ValueError(\"No `pytorch_state_dict` weights found\")                      ‚îÇ\n‚îÇ    36 ‚îÇ   ‚îÇ                                                                                      ‚îÇ\n‚îÇ    37 ‚îÇ   ‚îÇ   devices = get_devices(devices)                                                     ‚îÇ\n‚îÇ ‚ù±  38 ‚îÇ   ‚îÇ   self._model = load_torch_model(weights, load_state=True, devices=devices)          ‚îÇ\n‚îÇ    39 ‚îÇ   ‚îÇ   if mode == \"eval\":                                                                 ‚îÇ\n‚îÇ    40 ‚îÇ   ‚îÇ   ‚îÇ   self._model = self._model.eval()                                               ‚îÇ\n‚îÇ    41 ‚îÇ   ‚îÇ   elif mode == \"train\":                                                              ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ /usr/share/miniconda/envs/1df8590deee1e057f10712bab6245b52fe8e4e83af79ab71e057848d23ff19f1/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ   100 ‚îÇ   load_state: bool = True,                                                               ‚îÇ\n‚îÇ   101 ‚îÇ   devices: Optional[Sequence[Union[str, torch.device]]] = None,                          ‚îÇ\n‚îÇ   102 ) -> nn.Module:                                                                            ‚îÇ\n‚îÇ ‚ù± 103 ‚îÇ   custom_callable = import_callable(                                                     ‚îÇ\n‚îÇ   104 ‚îÇ   ‚îÇ   weight_spec.architecture,                                                          ‚îÇ\n‚îÇ   105 ‚îÇ   ‚îÇ   sha256=(                                                                           ‚îÇ\n‚îÇ   106 ‚îÇ   ‚îÇ   ‚îÇ   weight_spec.architecture_sha256                                                ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ /usr/share/miniconda/envs/1df8590deee1e057f10712bab6245b52fe8e4e83af79ab71e057848d23ff19f1/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ    74 ‚îÇ   elif isinstance(node, CallableFromFile):                                               ‚îÇ\n‚îÇ    75 ‚îÇ   ‚îÇ   c = _import_from_file_impl(node.source_file, str(node.callable_name), **kwargs)    ‚îÇ\n‚îÇ    76 ‚îÇ   elif isinstance(node, ArchitectureFromFileDescr):                                      ‚îÇ\n‚îÇ ‚ù±  77 ‚îÇ   ‚îÇ   c = _import_from_file_impl(node.source, str(node.callable), sha256=node.sha256)    ‚îÇ\n‚îÇ    78 ‚îÇ   else:                                                                                  ‚îÇ\n‚îÇ    79 ‚îÇ   ‚îÇ   assert_never(node)                                                                 ‚îÇ\n‚îÇ    80                                                                                            ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ /usr/share/miniconda/envs/1df8590deee1e057f10712bab6245b52fe8e4e83af79ab71e057848d23ff19f1/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ   132 ‚îÇ   ‚îÇ   ‚îÇ   importlib_spec.loader.exec_module(module)                                      ‚îÇ\n‚îÇ   133 ‚îÇ   ‚îÇ                                                                                      ‚îÇ\n‚îÇ   134 ‚îÇ   ‚îÇ   except Exception as e:                                                             ‚îÇ\n‚îÇ ‚ù± 135 ‚îÇ   ‚îÇ   ‚îÇ   del sys.modules[module_name]                                                   ‚îÇ\n‚îÇ   136 ‚îÇ   ‚îÇ   ‚îÇ   raise ImportError(f\"Failed to import {source}\") from e                         ‚îÇ\n‚îÇ   137 ‚îÇ                                                                                          ‚îÇ\n‚îÇ   138 ‚îÇ   try:                                                                                   ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\nKeyError: 'model_55815a78a51843e389578aebfcec2d1a57a96d420aa5e2c61a6a91a18efcc7c3'\n",
                                    "type": "bioimageio.core",
                                    "with_traceback": true
                                }
                            ],
                            "loc": [
                                "weights",
                                "pytorch_state_dict"
                            ],
                            "name": "Reproduce test outputs from test inputs (pytorch_state_dict)",
                            "recommended_env": {
                                "channels": [
                                    "pytorch",
                                    "conda-forge",
                                    "nodefaults"
                                ],
                                "dependencies": [
                                    "bioimageio.core",
                                    "imagecodecs",
                                    "pip",
                                    "python=3.9",
                                    "pytorch",
                                    "setuptools",
                                    "torchvision",
                                    {
                                        "pip": [
                                            "cellpose==3.1.0",
                                            "matplotlib",
                                            "tqdm"
                                        ]
                                    }
                                ],
                                "name": "oc1_p66"
                            },
                            "saved_conda_compare": "usage: conda [-h] [-v] [--no-plugins] [-V] COMMAND ...\n\nconda is a tool for managing and deploying applications, environments and packages.\n\noptions:\n  -h, --help            Show this help message and exit.\n  -v, --verbose         Can be used multiple times. Once for detailed output,\n                        twice for INFO logging, thrice for DEBUG logging, four\n                        times for TRACE logging.\n  --no-plugins          Disable all plugins that are not built into conda.\n  -V, --version         Show the conda version number and exit.\n\ncommands:\n  The following built-in and plugins subcommands are available.\n\n  COMMAND\n    activate            Activate a conda environment.\n    clean               Remove unused packages and caches.\n    commands            List all available conda subcommands (including those\n                        from plugins). Generally only used by tab-completion.\n    compare             Compare packages between conda environments.\n    config              Modify configuration values in .condarc.\n    content-trust       Signing and verification tools for Conda\n    create              Create a new conda environment from a list of\n                        specified packages.\n    deactivate          Deactivate the current active conda environment.\n    doctor              Display a health report for your environment.\n    env                 Create and manage conda environments.\n    export              Export a given environment\n    info                Display information about current conda install.\n    init                Initialize conda for shell interaction.\n    install             Install a list of packages into a specified conda\n                        environment.\n    list                List installed packages in a conda environment.\n    notices             Retrieve latest channel notifications.\n    package             Create low-level conda packages. (EXPERIMENTAL)\n    remove (uninstall)  Remove a list of packages from a specified conda\n                        environment.\n    rename              Rename an existing environment.\n    repoquery           Advanced search for repodata.\n    run                 Run an executable in a conda environment.\n    search              Search for packages and display associated information\n                        using the MatchSpec format.\n    token               See `conda token --help`.\n    tos                 A subcommand for viewing, accepting, rejecting, and\n                        otherwise interacting with a channel's Terms of\n                        Service (ToS). This plugin periodically checks for\n                        updated Terms of Service for the active/selected\n                        channels. Channels with a Terms of Service will need\n                        to be accepted or rejected prior to use. Conda will\n                        only allow package installation from channels without\n                        a Terms of Service or with an accepted Terms of\n                        Service. Attempting to use a channel with a rejected\n                        Terms of Service will result in an error.\n    update (upgrade)    Update conda packages to the latest compatible\n                        version.\n",
                            "status": "failed",
                            "warnings": []
                        },
                        {
                            "context": null,
                            "errors": [
                                {
                                    "loc": [
                                        "weights",
                                        "pytorch_state_dict"
                                    ],
                                    "msg": "'model_55815a78a51843e389578aebfcec2d1a57a96d420aa5e2c61a6a91a18efcc7c3'",
                                    "traceback_html": "<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<style>\n.r1 {color: #800000; text-decoration-color: #800000}\n.r2 {color: #800000; text-decoration-color: #800000; font-weight: bold}\n.r3 {color: #bf7f7f; text-decoration-color: #bf7f7f; font-weight: bold}\n.r4 {color: #7f7f7f; text-decoration-color: #7f7f7f}\n.r5 {color: #0000ff; text-decoration-color: #0000ff}\n.r6 {color: #ff00ff; text-decoration-color: #ff00ff}\n.r7 {color: #808000; text-decoration-color: #808000}\n.r8 {color: #ff0000; text-decoration-color: #ff0000; font-weight: bold}\n.r9 {color: #800080; text-decoration-color: #800080; font-weight: bold}\n.r10 {font-weight: bold}\n.r11 {color: #008000; text-decoration-color: #008000}\n.r12 {font-style: italic}\n.r13 {color: #00ffff; text-decoration-color: #00ffff}\n.r14 {color: #808080; text-decoration-color: #808080}\n.r15 {color: #00ffff; text-decoration-color: #00ffff; text-decoration: underline}\nbody {\n    color: #000000;\n    background-color: #ffffff;\n}\n</style>\n</head>\n<body>\n    <pre style=\"font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><code style=\"font-family:inherit\"><span class=\"r1\">‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ </span><span class=\"r2\">Traceback </span><span class=\"r3\">(most recent call last)</span><span class=\"r1\"> ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/1df8590deee1e057f10712bab6245b52fe8e4e83af79ab71e057848d23ff19f1/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">108 </span><span class=\"r4\">‚îÇ   </span>module = sys.modules.get(module_name)                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">109 </span><span class=\"r4\">‚îÇ   </span><span class=\"r5\">if</span> module <span class=\"r6\">is</span> <span class=\"r5\">None</span>:                                                                     <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">110 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">try</span>:                                                                               <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span>111 <span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span>tmp_dir = TemporaryDirectory(ignore_cleanup_errors=<span class=\"r5\">True</span>)                       <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">112 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span>module_path = Path(tmp_dir.name) / module_name                                 <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">113 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">if</span> reader.original_file_name.endswith(<span class=\"r7\">&quot;.zip&quot;</span>) <span class=\"r6\">or</span> is_zipfile(reader):           <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">114 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span>module_path.mkdir()                                                        <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ</span>\n<span class=\"r8\">TypeError: </span><span class=\"r9\">__init__</span><span class=\"r10\">()</span> got an unexpected keyword argument <span class=\"r11\">&#x27;ignore_cleanup_errors&#x27;</span>\n\n<span class=\"r12\">During handling of the above exception, another exception occurred:</span>\n\n<span class=\"r1\">‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ </span><span class=\"r2\">Traceback </span><span class=\"r3\">(most recent call last)</span><span class=\"r1\"> ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/1df8590deee1e057f10712bab6245b52fe8e4e83af79ab71e057848d23ff19f1/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">820 </span><span class=\"r4\">‚îÇ   </span><span class=\"r5\">try</span>:                                                                                   <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">821 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>test_inputs = get_test_inputs(model)                                               <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">822 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>                                                                                   <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span>823 <span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">with</span> create_prediction_pipeline(                                                   <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">824 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span>bioimageio_model=model, devices=devices, weight_format=weight_format           <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">825 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>) <span class=\"r5\">as</span> prediction_pipeline:                                                          <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">826 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">for</span> n, batch_size, inputs, exptected_output_shape <span class=\"r6\">in</span> generate_test_cases():    <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/1df8590deee1e057f10712bab6245b52fe8e4e83af79ab71e057848d23ff19f1/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">368 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r7\">f&quot;deprecated create_prediction_pipeline kwargs: {</span><span class=\"r13\">set</span>(deprecated_kwargs)<span class=\"r7\">}&quot;</span>      <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">369 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>)                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">370 </span><span class=\"r4\">‚îÇ   </span>                                                                                       <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span>371 <span class=\"r4\">‚îÇ   </span>model_adapter = model_adapter <span class=\"r6\">or</span> create_model_adapter(                                 <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">372 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>model_description=bioimageio_model,                                                <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">373 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>devices=devices,                                                                   <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">374 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>weight_format_priority_order=weights_format <span class=\"r6\">and</span> (weights_format,),                 <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/1df8590deee1e057f10712bab6245b52fe8e4e83af79ab71e057848d23ff19f1/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">166 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">assert</span> errors                                                                      <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">167 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">if</span> <span class=\"r13\">len</span>(weight_format_priority_order) == <span class=\"r5\">1</span>:                                         <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">168 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">assert</span> <span class=\"r13\">len</span>(errors) == <span class=\"r5\">1</span>                                                        <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span>169 <span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">raise</span> errors[<span class=\"r5\">0</span>]                                                                <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">170 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>                                                                                   <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">171 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">else</span>:                                                                              <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">172 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span>msg = (                                                                        <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/1df8590deee1e057f10712bab6245b52fe8e4e83af79ab71e057848d23ff19f1/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">109 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">try</span>:                                                                       <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">110 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">from</span><span class=\"r14\"> </span><span class=\"r15\">.pytorch_backend</span><span class=\"r14\"> </span><span class=\"r5\">import</span> PytorchModelAdapter                       <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">111 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span>                                                                       <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span>112 <span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">return</span> PytorchModelAdapter(                                            <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">113 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span>model_description=model_description, devices=devices               <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">114 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span>)                                                                      <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">115 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">except</span> <span class=\"r13\">Exception</span> <span class=\"r5\">as</span> e:                                                     <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/1df8590deee1e057f10712bab6245b52fe8e4e83af79ab71e057848d23ff19f1/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 35 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">raise</span> <span class=\"r13\">ValueError</span>(<span class=\"r7\">&quot;No `pytorch_state_dict` weights found&quot;</span>)                      <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 36 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>                                                                                   <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 37 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>devices = get_devices(devices)                                                     <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span> 38 <span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r13\">self</span>._model = load_torch_model(weights, load_state=<span class=\"r5\">True</span>, devices=devices)          <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 39 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">if</span> mode == <span class=\"r7\">&quot;eval&quot;</span>:                                                                 <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 40 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r13\">self</span>._model = <span class=\"r13\">self</span>._model.eval()                                               <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 41 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">elif</span> mode == <span class=\"r7\">&quot;train&quot;</span>:                                                              <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/1df8590deee1e057f10712bab6245b52fe8e4e83af79ab71e057848d23ff19f1/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">100 </span><span class=\"r4\">‚îÇ   </span>load_state: <span class=\"r13\">bool</span> = <span class=\"r5\">True</span>,                                                               <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">101 </span><span class=\"r4\">‚îÇ   </span>devices: Optional[Sequence[Union[<span class=\"r13\">str</span>, torch.device]]] = <span class=\"r5\">None</span>,                          <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">102 </span>) -&gt; nn.Module:                                                                            <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span>103 <span class=\"r4\">‚îÇ   </span>custom_callable = import_callable(                                                     <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">104 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>weight_spec.architecture,                                                          <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">105 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>sha256=(                                                                           <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">106 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span>weight_spec.architecture_sha256                                                <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/1df8590deee1e057f10712bab6245b52fe8e4e83af79ab71e057848d23ff19f1/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 74 </span><span class=\"r4\">‚îÇ   </span><span class=\"r5\">elif</span> <span class=\"r13\">isinstance</span>(node, CallableFromFile):                                               <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 75 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>c = _import_from_file_impl(node.source_file, <span class=\"r13\">str</span>(node.callable_name), **kwargs)    <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 76 </span><span class=\"r4\">‚îÇ   </span><span class=\"r5\">elif</span> <span class=\"r13\">isinstance</span>(node, ArchitectureFromFileDescr):                                      <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span> 77 <span class=\"r4\">‚îÇ   ‚îÇ   </span>c = _import_from_file_impl(node.source, <span class=\"r13\">str</span>(node.callable), sha256=node.sha256)    <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 78 </span><span class=\"r4\">‚îÇ   </span><span class=\"r5\">else</span>:                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 79 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>assert_never(node)                                                                 <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 80 </span>                                                                                           <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/1df8590deee1e057f10712bab6245b52fe8e4e83af79ab71e057848d23ff19f1/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">132 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span>importlib_spec.loader.exec_module(module)                                      <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">133 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>                                                                                   <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">134 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">except</span> <span class=\"r13\">Exception</span> <span class=\"r5\">as</span> e:                                                             <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span>135 <span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">del</span> sys.modules[module_name]                                                   <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">136 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">raise</span> <span class=\"r13\">ImportError</span>(<span class=\"r7\">f&quot;Failed to import {</span>source<span class=\"r7\">}&quot;</span>) <span class=\"r5\">from</span><span class=\"r14\"> </span><span class=\"r15\">e</span>                         <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">137 </span><span class=\"r4\">‚îÇ   </span>                                                                                       <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">138 </span><span class=\"r4\">‚îÇ   </span><span class=\"r5\">try</span>:                                                                                   <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ</span>\n<span class=\"r8\">KeyError: </span><span class=\"r11\">&#x27;model_55815a78a51843e389578aebfcec2d1a57a96d420aa5e2c61a6a91a18efcc7c3&#x27;</span>\n</code></pre>\n</body>\n</html>\n",
                                    "traceback_md": "‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Traceback (most recent call last) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ /usr/share/miniconda/envs/1df8590deee1e057f10712bab6245b52fe8e4e83af79ab71e057848d23ff19f1/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ   108 ‚îÇ   module = sys.modules.get(module_name)                                                  ‚îÇ\n‚îÇ   109 ‚îÇ   if module is None:                                                                     ‚îÇ\n‚îÇ   110 ‚îÇ   ‚îÇ   try:                                                                               ‚îÇ\n‚îÇ ‚ù± 111 ‚îÇ   ‚îÇ   ‚îÇ   tmp_dir = TemporaryDirectory(ignore_cleanup_errors=True)                       ‚îÇ\n‚îÇ   112 ‚îÇ   ‚îÇ   ‚îÇ   module_path = Path(tmp_dir.name) / module_name                                 ‚îÇ\n‚îÇ   113 ‚îÇ   ‚îÇ   ‚îÇ   if reader.original_file_name.endswith(\".zip\") or is_zipfile(reader):           ‚îÇ\n‚îÇ   114 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   module_path.mkdir()                                                        ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\nTypeError: __init__() got an unexpected keyword argument 'ignore_cleanup_errors'\n\nDuring handling of the above exception, another exception occurred:\n\n‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Traceback (most recent call last) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ /usr/share/miniconda/envs/1df8590deee1e057f10712bab6245b52fe8e4e83af79ab71e057848d23ff19f1/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ   820 ‚îÇ   try:                                                                                   ‚îÇ\n‚îÇ   821 ‚îÇ   ‚îÇ   test_inputs = get_test_inputs(model)                                               ‚îÇ\n‚îÇ   822 ‚îÇ   ‚îÇ                                                                                      ‚îÇ\n‚îÇ ‚ù± 823 ‚îÇ   ‚îÇ   with create_prediction_pipeline(                                                   ‚îÇ\n‚îÇ   824 ‚îÇ   ‚îÇ   ‚îÇ   bioimageio_model=model, devices=devices, weight_format=weight_format           ‚îÇ\n‚îÇ   825 ‚îÇ   ‚îÇ   ) as prediction_pipeline:                                                          ‚îÇ\n‚îÇ   826 ‚îÇ   ‚îÇ   ‚îÇ   for n, batch_size, inputs, exptected_output_shape in generate_test_cases():    ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ /usr/share/miniconda/envs/1df8590deee1e057f10712bab6245b52fe8e4e83af79ab71e057848d23ff19f1/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ   368 ‚îÇ   ‚îÇ   ‚îÇ   f\"deprecated create_prediction_pipeline kwargs: {set(deprecated_kwargs)}\"      ‚îÇ\n‚îÇ   369 ‚îÇ   ‚îÇ   )                                                                                  ‚îÇ\n‚îÇ   370 ‚îÇ                                                                                          ‚îÇ\n‚îÇ ‚ù± 371 ‚îÇ   model_adapter = model_adapter or create_model_adapter(                                 ‚îÇ\n‚îÇ   372 ‚îÇ   ‚îÇ   model_description=bioimageio_model,                                                ‚îÇ\n‚îÇ   373 ‚îÇ   ‚îÇ   devices=devices,                                                                   ‚îÇ\n‚îÇ   374 ‚îÇ   ‚îÇ   weight_format_priority_order=weights_format and (weights_format,),                 ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ /usr/share/miniconda/envs/1df8590deee1e057f10712bab6245b52fe8e4e83af79ab71e057848d23ff19f1/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ   166 ‚îÇ   ‚îÇ   assert errors                                                                      ‚îÇ\n‚îÇ   167 ‚îÇ   ‚îÇ   if len(weight_format_priority_order) == 1:                                         ‚îÇ\n‚îÇ   168 ‚îÇ   ‚îÇ   ‚îÇ   assert len(errors) == 1                                                        ‚îÇ\n‚îÇ ‚ù± 169 ‚îÇ   ‚îÇ   ‚îÇ   raise errors[0]                                                                ‚îÇ\n‚îÇ   170 ‚îÇ   ‚îÇ                                                                                      ‚îÇ\n‚îÇ   171 ‚îÇ   ‚îÇ   else:                                                                              ‚îÇ\n‚îÇ   172 ‚îÇ   ‚îÇ   ‚îÇ   msg = (                                                                        ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ /usr/share/miniconda/envs/1df8590deee1e057f10712bab6245b52fe8e4e83af79ab71e057848d23ff19f1/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ   109 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   try:                                                                       ‚îÇ\n‚îÇ   110 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   from .pytorch_backend import PytorchModelAdapter                       ‚îÇ\n‚îÇ   111 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ                                                                          ‚îÇ\n‚îÇ ‚ù± 112 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   return PytorchModelAdapter(                                            ‚îÇ\n‚îÇ   113 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   model_description=model_description, devices=devices               ‚îÇ\n‚îÇ   114 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   )                                                                      ‚îÇ\n‚îÇ   115 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   except Exception as e:                                                     ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ /usr/share/miniconda/envs/1df8590deee1e057f10712bab6245b52fe8e4e83af79ab71e057848d23ff19f1/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ    35 ‚îÇ   ‚îÇ   ‚îÇ   raise ValueError(\"No `pytorch_state_dict` weights found\")                      ‚îÇ\n‚îÇ    36 ‚îÇ   ‚îÇ                                                                                      ‚îÇ\n‚îÇ    37 ‚îÇ   ‚îÇ   devices = get_devices(devices)                                                     ‚îÇ\n‚îÇ ‚ù±  38 ‚îÇ   ‚îÇ   self._model = load_torch_model(weights, load_state=True, devices=devices)          ‚îÇ\n‚îÇ    39 ‚îÇ   ‚îÇ   if mode == \"eval\":                                                                 ‚îÇ\n‚îÇ    40 ‚îÇ   ‚îÇ   ‚îÇ   self._model = self._model.eval()                                               ‚îÇ\n‚îÇ    41 ‚îÇ   ‚îÇ   elif mode == \"train\":                                                              ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ /usr/share/miniconda/envs/1df8590deee1e057f10712bab6245b52fe8e4e83af79ab71e057848d23ff19f1/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ   100 ‚îÇ   load_state: bool = True,                                                               ‚îÇ\n‚îÇ   101 ‚îÇ   devices: Optional[Sequence[Union[str, torch.device]]] = None,                          ‚îÇ\n‚îÇ   102 ) -> nn.Module:                                                                            ‚îÇ\n‚îÇ ‚ù± 103 ‚îÇ   custom_callable = import_callable(                                                     ‚îÇ\n‚îÇ   104 ‚îÇ   ‚îÇ   weight_spec.architecture,                                                          ‚îÇ\n‚îÇ   105 ‚îÇ   ‚îÇ   sha256=(                                                                           ‚îÇ\n‚îÇ   106 ‚îÇ   ‚îÇ   ‚îÇ   weight_spec.architecture_sha256                                                ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ /usr/share/miniconda/envs/1df8590deee1e057f10712bab6245b52fe8e4e83af79ab71e057848d23ff19f1/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ    74 ‚îÇ   elif isinstance(node, CallableFromFile):                                               ‚îÇ\n‚îÇ    75 ‚îÇ   ‚îÇ   c = _import_from_file_impl(node.source_file, str(node.callable_name), **kwargs)    ‚îÇ\n‚îÇ    76 ‚îÇ   elif isinstance(node, ArchitectureFromFileDescr):                                      ‚îÇ\n‚îÇ ‚ù±  77 ‚îÇ   ‚îÇ   c = _import_from_file_impl(node.source, str(node.callable), sha256=node.sha256)    ‚îÇ\n‚îÇ    78 ‚îÇ   else:                                                                                  ‚îÇ\n‚îÇ    79 ‚îÇ   ‚îÇ   assert_never(node)                                                                 ‚îÇ\n‚îÇ    80                                                                                            ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ /usr/share/miniconda/envs/1df8590deee1e057f10712bab6245b52fe8e4e83af79ab71e057848d23ff19f1/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ   132 ‚îÇ   ‚îÇ   ‚îÇ   importlib_spec.loader.exec_module(module)                                      ‚îÇ\n‚îÇ   133 ‚îÇ   ‚îÇ                                                                                      ‚îÇ\n‚îÇ   134 ‚îÇ   ‚îÇ   except Exception as e:                                                             ‚îÇ\n‚îÇ ‚ù± 135 ‚îÇ   ‚îÇ   ‚îÇ   del sys.modules[module_name]                                                   ‚îÇ\n‚îÇ   136 ‚îÇ   ‚îÇ   ‚îÇ   raise ImportError(f\"Failed to import {source}\") from e                         ‚îÇ\n‚îÇ   137 ‚îÇ                                                                                          ‚îÇ\n‚îÇ   138 ‚îÇ   try:                                                                                   ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\nKeyError: 'model_55815a78a51843e389578aebfcec2d1a57a96d420aa5e2c61a6a91a18efcc7c3'\n",
                                    "type": "bioimageio.core",
                                    "with_traceback": true
                                }
                            ],
                            "loc": [
                                "weights",
                                "pytorch_state_dict"
                            ],
                            "name": "Run pytorch_state_dict inference for parametrized inputs",
                            "recommended_env": null,
                            "saved_conda_compare": null,
                            "status": "failed",
                            "warnings": []
                        }
                    ],
                    "env": [
                        [
                            "bioimageio.spec",
                            "0.5.4.3",
                            "",
                            ""
                        ],
                        [
                            "bioimageio.core",
                            "0.9.0",
                            "",
                            ""
                        ]
                    ],
                    "format_version": "0.5.4",
                    "id": "merry-gorilla",
                    "metadata_completeness": 0.0,
                    "name": "bioimageio format validation",
                    "saved_conda_list": "usage: conda [-h] [-v] [--no-plugins] [-V] COMMAND ...\n\nconda is a tool for managing and deploying applications, environments and packages.\n\noptions:\n  -h, --help            Show this help message and exit.\n  -v, --verbose         Can be used multiple times. Once for detailed output,\n                        twice for INFO logging, thrice for DEBUG logging, four\n                        times for TRACE logging.\n  --no-plugins          Disable all plugins that are not built into conda.\n  -V, --version         Show the conda version number and exit.\n\ncommands:\n  The following built-in and plugins subcommands are available.\n\n  COMMAND\n    activate            Activate a conda environment.\n    clean               Remove unused packages and caches.\n    commands            List all available conda subcommands (including those\n                        from plugins). Generally only used by tab-completion.\n    compare             Compare packages between conda environments.\n    config              Modify configuration values in .condarc.\n    content-trust       Signing and verification tools for Conda\n    create              Create a new conda environment from a list of\n                        specified packages.\n    deactivate          Deactivate the current active conda environment.\n    doctor              Display a health report for your environment.\n    env                 Create and manage conda environments.\n    export              Export a given environment\n    info                Display information about current conda install.\n    init                Initialize conda for shell interaction.\n    install             Install a list of packages into a specified conda\n                        environment.\n    list                List installed packages in a conda environment.\n    notices             Retrieve latest channel notifications.\n    package             Create low-level conda packages. (EXPERIMENTAL)\n    remove (uninstall)  Remove a list of packages from a specified conda\n                        environment.\n    rename              Rename an existing environment.\n    repoquery           Advanced search for repodata.\n    run                 Run an executable in a conda environment.\n    search              Search for packages and display associated information\n                        using the MatchSpec format.\n    token               See `conda token --help`.\n    tos                 A subcommand for viewing, accepting, rejecting, and\n                        otherwise interacting with a channel's Terms of\n                        Service (ToS). This plugin periodically checks for\n                        updated Terms of Service for the active/selected\n                        channels. Channels with a Terms of Service will need\n                        to be accepted or rejected prior to use. Conda will\n                        only allow package installation from channels without\n                        a Terms of Service or with an accepted Terms of\n                        Service. Attempting to use a channel with a rejected\n                        Terms of Service will result in an error.\n    update (upgrade)    Update conda packages to the latest compatible\n                        version.\n",
                    "source_name": "https://hypha.aicell.io/bioimage-io/artifacts/merry-gorilla/files/rdf.yaml?version=v0",
                    "status": "failed",
                    "type": "model"
                },
                "error": "'model_55815a78a51843e389578aebfcec2d1a57a96d420aa5e2c61a6a91a18efcc7c3'\n\n'model_55815a78a51843e389578aebfcec2d1a57a96d420aa5e2c61a6a91a18efcc7c3'",
                "links": [],
                "score": 0.0,
                "status": "failed"
            }
        },
        "careamics": {
            "0.0.16": {
                "badge": null,
                "details": "'Model' resource not tagged with 'CAREamics' or 'careamics'.",
                "error": null,
                "links": [],
                "score": 0.0,
                "status": "not-applicable"
            },
            "0.0.17": {
                "badge": null,
                "details": "'Model' resource not tagged with 'CAREamics' or 'careamics'.",
                "error": null,
                "links": [],
                "score": 0.0,
                "status": "not-applicable"
            }
        }
    }
}