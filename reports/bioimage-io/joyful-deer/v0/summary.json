{
    "rdf_content": {
        "attachments": {
            "files": [
                "scale_linear.ijm"
            ]
        },
        "authors": [
            {
                "affiliation": "EMBL Heidelberg",
                "github_user": "jhennies",
                "name": "Julian Hennies",
                "orcid": "0000-0002-0555-151X"
            }
        ],
        "cite": [
            {
                "doi": "10.1101/2023.04.06.535829",
                "text": "Hennies et al. 2023, CebraEM: A practical workflow to segment cellular organelles in volume SEM datasets using a transferable CNN-based membrane prediction"
            }
        ],
        "config": {
            "bioimageio": {
                "nickname": "joyful-deer",
                "nickname_icon": "🦌",
                "test_kwargs": {
                    "pytorch_state_dict": {
                        "decimal": 2
                    },
                    "torchscript": {
                        "decimal": 2
                    }
                },
                "thumbnails": {
                    "coverimage.jpg": "coverimage.thumbnail.png"
                }
            }
        },
        "covers": [
            "coverimage.jpg"
        ],
        "description": "Cellular membrane prediction model for volume SEM datasets",
        "documentation": "CebraNET_README.md",
        "format_version": "0.4.10",
        "id": "10.5281/zenodo.7274275/8123818",
        "id_emoji": "🦌",
        "inputs": [
            {
                "axes": "bczyx",
                "data_range": [
                    0.0,
                    255.0
                ],
                "data_type": "uint8",
                "name": "input0",
                "preprocessing": [
                    {
                        "kwargs": {
                            "axes": "xyz",
                            "gain": 0.00392156862745098,
                            "offset": 0.0
                        },
                        "name": "scale_linear"
                    }
                ],
                "shape": {
                    "min": [
                        1,
                        1,
                        64,
                        64,
                        64
                    ],
                    "step": [
                        0,
                        0,
                        16,
                        16,
                        16
                    ]
                }
            }
        ],
        "license": "CC-BY-4.0",
        "links": [
            "imjoy/BioImageIO-Packager",
            "ilastik/ilastik"
        ],
        "maintainers": [
            {
                "affiliation": "EMBL Heidelberg",
                "github_user": "jhennies",
                "name": "Julian Hennies",
                "orcid": "0000-0002-0555-151X"
            }
        ],
        "name": "CebraNET Cellular Membranes in Volume SEM",
        "outputs": [
            {
                "axes": "bczyx",
                "data_range": [
                    null,
                    null
                ],
                "data_type": "float32",
                "halo": [
                    0,
                    0,
                    16,
                    16,
                    16
                ],
                "name": "output0",
                "shape": [
                    1,
                    1,
                    64,
                    64,
                    64
                ]
            }
        ],
        "sample_inputs": [
            "sample_input_0.tif"
        ],
        "sample_outputs": [
            "sample_output_0.tif"
        ],
        "tags": [
            "unet",
            "3d",
            "cells",
            "whole-organism",
            "ilastik",
            "semantic-segmentation",
            "electron-microscopy",
            "pytorch",
            "membranes",
            "hela",
            "macrophage",
            "platynereis",
            "calu-3"
        ],
        "test_inputs": [
            "test_data_raw.npy"
        ],
        "test_outputs": [
            "test_data_out.npy"
        ],
        "timestamp": "2023-10-27T11:34:30.252675",
        "type": "model",
        "uploader": {
            "email": "bioimageiobot@gmail.com"
        },
        "version": 1,
        "version_number": 1,
        "weights": {
            "pytorch_state_dict": {
                "architecture": "piled_unets.py:PiledUnet",
                "architecture_sha256": "4b0f4759b35dfcd868f71acac492fc6c2c9c99897b30b2508126a8e6607e24c7",
                "kwargs": {
                    "batch_norm": true,
                    "filter_sizes_bottleneck": [
                        [
                            64,
                            128
                        ],
                        [
                            64,
                            128
                        ],
                        [
                            64,
                            128
                        ]
                    ],
                    "filter_sizes_down": [
                        [
                            [
                                8,
                                16
                            ],
                            [
                                16,
                                32
                            ],
                            [
                                32,
                                64
                            ]
                        ],
                        [
                            [
                                8,
                                16
                            ],
                            [
                                16,
                                32
                            ],
                            [
                                32,
                                64
                            ]
                        ],
                        [
                            [
                                8,
                                16
                            ],
                            [
                                16,
                                32
                            ],
                            [
                                32,
                                64
                            ]
                        ]
                    ],
                    "filter_sizes_up": [
                        [
                            [
                                64,
                                64
                            ],
                            [
                                32,
                                32
                            ],
                            [
                                16,
                                16
                            ]
                        ],
                        [
                            [
                                64,
                                64
                            ],
                            [
                                32,
                                32
                            ],
                            [
                                16,
                                16
                            ]
                        ],
                        [
                            [
                                64,
                                64
                            ],
                            [
                                32,
                                32
                            ],
                            [
                                16,
                                16
                            ]
                        ]
                    ],
                    "in_channels": 1,
                    "n_nets": 3,
                    "out_channels": [
                        1,
                        1,
                        1
                    ],
                    "output_activation": "sigmoid",
                    "predict": true
                },
                "pytorch_version": "1.13.1",
                "sha256": "6b523c9a77916e75306563e39b79ef2cfb72a857540994958a8d0943f46a207c",
                "source": "model_0097.pt"
            },
            "torchscript": {
                "pytorch_version": "1.13.1",
                "sha256": "edbb4da356b1d79b0ed0ee73dd80d3760ddf99ebdd969900aba7ff8d1c521734",
                "source": "weights.torchscript"
            }
        }
    },
    "rdf_yaml_sha256": "09faf05e35240aa1552e5809ea4873cfb228417128bc5fca6e0a618fc45bb838",
    "scores": {
        "core_compatibility": 0.0,
        "metadata_completeness": 0.0,
        "metadata_format": 0.0,
        "overall_compatibility": 0.0,
        "overall_partner_tool_compatibility": 0.0,
        "tool_compatibility": {},
        "tool_compatibility_version_specific": {}
    },
    "status": "failed",
    "tests": {
        "biapy": {
            "3.6.5": {
                "badge": null,
                "details": "[all] pytorch_state_dict not found in model RDF or inputs != 1\n",
                "error": "[all] pytorch_state_dict not found in model RDF or inputs != 1\n",
                "links": [
                    "biapy/biapy"
                ],
                "score": 0.0,
                "status": "failed"
            }
        },
        "bioimageio.core": {
            "0.9.4": {
                "badge": null,
                "details": {
                    "details": [
                        {
                            "context": {
                                "file_name": "rdf.yaml",
                                "known_files": {
                                    "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/CebraNET_README.md?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/coverimage.jpg?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/model_0097.pt?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/piled_unets.py?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/sample_input_0.tif?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/sample_output_0.tif?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/scale_linear.ijm?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/test_data_out.npy?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/test_data_raw.npy?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/weights.torchscript?version=v0": null,
                                    "model_0097.pt": "6b523c9a77916e75306563e39b79ef2cfb72a857540994958a8d0943f46a207c",
                                    "weights.torchscript": "edbb4da356b1d79b0ed0ee73dd80d3760ddf99ebdd969900aba7ff8d1c521734"
                                },
                                "original_source_name": null,
                                "perform_io_checks": true,
                                "root": "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files?version=v0",
                                "update_hashes": false
                            },
                            "errors": [],
                            "loc": [],
                            "name": "Successfully created `ModelDescr` instance.",
                            "recommended_env": null,
                            "saved_conda_compare": null,
                            "status": "passed",
                            "warnings": []
                        },
                        {
                            "context": {
                                "file_name": "rdf.yaml",
                                "known_files": {
                                    "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/CebraNET_README.md?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/coverimage.jpg?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/model_0097.pt?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/piled_unets.py?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/sample_input_0.tif?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/sample_output_0.tif?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/scale_linear.ijm?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/test_data_out.npy?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/test_data_raw.npy?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/weights.torchscript?version=v0": null,
                                    "model_0097.pt": "6b523c9a77916e75306563e39b79ef2cfb72a857540994958a8d0943f46a207c",
                                    "weights.torchscript": "edbb4da356b1d79b0ed0ee73dd80d3760ddf99ebdd969900aba7ff8d1c521734"
                                },
                                "original_source_name": null,
                                "perform_io_checks": true,
                                "root": "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files?version=v0",
                                "update_hashes": false
                            },
                            "errors": [],
                            "loc": [],
                            "name": "bioimageio.spec format validation model 0.4.10",
                            "recommended_env": null,
                            "saved_conda_compare": null,
                            "status": "passed",
                            "warnings": []
                        },
                        {
                            "context": null,
                            "errors": [
                                {
                                    "loc": [
                                        "weights",
                                        "pytorch_state_dict"
                                    ],
                                    "msg": "model.v0_4.ScaleLinearKwargs with axes not implemented, please consider updating the model to v0_5.",
                                    "traceback_html": "<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<style>\n.r1 {color: #800000; text-decoration-color: #800000}\n.r2 {color: #800000; text-decoration-color: #800000; font-weight: bold}\n.r3 {color: #bf7f7f; text-decoration-color: #bf7f7f; font-weight: bold}\n.r4 {color: #7f7f7f; text-decoration-color: #7f7f7f}\n.r5 {color: #0000ff; text-decoration-color: #0000ff}\n.r6 {color: #00ffff; text-decoration-color: #00ffff}\n.r7 {color: #bfbfbf; text-decoration-color: #bfbfbf}\n.r8 {color: #808000; text-decoration-color: #808000}\n.r9 {color: #bfbf7f; text-decoration-color: #bfbf7f}\n.r10 {color: #808080; text-decoration-color: #808080}\n.r11 {color: #00ff00; text-decoration-color: #00ff00}\n.r12 {color: #ff00ff; text-decoration-color: #ff00ff}\n.r13 {color: #ff0000; text-decoration-color: #ff0000; font-weight: bold}\nbody {\n    color: #000000;\n    background-color: #ffffff;\n}\n</style>\n</head>\n<body>\n    <pre style=\"font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><code style=\"font-family:inherit\"><span class=\"r1\">╭─────────────────────────────── </span><span class=\"r2\">Traceback </span><span class=\"r3\">(most recent call last)</span><span class=\"r1\"> ────────────────────────────────╮</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/b67f0851ec76977c6bebe397fb842f1c9b3e02c3f4da6dba02caf69ff1f8a0ee/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 774 </span><span class=\"r4\">│   │   </span>test_input = get_test_input_sample(model)                                         <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 775 </span><span class=\"r4\">│   │   </span>expected = get_test_output_sample(model)                                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 776 </span><span class=\"r4\">│   │   </span>                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span> 777 <span class=\"r4\">│   │   </span><span class=\"r5\">with</span> create_prediction_pipeline(                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 778 </span><span class=\"r4\">│   │   │   </span>bioimageio_model=model, devices=devices, weight_format=weight_format          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 779 </span><span class=\"r4\">│   │   </span>) <span class=\"r5\">as</span> prediction_pipeline:                                                         <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 780 </span><span class=\"r4\">│   │   │   </span>results = prediction_pipeline.predict_sample_without_blocking(test_input)     <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/b67f0851ec76977c6bebe397fb842f1c9b3e02c3f4da6dba02caf69ff1f8a0ee/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">384 </span><span class=\"r4\">│   │   │   </span><span class=\"r5\">else</span>:                                                                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">385 </span><span class=\"r4\">│   │   │   │   </span><span class=\"r5\">yield</span> Sample(members=<span class=\"r6\">dict</span>(<span class=\"r6\">zip</span>(input_ids, x)), stat=common_stat, <span class=\"r6\">id</span>=i)      <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">386 </span><span class=\"r4\">│   </span>                                                                                       <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span>387 <span class=\"r4\">│   </span>preprocessing, postprocessing = setup_pre_and_postprocessing(                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">388 </span><span class=\"r4\">│   │   </span>bioimageio_model,                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">389 </span><span class=\"r4\">│   │   </span>dataset(),                                                                         <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">390 </span><span class=\"r4\">│   │   </span>keep_updating_initial_dataset_stats=keep_updating_initial_dataset_statistics,      <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/b67f0851ec76977c6bebe397fb842f1c9b3e02c3f4da6dba02caf69ff1f8a0ee/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 95 </span><span class=\"r7\">│   </span><span class=\"r8\">&quot;&quot;&quot;</span>                                                                                    <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 96 </span><span class=\"r9\">│   </span><span class=\"r8\">Get pre- and postprocessing operators for a `model` description.</span>                       <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 97 </span><span class=\"r9\">│   </span><span class=\"r8\">Used in `bioimageio.core.create_prediction_pipeline&quot;&quot;&quot;</span>                                 <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span> 98 <span class=\"r4\">│   </span>prep, post, prep_meas, post_meas = _prepare_setup_pre_and_postprocessing(model)        <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 99 </span><span class=\"r4\">│   </span>                                                                                       <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">100 </span><span class=\"r4\">│   </span>missing_dataset_stats = {                                                              <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">101 </span><span class=\"r4\">│   │   </span>m                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/b67f0851ec76977c6bebe397fb842f1c9b3e02c3f4da6dba02caf69ff1f8a0ee/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">216 </span>                                                                                           <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">217 </span><span class=\"r5\">def</span><span class=\"r10\"> </span><span class=\"r11\">_prepare_setup_pre_and_postprocessing</span>(model: AnyModelDescr) -&gt; _SetupProcessing:       <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">218 </span><span class=\"r4\">│   </span><span class=\"r5\">if</span> <span class=\"r6\">isinstance</span>(model, v0_4.ModelDescr):                                                 <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span>219 <span class=\"r4\">│   │   </span>pre = _prepare_procs(model.inputs)                                                 <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">220 </span><span class=\"r4\">│   │   </span>post = _prepare_procs(model.outputs)                                               <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">221 </span><span class=\"r4\">│   </span><span class=\"r5\">elif</span> <span class=\"r6\">isinstance</span>(model, v0_5.ModelDescr):                                               <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">222 </span><span class=\"r4\">│   │   </span>pre = _prepare_procs(model.inputs)                                                 <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/b67f0851ec76977c6bebe397fb842f1c9b3e02c3f4da6dba02caf69ff1f8a0ee/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">188 </span><span class=\"r4\">│   │   </span>                                                                                   <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">189 </span><span class=\"r4\">│   │   </span><span class=\"r5\">if</span> <span class=\"r6\">isinstance</span>(t_descr, (v0_4.InputTensorDescr, v0_5.InputTensorDescr)):            <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">190 </span><span class=\"r4\">│   │   │   </span><span class=\"r5\">for</span> proc_d <span class=\"r12\">in</span> t_descr.preprocessing:                                           <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span>191 <span class=\"r4\">│   │   │   │   </span>procs.append(get_proc(proc_d, t_descr))                                    <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">192 </span><span class=\"r4\">│   │   </span><span class=\"r5\">elif</span> <span class=\"r6\">isinstance</span>(t_descr, (v0_4.OutputTensorDescr, v0_5.OutputTensorDescr)):        <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">193 </span><span class=\"r4\">│   │   │   </span><span class=\"r5\">for</span> proc_d <span class=\"r12\">in</span> t_descr.postprocessing:                                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">194 </span><span class=\"r4\">│   │   │   │   </span>procs.append(get_proc(proc_d, t_descr))                                    <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/b67f0851ec76977c6bebe397fb842f1c9b3e02c3f4da6dba02caf69ff1f8a0ee/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">719 </span><span class=\"r4\">│   </span><span class=\"r5\">elif</span> <span class=\"r6\">isinstance</span>(proc_descr, v0_5.FixedZeroMeanUnitVarianceDescr):                      <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">720 </span><span class=\"r4\">│   │   </span><span class=\"r5\">return</span> FixedZeroMeanUnitVariance.from_proc_descr(proc_descr, member_id)            <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">721 </span><span class=\"r4\">│   </span><span class=\"r5\">elif</span> <span class=\"r6\">isinstance</span>(proc_descr, (v0_4.ScaleLinearDescr, v0_5.ScaleLinearDescr)):           <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span>722 <span class=\"r4\">│   │   </span><span class=\"r5\">return</span> ScaleLinear.from_proc_descr(proc_descr, member_id)                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">723 </span><span class=\"r4\">│   </span><span class=\"r5\">elif</span> <span class=\"r6\">isinstance</span>(                                                                       <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">724 </span><span class=\"r4\">│   │   </span>proc_descr, (v0_4.ScaleMeanVarianceDescr, v0_5.ScaleMeanVarianceDescr)             <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">725 </span><span class=\"r4\">│   </span>):                                                                                     <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/b67f0851ec76977c6bebe397fb842f1c9b3e02c3f4da6dba02caf69ff1f8a0ee/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">310 </span><span class=\"r4\">│   │   │   </span>axis = kwargs.axis                                                             <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">311 </span><span class=\"r4\">│   │   </span><span class=\"r5\">elif</span> <span class=\"r6\">isinstance</span>(kwargs, v0_4.ScaleLinearKwargs):                                   <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">312 </span><span class=\"r4\">│   │   │   </span><span class=\"r5\">if</span> kwargs.axes <span class=\"r12\">is</span> <span class=\"r12\">not</span> <span class=\"r5\">None</span>:                                                    <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span>313 <span class=\"r4\">│   │   │   │   </span><span class=\"r5\">raise</span> <span class=\"r6\">NotImplementedError</span>(                                                 <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">314 </span><span class=\"r4\">│   │   │   │   │   </span><span class=\"r8\">&quot;model.v0_4.ScaleLinearKwargs with axes not implemented, please consid</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">315 </span><span class=\"r4\">│   │   │   │   </span>)                                                                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">316 </span><span class=\"r4\">│   │   │   </span>axis = <span class=\"r5\">None</span>                                                                    <span class=\"r1\">│</span>\n<span class=\"r1\">╰──────────────────────────────────────────────────────────────────────────────────────────────────╯</span>\n<span class=\"r13\">NotImplementedError: </span>model.v0_4.ScaleLinearKwargs with axes not implemented, please consider updating the model to v0_5.\n</code></pre>\n</body>\n</html>\n",
                                    "traceback_md": "╭─────────────────────────────── Traceback (most recent call last) ────────────────────────────────╮\n│ /usr/share/miniconda/envs/b67f0851ec76977c6bebe397fb842f1c9b3e02c3f4da6dba02caf69ff1f8a0ee/lib/p │\n│                                                                                                  │\n│    774 │   │   test_input = get_test_input_sample(model)                                         │\n│    775 │   │   expected = get_test_output_sample(model)                                          │\n│    776 │   │                                                                                     │\n│ ❱  777 │   │   with create_prediction_pipeline(                                                  │\n│    778 │   │   │   bioimageio_model=model, devices=devices, weight_format=weight_format          │\n│    779 │   │   ) as prediction_pipeline:                                                         │\n│    780 │   │   │   results = prediction_pipeline.predict_sample_without_blocking(test_input)     │\n│                                                                                                  │\n│ /usr/share/miniconda/envs/b67f0851ec76977c6bebe397fb842f1c9b3e02c3f4da6dba02caf69ff1f8a0ee/lib/p │\n│                                                                                                  │\n│   384 │   │   │   else:                                                                          │\n│   385 │   │   │   │   yield Sample(members=dict(zip(input_ids, x)), stat=common_stat, id=i)      │\n│   386 │                                                                                          │\n│ ❱ 387 │   preprocessing, postprocessing = setup_pre_and_postprocessing(                          │\n│   388 │   │   bioimageio_model,                                                                  │\n│   389 │   │   dataset(),                                                                         │\n│   390 │   │   keep_updating_initial_dataset_stats=keep_updating_initial_dataset_statistics,      │\n│                                                                                                  │\n│ /usr/share/miniconda/envs/b67f0851ec76977c6bebe397fb842f1c9b3e02c3f4da6dba02caf69ff1f8a0ee/lib/p │\n│                                                                                                  │\n│    95 │   \"\"\"                                                                                    │\n│    96 │   Get pre- and postprocessing operators for a `model` description.                       │\n│    97 │   Used in `bioimageio.core.create_prediction_pipeline\"\"\"                                 │\n│ ❱  98 │   prep, post, prep_meas, post_meas = _prepare_setup_pre_and_postprocessing(model)        │\n│    99 │                                                                                          │\n│   100 │   missing_dataset_stats = {                                                              │\n│   101 │   │   m                                                                                  │\n│                                                                                                  │\n│ /usr/share/miniconda/envs/b67f0851ec76977c6bebe397fb842f1c9b3e02c3f4da6dba02caf69ff1f8a0ee/lib/p │\n│                                                                                                  │\n│   216                                                                                            │\n│   217 def _prepare_setup_pre_and_postprocessing(model: AnyModelDescr) -> _SetupProcessing:       │\n│   218 │   if isinstance(model, v0_4.ModelDescr):                                                 │\n│ ❱ 219 │   │   pre = _prepare_procs(model.inputs)                                                 │\n│   220 │   │   post = _prepare_procs(model.outputs)                                               │\n│   221 │   elif isinstance(model, v0_5.ModelDescr):                                               │\n│   222 │   │   pre = _prepare_procs(model.inputs)                                                 │\n│                                                                                                  │\n│ /usr/share/miniconda/envs/b67f0851ec76977c6bebe397fb842f1c9b3e02c3f4da6dba02caf69ff1f8a0ee/lib/p │\n│                                                                                                  │\n│   188 │   │                                                                                      │\n│   189 │   │   if isinstance(t_descr, (v0_4.InputTensorDescr, v0_5.InputTensorDescr)):            │\n│   190 │   │   │   for proc_d in t_descr.preprocessing:                                           │\n│ ❱ 191 │   │   │   │   procs.append(get_proc(proc_d, t_descr))                                    │\n│   192 │   │   elif isinstance(t_descr, (v0_4.OutputTensorDescr, v0_5.OutputTensorDescr)):        │\n│   193 │   │   │   for proc_d in t_descr.postprocessing:                                          │\n│   194 │   │   │   │   procs.append(get_proc(proc_d, t_descr))                                    │\n│                                                                                                  │\n│ /usr/share/miniconda/envs/b67f0851ec76977c6bebe397fb842f1c9b3e02c3f4da6dba02caf69ff1f8a0ee/lib/p │\n│                                                                                                  │\n│   719 │   elif isinstance(proc_descr, v0_5.FixedZeroMeanUnitVarianceDescr):                      │\n│   720 │   │   return FixedZeroMeanUnitVariance.from_proc_descr(proc_descr, member_id)            │\n│   721 │   elif isinstance(proc_descr, (v0_4.ScaleLinearDescr, v0_5.ScaleLinearDescr)):           │\n│ ❱ 722 │   │   return ScaleLinear.from_proc_descr(proc_descr, member_id)                          │\n│   723 │   elif isinstance(                                                                       │\n│   724 │   │   proc_descr, (v0_4.ScaleMeanVarianceDescr, v0_5.ScaleMeanVarianceDescr)             │\n│   725 │   ):                                                                                     │\n│                                                                                                  │\n│ /usr/share/miniconda/envs/b67f0851ec76977c6bebe397fb842f1c9b3e02c3f4da6dba02caf69ff1f8a0ee/lib/p │\n│                                                                                                  │\n│   310 │   │   │   axis = kwargs.axis                                                             │\n│   311 │   │   elif isinstance(kwargs, v0_4.ScaleLinearKwargs):                                   │\n│   312 │   │   │   if kwargs.axes is not None:                                                    │\n│ ❱ 313 │   │   │   │   raise NotImplementedError(                                                 │\n│   314 │   │   │   │   │   \"model.v0_4.ScaleLinearKwargs with axes not implemented, please consid │\n│   315 │   │   │   │   )                                                                          │\n│   316 │   │   │   axis = None                                                                    │\n╰──────────────────────────────────────────────────────────────────────────────────────────────────╯\nNotImplementedError: model.v0_4.ScaleLinearKwargs with axes not implemented, please consider updating the model to v0_5.\n",
                                    "type": "bioimageio.core",
                                    "with_traceback": true
                                }
                            ],
                            "loc": [
                                "weights",
                                "pytorch_state_dict"
                            ],
                            "name": "Reproduce test outputs from test inputs (pytorch_state_dict)",
                            "recommended_env": {
                                "channels": [
                                    "pytorch",
                                    "conda-forge",
                                    "nodefaults"
                                ],
                                "dependencies": [
                                    "conda-forge::bioimageio.core",
                                    "mkl ==2024.0.0",
                                    "numpy <2",
                                    "pip",
                                    "pytorch==1.13.1",
                                    "setuptools <70.0.0",
                                    "torchaudio==0.13.1",
                                    "torchvision==0.14.1"
                                ],
                                "name": null
                            },
                            "saved_conda_compare": "Success. All the packages in the specification file are present in the environment with matching version and build string.\n",
                            "status": "failed",
                            "warnings": []
                        },
                        {
                            "context": {
                                "file_name": "rdf.yaml",
                                "known_files": {
                                    "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/CebraNET_README.md?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/coverimage.jpg?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/model_0097.pt?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/piled_unets.py?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/sample_input_0.tif?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/sample_output_0.tif?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/scale_linear.ijm?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/test_data_out.npy?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/test_data_raw.npy?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/weights.torchscript?version=v0": null,
                                    "model_0097.pt": "6b523c9a77916e75306563e39b79ef2cfb72a857540994958a8d0943f46a207c",
                                    "weights.torchscript": "edbb4da356b1d79b0ed0ee73dd80d3760ddf99ebdd969900aba7ff8d1c521734"
                                },
                                "original_source_name": null,
                                "perform_io_checks": true,
                                "root": "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files?version=v0",
                                "update_hashes": false
                            },
                            "errors": [],
                            "loc": [],
                            "name": "Successfully created `ModelDescr` instance.",
                            "recommended_env": null,
                            "saved_conda_compare": null,
                            "status": "passed",
                            "warnings": []
                        },
                        {
                            "context": {
                                "file_name": "rdf.yaml",
                                "known_files": {
                                    "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/CebraNET_README.md?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/coverimage.jpg?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/model_0097.pt?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/piled_unets.py?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/sample_input_0.tif?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/sample_output_0.tif?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/scale_linear.ijm?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/test_data_out.npy?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/test_data_raw.npy?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/weights.torchscript?version=v0": null,
                                    "model_0097.pt": "6b523c9a77916e75306563e39b79ef2cfb72a857540994958a8d0943f46a207c",
                                    "weights.torchscript": "edbb4da356b1d79b0ed0ee73dd80d3760ddf99ebdd969900aba7ff8d1c521734"
                                },
                                "original_source_name": null,
                                "perform_io_checks": true,
                                "root": "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files?version=v0",
                                "update_hashes": false
                            },
                            "errors": [],
                            "loc": [],
                            "name": "bioimageio.spec format validation model 0.4.10",
                            "recommended_env": null,
                            "saved_conda_compare": null,
                            "status": "passed",
                            "warnings": []
                        },
                        {
                            "context": null,
                            "errors": [
                                {
                                    "loc": [
                                        "weights",
                                        "pytorch_state_dict"
                                    ],
                                    "msg": "model.v0_4.ScaleLinearKwargs with axes not implemented, please consider updating the model to v0_5.",
                                    "traceback_html": "<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<style>\n.r1 {color: #800000; text-decoration-color: #800000}\n.r2 {color: #800000; text-decoration-color: #800000; font-weight: bold}\n.r3 {color: #bf7f7f; text-decoration-color: #bf7f7f; font-weight: bold}\n.r4 {color: #7f7f7f; text-decoration-color: #7f7f7f}\n.r5 {color: #0000ff; text-decoration-color: #0000ff}\n.r6 {color: #00ffff; text-decoration-color: #00ffff}\n.r7 {color: #bfbfbf; text-decoration-color: #bfbfbf}\n.r8 {color: #808000; text-decoration-color: #808000}\n.r9 {color: #bfbf7f; text-decoration-color: #bfbf7f}\n.r10 {color: #808080; text-decoration-color: #808080}\n.r11 {color: #00ff00; text-decoration-color: #00ff00}\n.r12 {color: #ff00ff; text-decoration-color: #ff00ff}\n.r13 {color: #ff0000; text-decoration-color: #ff0000; font-weight: bold}\nbody {\n    color: #000000;\n    background-color: #ffffff;\n}\n</style>\n</head>\n<body>\n    <pre style=\"font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><code style=\"font-family:inherit\"><span class=\"r1\">╭─────────────────────────────── </span><span class=\"r2\">Traceback </span><span class=\"r3\">(most recent call last)</span><span class=\"r1\"> ────────────────────────────────╮</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/b67f0851ec76977c6bebe397fb842f1c9b3e02c3f4da6dba02caf69ff1f8a0ee/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 774 </span><span class=\"r4\">│   │   </span>test_input = get_test_input_sample(model)                                         <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 775 </span><span class=\"r4\">│   │   </span>expected = get_test_output_sample(model)                                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 776 </span><span class=\"r4\">│   │   </span>                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span> 777 <span class=\"r4\">│   │   </span><span class=\"r5\">with</span> create_prediction_pipeline(                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 778 </span><span class=\"r4\">│   │   │   </span>bioimageio_model=model, devices=devices, weight_format=weight_format          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 779 </span><span class=\"r4\">│   │   </span>) <span class=\"r5\">as</span> prediction_pipeline:                                                         <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 780 </span><span class=\"r4\">│   │   │   </span>results = prediction_pipeline.predict_sample_without_blocking(test_input)     <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/b67f0851ec76977c6bebe397fb842f1c9b3e02c3f4da6dba02caf69ff1f8a0ee/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">384 </span><span class=\"r4\">│   │   │   </span><span class=\"r5\">else</span>:                                                                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">385 </span><span class=\"r4\">│   │   │   │   </span><span class=\"r5\">yield</span> Sample(members=<span class=\"r6\">dict</span>(<span class=\"r6\">zip</span>(input_ids, x)), stat=common_stat, <span class=\"r6\">id</span>=i)      <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">386 </span><span class=\"r4\">│   </span>                                                                                       <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span>387 <span class=\"r4\">│   </span>preprocessing, postprocessing = setup_pre_and_postprocessing(                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">388 </span><span class=\"r4\">│   │   </span>bioimageio_model,                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">389 </span><span class=\"r4\">│   │   </span>dataset(),                                                                         <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">390 </span><span class=\"r4\">│   │   </span>keep_updating_initial_dataset_stats=keep_updating_initial_dataset_statistics,      <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/b67f0851ec76977c6bebe397fb842f1c9b3e02c3f4da6dba02caf69ff1f8a0ee/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 95 </span><span class=\"r7\">│   </span><span class=\"r8\">&quot;&quot;&quot;</span>                                                                                    <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 96 </span><span class=\"r9\">│   </span><span class=\"r8\">Get pre- and postprocessing operators for a `model` description.</span>                       <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 97 </span><span class=\"r9\">│   </span><span class=\"r8\">Used in `bioimageio.core.create_prediction_pipeline&quot;&quot;&quot;</span>                                 <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span> 98 <span class=\"r4\">│   </span>prep, post, prep_meas, post_meas = _prepare_setup_pre_and_postprocessing(model)        <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 99 </span><span class=\"r4\">│   </span>                                                                                       <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">100 </span><span class=\"r4\">│   </span>missing_dataset_stats = {                                                              <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">101 </span><span class=\"r4\">│   │   </span>m                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/b67f0851ec76977c6bebe397fb842f1c9b3e02c3f4da6dba02caf69ff1f8a0ee/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">216 </span>                                                                                           <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">217 </span><span class=\"r5\">def</span><span class=\"r10\"> </span><span class=\"r11\">_prepare_setup_pre_and_postprocessing</span>(model: AnyModelDescr) -&gt; _SetupProcessing:       <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">218 </span><span class=\"r4\">│   </span><span class=\"r5\">if</span> <span class=\"r6\">isinstance</span>(model, v0_4.ModelDescr):                                                 <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span>219 <span class=\"r4\">│   │   </span>pre = _prepare_procs(model.inputs)                                                 <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">220 </span><span class=\"r4\">│   │   </span>post = _prepare_procs(model.outputs)                                               <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">221 </span><span class=\"r4\">│   </span><span class=\"r5\">elif</span> <span class=\"r6\">isinstance</span>(model, v0_5.ModelDescr):                                               <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">222 </span><span class=\"r4\">│   │   </span>pre = _prepare_procs(model.inputs)                                                 <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/b67f0851ec76977c6bebe397fb842f1c9b3e02c3f4da6dba02caf69ff1f8a0ee/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">188 </span><span class=\"r4\">│   │   </span>                                                                                   <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">189 </span><span class=\"r4\">│   │   </span><span class=\"r5\">if</span> <span class=\"r6\">isinstance</span>(t_descr, (v0_4.InputTensorDescr, v0_5.InputTensorDescr)):            <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">190 </span><span class=\"r4\">│   │   │   </span><span class=\"r5\">for</span> proc_d <span class=\"r12\">in</span> t_descr.preprocessing:                                           <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span>191 <span class=\"r4\">│   │   │   │   </span>procs.append(get_proc(proc_d, t_descr))                                    <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">192 </span><span class=\"r4\">│   │   </span><span class=\"r5\">elif</span> <span class=\"r6\">isinstance</span>(t_descr, (v0_4.OutputTensorDescr, v0_5.OutputTensorDescr)):        <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">193 </span><span class=\"r4\">│   │   │   </span><span class=\"r5\">for</span> proc_d <span class=\"r12\">in</span> t_descr.postprocessing:                                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">194 </span><span class=\"r4\">│   │   │   │   </span>procs.append(get_proc(proc_d, t_descr))                                    <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/b67f0851ec76977c6bebe397fb842f1c9b3e02c3f4da6dba02caf69ff1f8a0ee/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">719 </span><span class=\"r4\">│   </span><span class=\"r5\">elif</span> <span class=\"r6\">isinstance</span>(proc_descr, v0_5.FixedZeroMeanUnitVarianceDescr):                      <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">720 </span><span class=\"r4\">│   │   </span><span class=\"r5\">return</span> FixedZeroMeanUnitVariance.from_proc_descr(proc_descr, member_id)            <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">721 </span><span class=\"r4\">│   </span><span class=\"r5\">elif</span> <span class=\"r6\">isinstance</span>(proc_descr, (v0_4.ScaleLinearDescr, v0_5.ScaleLinearDescr)):           <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span>722 <span class=\"r4\">│   │   </span><span class=\"r5\">return</span> ScaleLinear.from_proc_descr(proc_descr, member_id)                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">723 </span><span class=\"r4\">│   </span><span class=\"r5\">elif</span> <span class=\"r6\">isinstance</span>(                                                                       <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">724 </span><span class=\"r4\">│   │   </span>proc_descr, (v0_4.ScaleMeanVarianceDescr, v0_5.ScaleMeanVarianceDescr)             <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">725 </span><span class=\"r4\">│   </span>):                                                                                     <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/b67f0851ec76977c6bebe397fb842f1c9b3e02c3f4da6dba02caf69ff1f8a0ee/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">310 </span><span class=\"r4\">│   │   │   </span>axis = kwargs.axis                                                             <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">311 </span><span class=\"r4\">│   │   </span><span class=\"r5\">elif</span> <span class=\"r6\">isinstance</span>(kwargs, v0_4.ScaleLinearKwargs):                                   <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">312 </span><span class=\"r4\">│   │   │   </span><span class=\"r5\">if</span> kwargs.axes <span class=\"r12\">is</span> <span class=\"r12\">not</span> <span class=\"r5\">None</span>:                                                    <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span>313 <span class=\"r4\">│   │   │   │   </span><span class=\"r5\">raise</span> <span class=\"r6\">NotImplementedError</span>(                                                 <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">314 </span><span class=\"r4\">│   │   │   │   │   </span><span class=\"r8\">&quot;model.v0_4.ScaleLinearKwargs with axes not implemented, please consid</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">315 </span><span class=\"r4\">│   │   │   │   </span>)                                                                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">316 </span><span class=\"r4\">│   │   │   </span>axis = <span class=\"r5\">None</span>                                                                    <span class=\"r1\">│</span>\n<span class=\"r1\">╰──────────────────────────────────────────────────────────────────────────────────────────────────╯</span>\n<span class=\"r13\">NotImplementedError: </span>model.v0_4.ScaleLinearKwargs with axes not implemented, please consider updating the model to v0_5.\n</code></pre>\n</body>\n</html>\n",
                                    "traceback_md": "╭─────────────────────────────── Traceback (most recent call last) ────────────────────────────────╮\n│ /usr/share/miniconda/envs/b67f0851ec76977c6bebe397fb842f1c9b3e02c3f4da6dba02caf69ff1f8a0ee/lib/p │\n│                                                                                                  │\n│    774 │   │   test_input = get_test_input_sample(model)                                         │\n│    775 │   │   expected = get_test_output_sample(model)                                          │\n│    776 │   │                                                                                     │\n│ ❱  777 │   │   with create_prediction_pipeline(                                                  │\n│    778 │   │   │   bioimageio_model=model, devices=devices, weight_format=weight_format          │\n│    779 │   │   ) as prediction_pipeline:                                                         │\n│    780 │   │   │   results = prediction_pipeline.predict_sample_without_blocking(test_input)     │\n│                                                                                                  │\n│ /usr/share/miniconda/envs/b67f0851ec76977c6bebe397fb842f1c9b3e02c3f4da6dba02caf69ff1f8a0ee/lib/p │\n│                                                                                                  │\n│   384 │   │   │   else:                                                                          │\n│   385 │   │   │   │   yield Sample(members=dict(zip(input_ids, x)), stat=common_stat, id=i)      │\n│   386 │                                                                                          │\n│ ❱ 387 │   preprocessing, postprocessing = setup_pre_and_postprocessing(                          │\n│   388 │   │   bioimageio_model,                                                                  │\n│   389 │   │   dataset(),                                                                         │\n│   390 │   │   keep_updating_initial_dataset_stats=keep_updating_initial_dataset_statistics,      │\n│                                                                                                  │\n│ /usr/share/miniconda/envs/b67f0851ec76977c6bebe397fb842f1c9b3e02c3f4da6dba02caf69ff1f8a0ee/lib/p │\n│                                                                                                  │\n│    95 │   \"\"\"                                                                                    │\n│    96 │   Get pre- and postprocessing operators for a `model` description.                       │\n│    97 │   Used in `bioimageio.core.create_prediction_pipeline\"\"\"                                 │\n│ ❱  98 │   prep, post, prep_meas, post_meas = _prepare_setup_pre_and_postprocessing(model)        │\n│    99 │                                                                                          │\n│   100 │   missing_dataset_stats = {                                                              │\n│   101 │   │   m                                                                                  │\n│                                                                                                  │\n│ /usr/share/miniconda/envs/b67f0851ec76977c6bebe397fb842f1c9b3e02c3f4da6dba02caf69ff1f8a0ee/lib/p │\n│                                                                                                  │\n│   216                                                                                            │\n│   217 def _prepare_setup_pre_and_postprocessing(model: AnyModelDescr) -> _SetupProcessing:       │\n│   218 │   if isinstance(model, v0_4.ModelDescr):                                                 │\n│ ❱ 219 │   │   pre = _prepare_procs(model.inputs)                                                 │\n│   220 │   │   post = _prepare_procs(model.outputs)                                               │\n│   221 │   elif isinstance(model, v0_5.ModelDescr):                                               │\n│   222 │   │   pre = _prepare_procs(model.inputs)                                                 │\n│                                                                                                  │\n│ /usr/share/miniconda/envs/b67f0851ec76977c6bebe397fb842f1c9b3e02c3f4da6dba02caf69ff1f8a0ee/lib/p │\n│                                                                                                  │\n│   188 │   │                                                                                      │\n│   189 │   │   if isinstance(t_descr, (v0_4.InputTensorDescr, v0_5.InputTensorDescr)):            │\n│   190 │   │   │   for proc_d in t_descr.preprocessing:                                           │\n│ ❱ 191 │   │   │   │   procs.append(get_proc(proc_d, t_descr))                                    │\n│   192 │   │   elif isinstance(t_descr, (v0_4.OutputTensorDescr, v0_5.OutputTensorDescr)):        │\n│   193 │   │   │   for proc_d in t_descr.postprocessing:                                          │\n│   194 │   │   │   │   procs.append(get_proc(proc_d, t_descr))                                    │\n│                                                                                                  │\n│ /usr/share/miniconda/envs/b67f0851ec76977c6bebe397fb842f1c9b3e02c3f4da6dba02caf69ff1f8a0ee/lib/p │\n│                                                                                                  │\n│   719 │   elif isinstance(proc_descr, v0_5.FixedZeroMeanUnitVarianceDescr):                      │\n│   720 │   │   return FixedZeroMeanUnitVariance.from_proc_descr(proc_descr, member_id)            │\n│   721 │   elif isinstance(proc_descr, (v0_4.ScaleLinearDescr, v0_5.ScaleLinearDescr)):           │\n│ ❱ 722 │   │   return ScaleLinear.from_proc_descr(proc_descr, member_id)                          │\n│   723 │   elif isinstance(                                                                       │\n│   724 │   │   proc_descr, (v0_4.ScaleMeanVarianceDescr, v0_5.ScaleMeanVarianceDescr)             │\n│   725 │   ):                                                                                     │\n│                                                                                                  │\n│ /usr/share/miniconda/envs/b67f0851ec76977c6bebe397fb842f1c9b3e02c3f4da6dba02caf69ff1f8a0ee/lib/p │\n│                                                                                                  │\n│   310 │   │   │   axis = kwargs.axis                                                             │\n│   311 │   │   elif isinstance(kwargs, v0_4.ScaleLinearKwargs):                                   │\n│   312 │   │   │   if kwargs.axes is not None:                                                    │\n│ ❱ 313 │   │   │   │   raise NotImplementedError(                                                 │\n│   314 │   │   │   │   │   \"model.v0_4.ScaleLinearKwargs with axes not implemented, please consid │\n│   315 │   │   │   │   )                                                                          │\n│   316 │   │   │   axis = None                                                                    │\n╰──────────────────────────────────────────────────────────────────────────────────────────────────╯\nNotImplementedError: model.v0_4.ScaleLinearKwargs with axes not implemented, please consider updating the model to v0_5.\n",
                                    "type": "bioimageio.core",
                                    "with_traceback": true
                                }
                            ],
                            "loc": [
                                "weights",
                                "pytorch_state_dict"
                            ],
                            "name": "Reproduce test outputs from test inputs (pytorch_state_dict)",
                            "recommended_env": {
                                "channels": [
                                    "pytorch",
                                    "conda-forge",
                                    "nodefaults"
                                ],
                                "dependencies": [
                                    "conda-forge::bioimageio.core",
                                    "mkl ==2024.0.0",
                                    "numpy <2",
                                    "pip",
                                    "pytorch==1.13.1",
                                    "setuptools <70.0.0",
                                    "torchaudio==0.13.1",
                                    "torchvision==0.14.1"
                                ],
                                "name": null
                            },
                            "saved_conda_compare": "Success. All the packages in the specification file are present in the environment with matching version and build string.\n",
                            "status": "failed",
                            "warnings": []
                        }
                    ],
                    "env": [
                        [
                            "bioimageio.core",
                            "0.9.4",
                            "",
                            ""
                        ],
                        [
                            "bioimageio.spec",
                            "0.5.5.6",
                            "",
                            ""
                        ]
                    ],
                    "format_version": "0.4.10",
                    "id": "10.5281/zenodo.7274275/8123818",
                    "metadata_completeness": 0.7375,
                    "name": "bioimageio format validation",
                    "saved_conda_list": "# packages in environment at /usr/share/miniconda/envs/b67f0851ec76977c6bebe397fb842f1c9b3e02c3f4da6dba02caf69ff1f8a0ee:\n#\n# Name                       Version          Build                    Channel\n_openmp_mutex                4.5              5_kmp_llvm               conda-forge\nannotated-types              0.7.0            pyhd8ed1ab_1             conda-forge\nanyio                        4.11.0           pyhcf101f3_0             conda-forge\naom                          3.4.0            h27087fc_1               conda-forge\nbioimageio.core              0.9.4            pyhd8ed1ab_0             conda-forge\nbioimageio.spec              0.5.5.6          pyhd8ed1ab_0             conda-forge\nblas                         2.121            mkl                      conda-forge\nblas-devel                   3.9.0            21_linux64_mkl           conda-forge\nblosc                        1.21.5           h0f2a231_0               conda-forge\nbrotli                       1.0.9            h166bdaf_9               conda-forge\nbrotli-bin                   1.0.9            h166bdaf_9               conda-forge\nbrotli-python                1.0.9            py310hd8f1fbe_9          conda-forge\nbrunsli                      0.1              h9c3ff4c_0               conda-forge\nbzip2                        1.0.8            hda65f42_8               conda-forge\nc-ares                       1.34.5           hb9d3cd8_0               conda-forge\nc-blosc2                     2.12.0           hb4ffafa_0               conda-forge\nca-certificates              2025.10.5        hbd8a1cb_0               conda-forge\ncached-property              1.5.2            hd8ed1ab_1               conda-forge\ncached_property              1.5.2            pyha770c72_1             conda-forge\ncertifi                      2025.10.5        pyhd8ed1ab_0             conda-forge\ncffi                         1.17.1           py310h8deb56e_0          conda-forge\ncfitsio                      4.1.0            hd9d235c_0               conda-forge\ncharls                       2.3.4            h9c3ff4c_0               conda-forge\ncharset-normalizer           3.4.4            pyhd8ed1ab_0             conda-forge\ncolorama                     0.4.6            pyhd8ed1ab_1             conda-forge\ndav1d                        1.0.0            h166bdaf_1               conda-forge\ndistro                       1.9.0            pyhd8ed1ab_1             conda-forge\ndnspython                    2.8.0            pyhcf101f3_0             conda-forge\nemail-validator              2.3.0            pyhd8ed1ab_0             conda-forge\nemail_validator              2.3.0            hd8ed1ab_0               conda-forge\nexceptiongroup               1.3.0            pyhd8ed1ab_0             conda-forge\nffmpeg                       5.1.0            gpl_h45a1190_101         conda-forge\nfilelock                     3.20.0           pyhd8ed1ab_0             conda-forge\nfont-ttf-dejavu-sans-mono    2.37             hab24e00_0               conda-forge\nfont-ttf-inconsolata         3.000            h77eed37_0               conda-forge\nfont-ttf-source-code-pro     2.038            h77eed37_0               conda-forge\nfont-ttf-ubuntu              0.83             h77eed37_3               conda-forge\nfontconfig                   2.15.0           h7e30c49_1               conda-forge\nfonts-conda-ecosystem        1                0                        conda-forge\nfonts-conda-forge            1                0                        conda-forge\nfreetype                     2.14.1           ha770c72_0               conda-forge\ngenericache                  0.5.2            pyhd8ed1ab_0             conda-forge\ngiflib                       5.2.2            hd590300_0               conda-forge\ngmp                          6.3.0            hac33072_2               conda-forge\ngnutls                       3.7.6            he274497_3               conda-forge\nh11                          0.16.0           pyhd8ed1ab_0             conda-forge\nh2                           4.3.0            pyhcf101f3_0             conda-forge\nh5py                         3.15.1           nompi_py310h4aa865e_100  conda-forge\nhdf5                         1.14.6           nompi_h6e4c0c1_103       conda-forge\nhpack                        4.1.0            pyhd8ed1ab_0             conda-forge\nhttpcore                     1.0.9            pyh29332c3_0             conda-forge\nhttpx                        0.28.1           pyhd8ed1ab_0             conda-forge\nhyperframe                   6.1.0            pyhd8ed1ab_0             conda-forge\nidna                         3.11             pyhd8ed1ab_0             conda-forge\nimagecodecs                  2022.7.27        py310h1281eb2_0          conda-forge\nimageio                      2.37.0           pyhfb79c49_0             conda-forge\nimportlib-metadata           8.7.0            pyhe01879c_1             conda-forge\njpeg                         9e               h0b41bf4_3               conda-forge\njxrlib                       1.1              hd590300_3               conda-forge\nkeyutils                     1.6.3            hb9d3cd8_0               conda-forge\nkrb5                         1.21.3           h659f571_0               conda-forge\nlame                         3.100            h166bdaf_1003            conda-forge\nlcms2                        2.14             h6ed2654_0               conda-forge\nld_impl_linux-64             2.44             ha97dd6f_2               conda-forge\nlerc                         3.0              h9c3ff4c_0               conda-forge\nlibaec                       1.1.4            h3f801dc_0               conda-forge\nlibavif                      0.10.1           h166bdaf_1               conda-forge\nlibblas                      3.9.0            21_linux64_mkl           conda-forge\nlibbrotlicommon              1.0.9            h166bdaf_9               conda-forge\nlibbrotlidec                 1.0.9            h166bdaf_9               conda-forge\nlibbrotlienc                 1.0.9            h166bdaf_9               conda-forge\nlibcblas                     3.9.0            21_linux64_mkl           conda-forge\nlibcurl                      8.16.0           h4e3cde8_0               conda-forge\nlibdeflate                   1.12             h166bdaf_0               conda-forge\nlibdrm                       2.4.125          hb03c661_1               conda-forge\nlibedit                      3.1.20250104     pl5321h7949ede_0         conda-forge\nlibev                        4.33             hd590300_2               conda-forge\nlibexpat                     2.7.1            hecca717_0               conda-forge\nlibffi                       3.5.2            h9ec8514_0               conda-forge\nlibfreetype                  2.14.1           ha770c72_0               conda-forge\nlibfreetype6                 2.14.1           h73754d4_0               conda-forge\nlibgcc                       15.2.0           h767d61c_7               conda-forge\nlibgcc-ng                    15.2.0           h69a702a_7               conda-forge\nlibgfortran                  15.2.0           h69a702a_7               conda-forge\nlibgfortran-ng               15.2.0           h69a702a_7               conda-forge\nlibgfortran5                 15.2.0           hcd61629_7               conda-forge\nlibhwloc                     2.12.1           default_h3d81e11_1000    conda-forge\nlibiconv                     1.18             h3b78370_2               conda-forge\nlibidn2                      2.3.8            hfac485b_1               conda-forge\nliblapack                    3.9.0            21_linux64_mkl           conda-forge\nliblapacke                   3.9.0            21_linux64_mkl           conda-forge\nliblzma                      5.8.1            hb9d3cd8_2               conda-forge\nliblzma-devel                5.8.1            hb9d3cd8_2               conda-forge\nlibnghttp2                   1.67.0           had1ee68_0               conda-forge\nlibnsl                       2.0.1            hb9d3cd8_1               conda-forge\nlibpciaccess                 0.18             hb9d3cd8_0               conda-forge\nlibpng                       1.6.50           h421ea60_1               conda-forge\nlibsqlite                    3.50.4           h0c1763c_0               conda-forge\nlibssh2                      1.11.1           hcf80075_0               conda-forge\nlibstdcxx                    15.2.0           h8f9b012_7               conda-forge\nlibstdcxx-ng                 15.2.0           h4852527_7               conda-forge\nlibtasn1                     4.20.0           hb03c661_1               conda-forge\nlibtiff                      4.4.0            hc85c160_1               conda-forge\nlibunistring                 0.9.10           h7f98852_0               conda-forge\nlibuuid                      2.41.2           he9a06e4_0               conda-forge\nlibva                        2.18.0           h0b41bf4_0               conda-forge\nlibvpx                       1.11.0           h9c3ff4c_3               conda-forge\nlibwebp-base                 1.6.0            hd42ef1d_0               conda-forge\nlibxcb                       1.13             h7f98852_1004            conda-forge\nlibxcrypt                    4.4.36           hd590300_1               conda-forge\nlibxml2                      2.13.8           h2cb61b6_1               conda-forge\nlibzlib                      1.3.1            hb9d3cd8_2               conda-forge\nlibzopfli                    1.0.3            h9c3ff4c_0               conda-forge\nllvm-openmp                  21.1.4           h4922eb0_0               conda-forge\nloguru                       0.7.3            pyh707e725_0             conda-forge\nlz4-c                        1.9.4            hcb278e6_0               conda-forge\nmarkdown                     3.9              pyhd8ed1ab_0             conda-forge\nmarkdown-it-py               4.0.0            pyhd8ed1ab_0             conda-forge\nmdurl                        0.1.2            pyhd8ed1ab_1             conda-forge\nmkl                          2024.0.0         ha957f24_49657           conda-forge\nmkl-devel                    2024.0.0         ha770c72_49657           conda-forge\nmkl-include                  2024.0.0         ha957f24_49657           conda-forge\nncurses                      6.5              h2d0b736_3               conda-forge\nnettle                       3.8.1            hc379101_1               conda-forge\nnumpy                        1.26.4           py310hb13e2d6_0          conda-forge\nopenh264                     2.3.0            h27087fc_0               conda-forge\nopenjpeg                     2.5.0            h7d73246_1               conda-forge\nopenssl                      3.5.4            h26f9b46_0               conda-forge\npackaging                    25.0             pyh29332c3_1             conda-forge\npandas                       2.3.3            py310h0158d43_1          conda-forge\npillow                       9.2.0            py310h454ad03_3          conda-forge\npip                          25.2             pyh8b19718_0             conda-forge\nplatformdirs                 4.5.0            pyhcf101f3_0             conda-forge\npthread-stubs                0.4              hb9d3cd8_1002            conda-forge\npycparser                    2.22             pyh29332c3_1             conda-forge\npydantic                     2.11.10          pyh3cfb1c2_0             conda-forge\npydantic-core                2.33.2           py310hbcd0ec0_0          conda-forge\npydantic-settings            2.11.0           pyh3cfb1c2_0             conda-forge\npygments                     2.19.2           pyhd8ed1ab_0             conda-forge\npysocks                      1.7.1            pyha55dd90_7             conda-forge\npython                       3.10.19          hd994cfb_1_cpython       conda-forge\npython-dateutil              2.9.0.post0      pyhe01879c_2             conda-forge\npython-dotenv                1.1.1            pyhe01879c_0             conda-forge\npython-tzdata                2025.2           pyhd8ed1ab_0             conda-forge\npython_abi                   3.10             8_cp310                  conda-forge\npytorch                      1.13.1           py3.10_cpu_0             pytorch\npytorch-mutex                1.0              cpu                      pytorch\npytz                         2025.2           pyhd8ed1ab_0             conda-forge\nreadline                     8.2              h8c095d6_2               conda-forge\nrequests                     2.32.5           pyhd8ed1ab_0             conda-forge\nrich                         14.2.0           pyhcf101f3_0             conda-forge\nruyaml                       0.91.0           pyhd8ed1ab_1             conda-forge\nscipy                        1.15.2           py310h1d65ade_0          conda-forge\nsetuptools                   69.5.1           pyhd8ed1ab_0             conda-forge\nsix                          1.17.0           pyhe01879c_1             conda-forge\nsnappy                       1.1.10           hdb0a2a9_1               conda-forge\nsniffio                      1.3.1            pyhd8ed1ab_1             conda-forge\nsvt-av1                      1.2.0            h27087fc_0               conda-forge\ntbb                          2021.13.0        hb60516a_3               conda-forge\ntifffile                     2022.10.10       pyhd8ed1ab_0             conda-forge\ntk                           8.6.13           noxft_hd72426e_102       conda-forge\ntorchaudio                   0.13.1           py310_cpu                pytorch\ntorchvision                  0.14.1           py310_cpu                pytorch\ntqdm                         4.67.1           pyhd8ed1ab_1             conda-forge\ntyping-extensions            4.15.0           h396c80c_0               conda-forge\ntyping-inspection            0.4.2            pyhd8ed1ab_0             conda-forge\ntyping_extensions            4.15.0           pyhcf101f3_0             conda-forge\ntzdata                       2025b            h78e105d_0               conda-forge\nurllib3                      2.5.0            pyhd8ed1ab_0             conda-forge\nwheel                        0.45.1           pyhd8ed1ab_1             conda-forge\nx264                         1!164.3095       h166bdaf_2               conda-forge\nx265                         3.5              h924138e_3               conda-forge\nxarray                       2025.1.2         pyhd8ed1ab_0             conda-forge\nxorg-fixesproto              5.0              hb9d3cd8_1003            conda-forge\nxorg-kbproto                 1.0.7            hb9d3cd8_1003            conda-forge\nxorg-libx11                  1.8.4            h0b41bf4_0               conda-forge\nxorg-libxau                  1.0.12           hb9d3cd8_0               conda-forge\nxorg-libxdmcp                1.1.5            hb9d3cd8_0               conda-forge\nxorg-libxext                 1.3.4            h0b41bf4_2               conda-forge\nxorg-libxfixes               5.0.3            h7f98852_1004            conda-forge\nxorg-xextproto               7.3.0            hb9d3cd8_1004            conda-forge\nxorg-xproto                  7.0.31           hb9d3cd8_1008            conda-forge\nxz                           5.8.1            hbcc6ac9_2               conda-forge\nxz-gpl-tools                 5.8.1            hbcc6ac9_2               conda-forge\nxz-tools                     5.8.1            hb9d3cd8_2               conda-forge\nzfp                          0.5.5            h9c3ff4c_8               conda-forge\nzipp                         3.23.0           pyhd8ed1ab_0             conda-forge\nzlib-ng                      2.0.7            h0b41bf4_0               conda-forge\nzstandard                    0.25.0           py310h139afa4_0          conda-forge\nzstd                         1.5.7            hb8e6e7a_2               conda-forge\n",
                    "source_name": "https://hypha.aicell.io/bioimage-io/artifacts/joyful-deer/files/rdf.yaml?version=v0",
                    "status": "failed",
                    "type": "model"
                },
                "error": "model.v0_4.ScaleLinearKwargs with axes not implemented, please consider updating the model to v0_5.\n\nmodel.v0_4.ScaleLinearKwargs with axes not implemented, please consider updating the model to v0_5.",
                "links": [],
                "score": 0.0,
                "status": "failed"
            }
        },
        "careamics": {
            "0.0.16": {
                "badge": null,
                "details": [
                    "CAREamics compatibility check does not support `bioimageio.spec.v0.4` model desciptions."
                ],
                "error": null,
                "links": [],
                "score": 0.0,
                "status": "not-applicable"
            },
            "0.0.17": {
                "badge": null,
                "details": [
                    "CAREamics compatibility check does not support `bioimageio.spec.v0.4` model desciptions."
                ],
                "error": null,
                "links": [],
                "score": 0.0,
                "status": "not-applicable"
            }
        }
    }
}