{
    "rdf_content": {
        "attachments": {
            "files": [
                "hpa_labels.txt"
            ]
        },
        "authors": [
            {
                "name": "Shubin Dai"
            }
        ],
        "cite": [
            {
                "doi": "10.1038/s41592-019-0658-6",
                "text": "Ouyang, W., Winsnes, C.F., Hjelmare, M. et al. Analysis of the Human Protein Atlas Image Classification competition. Nat Methods 16, 1254‚Äì1261 (2019)."
            }
        ],
        "config": {
            "bioimageio": {
                "nickname": "straightforward-crocodile",
                "nickname_icon": "üêä",
                "test_kwargs": {
                    "onnx": {
                        "decimal": 2
                    },
                    "torchscript": {
                        "decimal": 2
                    }
                },
                "thumbnails": {
                    "diagram-of-InceptionV3.png": "diagram-of-InceptionV3.thumbnail.png"
                }
            }
        },
        "covers": [
            "diagram-of-InceptionV3.png"
        ],
        "description": "The winning model of HPA image classification 2021 by Bestfitting",
        "documentation": "README.md",
        "format_version": "0.4.10",
        "id": "10.5281/zenodo.5910854/6539073",
        "id_emoji": "üêä",
        "inputs": [
            {
                "axes": "bcyx",
                "data_range": [
                    null,
                    null
                ],
                "data_type": "float32",
                "description": "HPA image (4 channels [\"red\", \"green\", \"blue\", \"yellow\"])",
                "name": "image",
                "preprocessing": [
                    {
                        "kwargs": {
                            "axes": "xy",
                            "gain": [
                                0.003921568627,
                                0.003921568627,
                                0.003921568627,
                                0.003921568627
                            ],
                            "offset": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                            ]
                        },
                        "name": "scale_linear"
                    }
                ],
                "shape": [
                    1,
                    4,
                    128,
                    128
                ]
            }
        ],
        "license": "MIT",
        "links": [
            "imjoy/BioImageIO-Packager",
            "hpa/hpa-kaggle-2021-dataset"
        ],
        "maintainers": [
            {
                "github_user": "oeway",
                "name": "Wei Ouyang"
            }
        ],
        "name": "HPA Bestfitting InceptionV3",
        "outputs": [
            {
                "axes": "bc",
                "data_range": [
                    0.0,
                    null
                ],
                "data_type": "float32",
                "description": "protein localization pattern classes",
                "name": "classes",
                "shape": [
                    1,
                    19
                ]
            },
            {
                "axes": "bc",
                "data_range": [
                    null,
                    null
                ],
                "data_type": "float32",
                "description": "features of last fully connected layer",
                "name": "features",
                "shape": [
                    1,
                    2048
                ]
            }
        ],
        "sample_inputs": [
            "sample_image.tif"
        ],
        "tags": [
            "classification",
            "inception-v3",
            "hpa",
            "onnx",
            "cells",
            "protein-localization"
        ],
        "test_inputs": [
            "test_input.npy"
        ],
        "test_outputs": [
            "test_output_classes.npy",
            "test_output_features.npy"
        ],
        "timestamp": "2022-05-11T12:52:23.766143",
        "type": "model",
        "uploader": {
            "email": "bioimageiobot@gmail.com"
        },
        "version": 1,
        "version_number": 1,
        "weights": {
            "onnx": {
                "authors": [
                    {
                        "name": "Wei OUYANG"
                    }
                ],
                "opset_version": 15,
                "sha256": "cce5fccae3434f5bf6310d8671a4f8720a4db2c9769adb407b5c2a2bdd292fc7",
                "source": "bestfitting-inceptionv3-single-cell.onnx"
            },
            "torchscript": {
                "authors": [
                    {
                        "name": "Wei OUYANG"
                    }
                ],
                "sha256": "3eb4d8ca9907223c6f79c73cec32cd8a9db0ba642da4967d9b110a0a16e2680e",
                "source": "bestfitting-inceptionv3-single-cell.pt"
            }
        }
    },
    "rdf_yaml_sha256": "616e9e91e645c5c0b137cc011c17b2170420f28a9be0f170291a8cd84bd70fce",
    "scores": {
        "core_compatibility": 0.0,
        "metadata_completeness": 0.0,
        "metadata_format": 0.0,
        "overall_compatibility": 0.0,
        "overall_partner_tool_compatibility": 0.0,
        "tool_compatibility": {},
        "tool_compatibility_version_specific": {}
    },
    "status": "failed",
    "tests": {
        "biapy": {
            "3.6.5": {
                "badge": null,
                "details": "[all] pytorch_state_dict not found in model RDF or inputs != 1\n",
                "error": "[all] pytorch_state_dict not found in model RDF or inputs != 1\n",
                "links": [
                    "biapy/biapy"
                ],
                "score": 0.0,
                "status": "failed"
            }
        },
        "bioimageio.core": {
            "0.9.3": {
                "badge": null,
                "details": {
                    "details": [
                        {
                            "context": null,
                            "errors": [
                                {
                                    "loc": [],
                                    "msg": "test command 'conda run -n 95227f474ca45b024cf315edb4101e4919199d0a79ef5ff1eb474dc8ce1ec4d8 bioimageio test https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/rdf.yaml?version=v0 --summary-path=/tmp/tmprcq2mgqf/onnx/summary.json --determinism=full --stop-early' did not produce a summary file at /tmp/tmprcq2mgqf/onnx/summary.json",
                                    "traceback_html": "",
                                    "traceback_md": "",
                                    "type": "bioimageio cli",
                                    "with_traceback": false
                                }
                            ],
                            "loc": [],
                            "name": "run 'bioimageio test'",
                            "recommended_env": null,
                            "saved_conda_compare": null,
                            "status": "failed",
                            "warnings": []
                        },
                        {
                            "context": null,
                            "errors": [
                                {
                                    "loc": [],
                                    "msg": "test command 'conda run -n 6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8 bioimageio test https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/rdf.yaml?version=v0 --summary-path=/tmp/tmprcq2mgqf/torchscript/summary.json --determinism=full --stop-early' did not produce a summary file at /tmp/tmprcq2mgqf/torchscript/summary.json",
                                    "traceback_html": "",
                                    "traceback_md": "",
                                    "type": "bioimageio cli",
                                    "with_traceback": false
                                }
                            ],
                            "loc": [],
                            "name": "run 'bioimageio test'",
                            "recommended_env": null,
                            "saved_conda_compare": null,
                            "status": "failed",
                            "warnings": []
                        }
                    ],
                    "env": [],
                    "format_version": "unknown",
                    "id": null,
                    "metadata_completeness": 0.0,
                    "name": "calling bioimageio test command",
                    "saved_conda_list": "# packages in environment at /usr/share/miniconda/envs/core:\n#\n# Name                     Version          Build                    Channel\n_libgcc_mutex              0.1              conda_forge              conda-forge\n_openmp_mutex              4.5              2_gnu                    conda-forge\nannotated-types            0.7.0            pyhd8ed1ab_1             conda-forge\nanyio                      4.11.0           pyhcf101f3_0             conda-forge\naom                        3.9.1            hac33072_0               conda-forge\nbackoffice                 0.1.0            pypi_0                   pypi\nbioimageio.core            0.9.3            pyhd8ed1ab_0             conda-forge\nbioimageio.spec            0.5.5.5          pyhd8ed1ab_0             conda-forge\nblosc                      1.21.6           he440d0b_1               conda-forge\nbrunsli                    0.1              he3183e4_1               conda-forge\nbzip2                      1.0.8            hda65f42_8               conda-forge\nc-ares                     1.34.5           hb9d3cd8_0               conda-forge\nc-blosc2                   2.21.3           h4cfbee9_0               conda-forge\nca-certificates            2025.10.5        hbd8a1cb_0               conda-forge\ncached-property            1.5.2            hd8ed1ab_1               conda-forge\ncached_property            1.5.2            pyha770c72_1             conda-forge\ncertifi                    2025.10.5        pyhd8ed1ab_0             conda-forge\ncffi                       2.0.0            pypi_0                   pypi\ncharls                     2.4.2            h59595ed_0               conda-forge\ncharset-normalizer         3.4.3            pypi_0                   pypi\ncolorama                   0.4.6            pyhd8ed1ab_1             conda-forge\ncryptography               46.0.2           pypi_0                   pypi\ndav1d                      1.2.1            hd590300_0               conda-forge\ndistro                     1.9.0            pyhd8ed1ab_1             conda-forge\ndnspython                  2.8.0            pyhcf101f3_0             conda-forge\nemail-validator            2.3.0            pyhd8ed1ab_0             conda-forge\nemail_validator            2.3.0            hd8ed1ab_0               conda-forge\nexceptiongroup             1.3.0            pyhd8ed1ab_0             conda-forge\nfilelock                   3.20.0           pyhd8ed1ab_0             conda-forge\ngenericache                0.5.2            pyhd8ed1ab_0             conda-forge\ngiflib                     5.2.2            hd590300_0               conda-forge\nh11                        0.16.0           pyhd8ed1ab_0             conda-forge\nh2                         4.3.0            pyhcf101f3_0             conda-forge\nh5py                       3.14.0           nompi_py313h253c126_101  conda-forge\nhdf5                       1.14.6           nompi_h6e4c0c1_103       conda-forge\nhpack                      4.1.0            pyhd8ed1ab_0             conda-forge\nhttpcore                   1.0.9            pyh29332c3_0             conda-forge\nhttpx                      0.28.1           pyhd8ed1ab_0             conda-forge\nhyperframe                 6.1.0            pyhd8ed1ab_0             conda-forge\nidna                       3.10             pyhd8ed1ab_1             conda-forge\nimagecodecs                2025.8.2         py313h718aa22_4          conda-forge\nimageio                    2.37.0           pyhfb79c49_0             conda-forge\nimportlib-metadata         8.7.0            pyhe01879c_1             conda-forge\njxrlib                     1.1              hd590300_3               conda-forge\nkeyutils                   1.6.3            hb9d3cd8_0               conda-forge\nkrb5                       1.21.3           h659f571_0               conda-forge\nlcms2                      2.17             h717163a_0               conda-forge\nld_impl_linux-64           2.44             ha97dd6f_2               conda-forge\nlerc                       4.0.0            h0aef613_1               conda-forge\nlibaec                     1.1.4            h3f801dc_0               conda-forge\nlibavif16                  1.3.0            h6395336_2               conda-forge\nlibblas                    3.9.0            36_h4a7cf45_openblas     conda-forge\nlibbrotlicommon            1.1.0            hb03c661_4               conda-forge\nlibbrotlidec               1.1.0            hb03c661_4               conda-forge\nlibbrotlienc               1.1.0            hb03c661_4               conda-forge\nlibcblas                   3.9.0            36_h0358290_openblas     conda-forge\nlibcurl                    8.14.1           h332b0f4_0               conda-forge\nlibdeflate                 1.24             h86f0d12_0               conda-forge\nlibedit                    3.1.20250104     pl5321h7949ede_0         conda-forge\nlibev                      4.33             hd590300_2               conda-forge\nlibexpat                   2.7.1            hecca717_0               conda-forge\nlibffi                     3.4.6            h2dba641_1               conda-forge\nlibfreetype                2.14.1           ha770c72_0               conda-forge\nlibfreetype6               2.14.1           h73754d4_0               conda-forge\nlibgcc                     15.2.0           h767d61c_7               conda-forge\nlibgcc-ng                  15.2.0           h69a702a_7               conda-forge\nlibgfortran                15.2.0           h69a702a_7               conda-forge\nlibgfortran5               15.2.0           hcd61629_7               conda-forge\nlibgomp                    15.2.0           h767d61c_7               conda-forge\nlibhwy                     1.3.0            h4c17acf_1               conda-forge\nlibjpeg-turbo              3.1.0            hb9d3cd8_0               conda-forge\nlibjxl                     0.11.1           h6cb5226_4               conda-forge\nliblapack                  3.9.0            36_h47877c9_openblas     conda-forge\nliblzma                    5.8.1            hb9d3cd8_2               conda-forge\nlibmpdec                   4.0.0            hb9d3cd8_0               conda-forge\nlibnghttp2                 1.67.0           had1ee68_0               conda-forge\nlibopenblas                0.3.30           pthreads_h94d23a6_2      conda-forge\nlibpng                     1.6.50           h421ea60_1               conda-forge\nlibsqlite                  3.50.4           h0c1763c_0               conda-forge\nlibssh2                    1.11.1           hcf80075_0               conda-forge\nlibstdcxx                  15.2.0           h8f9b012_7               conda-forge\nlibstdcxx-ng               15.2.0           h4852527_7               conda-forge\nlibtiff                    4.7.1            h8261f1e_0               conda-forge\nlibuuid                    2.41.2           he9a06e4_0               conda-forge\nlibwebp-base               1.6.0            hd42ef1d_0               conda-forge\nlibxcb                     1.17.0           h8a09558_0               conda-forge\nlibzlib                    1.3.1            hb9d3cd8_2               conda-forge\nlibzopfli                  1.0.3            h9c3ff4c_0               conda-forge\nloguru                     0.7.3            pyh707e725_0             conda-forge\nlz4-c                      1.10.0           h5888daf_1               conda-forge\nmarkdown                   3.9              pyhd8ed1ab_0             conda-forge\nmarkdown-it-py             4.0.0            pyhd8ed1ab_0             conda-forge\nmdurl                      0.1.2            pyhd8ed1ab_1             conda-forge\nncurses                    6.5              h2d0b736_3               conda-forge\nnumpy                      2.3.3            py313hf6604e3_0          conda-forge\nopenjpeg                   2.5.4            h55fea9a_0               conda-forge\nopenssl                    3.5.4            h26f9b46_0               conda-forge\npackaging                  25.0             pyh29332c3_1             conda-forge\npandas                     2.3.3            py313h08cd8bf_1          conda-forge\npillow                     11.3.0           py313ha492abd_3          conda-forge\npip                        25.2             pyh145f28c_0             conda-forge\nplatformdirs               4.5.0            pyhcf101f3_0             conda-forge\npthread-stubs              0.4              hb9d3cd8_1002            conda-forge\npycparser                  2.23             pypi_0                   pypi\npydantic                   2.11.10          pyh3cfb1c2_0             conda-forge\npydantic-core              2.33.2           py313h4b2b08d_0          conda-forge\npydantic-settings          2.11.0           pyh3cfb1c2_0             conda-forge\npygithub                   2.8.1            pypi_0                   pypi\npygments                   2.19.2           pyhd8ed1ab_0             conda-forge\npyjwt                      2.10.1           pypi_0                   pypi\npynacl                     1.6.0            pypi_0                   pypi\npython                     3.13.7           h2b335a9_100_cp313       conda-forge\npython-dateutil            2.9.0.post0      pyhe01879c_2             conda-forge\npython-dotenv              1.1.1            pyhe01879c_0             conda-forge\npython-tzdata              2025.2           pyhd8ed1ab_0             conda-forge\npython_abi                 3.13             8_cp313                  conda-forge\npytz                       2025.2           pyhd8ed1ab_0             conda-forge\nrav1e                      0.7.1            h8fae777_3               conda-forge\nreadline                   8.2              h8c095d6_2               conda-forge\nrequests                   2.32.5           pypi_0                   pypi\nrich                       14.1.0           pyhe01879c_0             conda-forge\nruyaml                     0.91.0           pyhd8ed1ab_1             conda-forge\nscipy                      1.16.2           py313h11c21cd_0          conda-forge\nsetuptools                 80.9.0           pyhff2d567_0             conda-forge\nsix                        1.17.0           pyhe01879c_1             conda-forge\nsnappy                     1.2.2            h03e3b7b_0               conda-forge\nsniffio                    1.3.1            pyhd8ed1ab_1             conda-forge\nsvt-av1                    3.1.2            hecca717_0               conda-forge\ntifffile                   2025.10.4        pyhd8ed1ab_0             conda-forge\ntk                         8.6.13           noxft_hd72426e_102       conda-forge\ntqdm                       4.67.1           pyhd8ed1ab_1             conda-forge\ntyping-extensions          4.15.0           h396c80c_0               conda-forge\ntyping-inspection          0.4.2            pyhd8ed1ab_0             conda-forge\ntyping_extensions          4.15.0           pyhcf101f3_0             conda-forge\ntzdata                     2025b            h78e105d_0               conda-forge\nurllib3                    2.5.0            pypi_0                   pypi\nxarray                     2025.1.2         pyhd8ed1ab_0             conda-forge\nxorg-libxau                1.0.12           hb9d3cd8_0               conda-forge\nxorg-libxdmcp              1.1.5            hb9d3cd8_0               conda-forge\nzfp                        1.0.1            h909a3a2_3               conda-forge\nzipp                       3.23.0           pyhd8ed1ab_0             conda-forge\nzlib-ng                    2.2.5            hde8ca8f_0               conda-forge\nzstd                       1.5.7            hb8e6e7a_2               conda-forge\n",
                    "source_name": "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/rdf.yaml?version=v0",
                    "status": "failed",
                    "type": "unknown"
                },
                "error": "test command 'conda run -n 95227f474ca45b024cf315edb4101e4919199d0a79ef5ff1eb474dc8ce1ec4d8 bioimageio test https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/rdf.yaml?version=v0 --summary-path=/tmp/tmprcq2mgqf/onnx/summary.json --determinism=full --stop-early' did not produce a summary file at /tmp/tmprcq2mgqf/onnx/summary.json\n\ntest command 'conda run -n 6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8 bioimageio test https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/rdf.yaml?version=v0 --summary-path=/tmp/tmprcq2mgqf/torchscript/summary.json --determinism=full --stop-early' did not produce a summary file at /tmp/tmprcq2mgqf/torchscript/summary.json",
                "links": [],
                "score": 0.0,
                "status": "failed"
            },
            "0.9.4": {
                "badge": null,
                "details": {
                    "details": [
                        {
                            "context": {
                                "file_name": "rdf.yaml",
                                "known_files": {
                                    "bestfitting-inceptionv3-single-cell.onnx": "cce5fccae3434f5bf6310d8671a4f8720a4db2c9769adb407b5c2a2bdd292fc7",
                                    "bestfitting-inceptionv3-single-cell.pt": "3eb4d8ca9907223c6f79c73cec32cd8a9db0ba642da4967d9b110a0a16e2680e",
                                    "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/README.md?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/bestfitting-inceptionv3-single-cell.onnx?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/bestfitting-inceptionv3-single-cell.pt?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/diagram-of-InceptionV3.png?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/hpa_labels.txt?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/sample_image.tif?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/test_input.npy?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/test_output_classes.npy?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/test_output_features.npy?version=v0": null
                                },
                                "original_source_name": null,
                                "perform_io_checks": true,
                                "root": "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files?version=v0",
                                "update_hashes": false
                            },
                            "errors": [],
                            "loc": [],
                            "name": "Successfully created `ModelDescr` instance.",
                            "recommended_env": null,
                            "saved_conda_compare": null,
                            "status": "passed",
                            "warnings": []
                        },
                        {
                            "context": {
                                "file_name": "rdf.yaml",
                                "known_files": {
                                    "bestfitting-inceptionv3-single-cell.onnx": "cce5fccae3434f5bf6310d8671a4f8720a4db2c9769adb407b5c2a2bdd292fc7",
                                    "bestfitting-inceptionv3-single-cell.pt": "3eb4d8ca9907223c6f79c73cec32cd8a9db0ba642da4967d9b110a0a16e2680e",
                                    "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/README.md?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/bestfitting-inceptionv3-single-cell.onnx?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/bestfitting-inceptionv3-single-cell.pt?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/diagram-of-InceptionV3.png?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/hpa_labels.txt?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/sample_image.tif?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/test_input.npy?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/test_output_classes.npy?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/test_output_features.npy?version=v0": null
                                },
                                "original_source_name": null,
                                "perform_io_checks": true,
                                "root": "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files?version=v0",
                                "update_hashes": false
                            },
                            "errors": [],
                            "loc": [],
                            "name": "bioimageio.spec format validation model 0.4.10",
                            "recommended_env": null,
                            "saved_conda_compare": null,
                            "status": "passed",
                            "warnings": [
                                {
                                    "loc": [
                                        "weights",
                                        "torchscript",
                                        "pytorch_version"
                                    ],
                                    "msg": "missing. Please specify the PyTorch version these Torchscript weights were created with.",
                                    "severity": 35,
                                    "type": "warning"
                                }
                            ]
                        },
                        {
                            "context": null,
                            "errors": [
                                {
                                    "loc": [
                                        "weights",
                                        "onnx"
                                    ],
                                    "msg": "model.v0_4.ScaleLinearKwargs with axes not implemented, please consider updating the model to v0_5.",
                                    "traceback_html": "<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<style>\n.r1 {color: #800000; text-decoration-color: #800000}\n.r2 {color: #800000; text-decoration-color: #800000; font-weight: bold}\n.r3 {color: #bf7f7f; text-decoration-color: #bf7f7f; font-weight: bold}\n.r4 {color: #7f7f7f; text-decoration-color: #7f7f7f}\n.r5 {color: #0000ff; text-decoration-color: #0000ff}\n.r6 {color: #00ffff; text-decoration-color: #00ffff}\n.r7 {font-weight: bold; text-decoration: underline}\n.r8 {color: #bfbfbf; text-decoration-color: #bfbfbf}\n.r9 {color: #808000; text-decoration-color: #808000}\n.r10 {color: #bfbf7f; text-decoration-color: #bfbf7f}\n.r11 {color: #808080; text-decoration-color: #808080}\n.r12 {color: #00ff00; text-decoration-color: #00ff00}\n.r13 {color: #ff00ff; text-decoration-color: #ff00ff}\n.r14 {color: #0000ff; text-decoration-color: #0000ff; font-weight: bold; text-decoration: underline}\n.r15 {color: #00ffff; text-decoration-color: #00ffff; font-weight: bold; text-decoration: underline}\n.r16 {color: #808000; text-decoration-color: #808000; font-weight: bold; text-decoration: underline}\n.r17 {color: #ff0000; text-decoration-color: #ff0000; font-weight: bold}\nbody {\n    color: #000000;\n    background-color: #ffffff;\n}\n</style>\n</head>\n<body>\n    <pre style=\"font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><code style=\"font-family:inherit\"><span class=\"r1\">‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ </span><span class=\"r2\">Traceback </span><span class=\"r3\">(most recent call last)</span><span class=\"r1\"> ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/95227f474ca45b024cf315edb4101e4919199d0a79ef5ff1eb474dc8ce1ec4d8/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 774 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>test_input = get_test_input_sample(model)                                         <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 775 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>expected = get_test_output_sample(model)                                          <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 776 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span> 777 <span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">with</span> create_prediction_pipeline(                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 778 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span>bioimageio_model=model, devices=devices, weight_format=weight_format          <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 779 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>) <span class=\"r5\">as</span> prediction_pipeline:                                                         <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 780 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span>results = prediction_pipeline.predict_sample_without_blocking(test_input)     <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/95227f474ca45b024cf315edb4101e4919199d0a79ef5ff1eb474dc8ce1ec4d8/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">384 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">else</span>:                                                                          <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">385 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">yield</span> Sample(members=<span class=\"r6\">dict</span>(<span class=\"r6\">zip</span>(input_ids, x)), stat=common_stat, <span class=\"r6\">id</span>=i)      <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">386 </span><span class=\"r4\">‚îÇ   </span>                                                                                       <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span>387 <span class=\"r4\">‚îÇ   </span>preprocessing, postprocessing = <span class=\"r7\">setup_pre_and_postprocessing(</span>                          <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">388 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r7\">bioimageio_model,</span>                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">389 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r7\">dataset(),</span>                                                                         <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">390 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r7\">keep_updating_initial_dataset_stats=keep_updating_initial_dataset_statistics,</span>      <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/95227f474ca45b024cf315edb4101e4919199d0a79ef5ff1eb474dc8ce1ec4d8/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 95 </span><span class=\"r8\">‚îÇ   </span><span class=\"r9\">&quot;&quot;&quot;</span>                                                                                    <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 96 </span><span class=\"r10\">‚îÇ   </span><span class=\"r9\">Get pre- and postprocessing operators for a `model` description.</span>                       <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 97 </span><span class=\"r10\">‚îÇ   </span><span class=\"r9\">Used in `bioimageio.core.create_prediction_pipeline&quot;&quot;&quot;</span>                                 <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span> 98 <span class=\"r4\">‚îÇ   </span>prep, post, prep_meas, post_meas = <span class=\"r7\">_prepare_setup_pre_and_postprocessing(model)</span>        <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 99 </span><span class=\"r4\">‚îÇ   </span>                                                                                       <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">100 </span><span class=\"r4\">‚îÇ   </span>missing_dataset_stats = {                                                              <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">101 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>m                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/95227f474ca45b024cf315edb4101e4919199d0a79ef5ff1eb474dc8ce1ec4d8/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">216 </span>                                                                                           <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">217 </span><span class=\"r5\">def</span><span class=\"r11\"> </span><span class=\"r12\">_prepare_setup_pre_and_postprocessing</span>(model: AnyModelDescr) -&gt; _SetupProcessing:       <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">218 </span><span class=\"r4\">‚îÇ   </span><span class=\"r5\">if</span> <span class=\"r6\">isinstance</span>(model, v0_4.ModelDescr):                                                 <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span>219 <span class=\"r4\">‚îÇ   ‚îÇ   </span>pre = <span class=\"r7\">_prepare_procs(model.inputs)</span>                                                 <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">220 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>post = _prepare_procs(model.outputs)                                               <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">221 </span><span class=\"r4\">‚îÇ   </span><span class=\"r5\">elif</span> <span class=\"r6\">isinstance</span>(model, v0_5.ModelDescr):                                               <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">222 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>pre = _prepare_procs(model.inputs)                                                 <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/95227f474ca45b024cf315edb4101e4919199d0a79ef5ff1eb474dc8ce1ec4d8/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">188 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>                                                                                   <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">189 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">if</span> <span class=\"r6\">isinstance</span>(t_descr, (v0_4.InputTensorDescr, v0_5.InputTensorDescr)):            <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">190 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">for</span> proc_d <span class=\"r13\">in</span> t_descr.preprocessing:                                           <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span>191 <span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span>procs.append(<span class=\"r7\">get_proc(proc_d, t_descr)</span>)                                    <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">192 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">elif</span> <span class=\"r6\">isinstance</span>(t_descr, (v0_4.OutputTensorDescr, v0_5.OutputTensorDescr)):        <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">193 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">for</span> proc_d <span class=\"r13\">in</span> t_descr.postprocessing:                                          <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">194 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span>procs.append(get_proc(proc_d, t_descr))                                    <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/95227f474ca45b024cf315edb4101e4919199d0a79ef5ff1eb474dc8ce1ec4d8/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">719 </span><span class=\"r4\">‚îÇ   </span><span class=\"r5\">elif</span> <span class=\"r6\">isinstance</span>(proc_descr, v0_5.FixedZeroMeanUnitVarianceDescr):                      <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">720 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">return</span> FixedZeroMeanUnitVariance.from_proc_descr(proc_descr, member_id)            <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">721 </span><span class=\"r4\">‚îÇ   </span><span class=\"r5\">elif</span> <span class=\"r6\">isinstance</span>(proc_descr, (v0_4.ScaleLinearDescr, v0_5.ScaleLinearDescr)):           <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span>722 <span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">return</span> <span class=\"r7\">ScaleLinear.from_proc_descr(proc_descr, member_id)</span>                          <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">723 </span><span class=\"r4\">‚îÇ   </span><span class=\"r5\">elif</span> <span class=\"r6\">isinstance</span>(                                                                       <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">724 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>proc_descr, (v0_4.ScaleMeanVarianceDescr, v0_5.ScaleMeanVarianceDescr)             <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">725 </span><span class=\"r4\">‚îÇ   </span>):                                                                                     <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/95227f474ca45b024cf315edb4101e4919199d0a79ef5ff1eb474dc8ce1ec4d8/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">310 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span>axis = kwargs.axis                                                             <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">311 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">elif</span> <span class=\"r6\">isinstance</span>(kwargs, v0_4.ScaleLinearKwargs):                                   <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">312 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">if</span> kwargs.axes <span class=\"r13\">is</span> <span class=\"r13\">not</span> <span class=\"r5\">None</span>:                                                    <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span>313 <span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r14\">raise</span><span class=\"r7\"> </span><span class=\"r15\">NotImplementedError</span><span class=\"r7\">(</span>                                                 <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">314 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r16\">&quot;model.v0_4.ScaleLinearKwargs with axes not implemented, please consid</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">315 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r7\">)</span>                                                                          <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">316 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span>axis = <span class=\"r5\">None</span>                                                                    <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ</span>\n<span class=\"r17\">NotImplementedError: </span>model.v0_4.ScaleLinearKwargs with axes not implemented, please consider updating the model to v0_5.\n</code></pre>\n</body>\n</html>\n",
                                    "traceback_md": "‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Traceback (most recent call last) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ /usr/share/miniconda/envs/95227f474ca45b024cf315edb4101e4919199d0a79ef5ff1eb474dc8ce1ec4d8/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ    774 ‚îÇ   ‚îÇ   test_input = get_test_input_sample(model)                                         ‚îÇ\n‚îÇ    775 ‚îÇ   ‚îÇ   expected = get_test_output_sample(model)                                          ‚îÇ\n‚îÇ    776 ‚îÇ   ‚îÇ                                                                                     ‚îÇ\n‚îÇ ‚ù±  777 ‚îÇ   ‚îÇ   with create_prediction_pipeline(                                                  ‚îÇ\n‚îÇ    778 ‚îÇ   ‚îÇ   ‚îÇ   bioimageio_model=model, devices=devices, weight_format=weight_format          ‚îÇ\n‚îÇ    779 ‚îÇ   ‚îÇ   ) as prediction_pipeline:                                                         ‚îÇ\n‚îÇ    780 ‚îÇ   ‚îÇ   ‚îÇ   results = prediction_pipeline.predict_sample_without_blocking(test_input)     ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ /usr/share/miniconda/envs/95227f474ca45b024cf315edb4101e4919199d0a79ef5ff1eb474dc8ce1ec4d8/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ   384 ‚îÇ   ‚îÇ   ‚îÇ   else:                                                                          ‚îÇ\n‚îÇ   385 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   yield Sample(members=dict(zip(input_ids, x)), stat=common_stat, id=i)      ‚îÇ\n‚îÇ   386 ‚îÇ                                                                                          ‚îÇ\n‚îÇ ‚ù± 387 ‚îÇ   preprocessing, postprocessing = setup_pre_and_postprocessing(                          ‚îÇ\n‚îÇ   388 ‚îÇ   ‚îÇ   bioimageio_model,                                                                  ‚îÇ\n‚îÇ   389 ‚îÇ   ‚îÇ   dataset(),                                                                         ‚îÇ\n‚îÇ   390 ‚îÇ   ‚îÇ   keep_updating_initial_dataset_stats=keep_updating_initial_dataset_statistics,      ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ /usr/share/miniconda/envs/95227f474ca45b024cf315edb4101e4919199d0a79ef5ff1eb474dc8ce1ec4d8/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ    95 ‚îÇ   \"\"\"                                                                                    ‚îÇ\n‚îÇ    96 ‚îÇ   Get pre- and postprocessing operators for a `model` description.                       ‚îÇ\n‚îÇ    97 ‚îÇ   Used in `bioimageio.core.create_prediction_pipeline\"\"\"                                 ‚îÇ\n‚îÇ ‚ù±  98 ‚îÇ   prep, post, prep_meas, post_meas = _prepare_setup_pre_and_postprocessing(model)        ‚îÇ\n‚îÇ    99 ‚îÇ                                                                                          ‚îÇ\n‚îÇ   100 ‚îÇ   missing_dataset_stats = {                                                              ‚îÇ\n‚îÇ   101 ‚îÇ   ‚îÇ   m                                                                                  ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ /usr/share/miniconda/envs/95227f474ca45b024cf315edb4101e4919199d0a79ef5ff1eb474dc8ce1ec4d8/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ   216                                                                                            ‚îÇ\n‚îÇ   217 def _prepare_setup_pre_and_postprocessing(model: AnyModelDescr) -> _SetupProcessing:       ‚îÇ\n‚îÇ   218 ‚îÇ   if isinstance(model, v0_4.ModelDescr):                                                 ‚îÇ\n‚îÇ ‚ù± 219 ‚îÇ   ‚îÇ   pre = _prepare_procs(model.inputs)                                                 ‚îÇ\n‚îÇ   220 ‚îÇ   ‚îÇ   post = _prepare_procs(model.outputs)                                               ‚îÇ\n‚îÇ   221 ‚îÇ   elif isinstance(model, v0_5.ModelDescr):                                               ‚îÇ\n‚îÇ   222 ‚îÇ   ‚îÇ   pre = _prepare_procs(model.inputs)                                                 ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ /usr/share/miniconda/envs/95227f474ca45b024cf315edb4101e4919199d0a79ef5ff1eb474dc8ce1ec4d8/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ   188 ‚îÇ   ‚îÇ                                                                                      ‚îÇ\n‚îÇ   189 ‚îÇ   ‚îÇ   if isinstance(t_descr, (v0_4.InputTensorDescr, v0_5.InputTensorDescr)):            ‚îÇ\n‚îÇ   190 ‚îÇ   ‚îÇ   ‚îÇ   for proc_d in t_descr.preprocessing:                                           ‚îÇ\n‚îÇ ‚ù± 191 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   procs.append(get_proc(proc_d, t_descr))                                    ‚îÇ\n‚îÇ   192 ‚îÇ   ‚îÇ   elif isinstance(t_descr, (v0_4.OutputTensorDescr, v0_5.OutputTensorDescr)):        ‚îÇ\n‚îÇ   193 ‚îÇ   ‚îÇ   ‚îÇ   for proc_d in t_descr.postprocessing:                                          ‚îÇ\n‚îÇ   194 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   procs.append(get_proc(proc_d, t_descr))                                    ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ /usr/share/miniconda/envs/95227f474ca45b024cf315edb4101e4919199d0a79ef5ff1eb474dc8ce1ec4d8/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ   719 ‚îÇ   elif isinstance(proc_descr, v0_5.FixedZeroMeanUnitVarianceDescr):                      ‚îÇ\n‚îÇ   720 ‚îÇ   ‚îÇ   return FixedZeroMeanUnitVariance.from_proc_descr(proc_descr, member_id)            ‚îÇ\n‚îÇ   721 ‚îÇ   elif isinstance(proc_descr, (v0_4.ScaleLinearDescr, v0_5.ScaleLinearDescr)):           ‚îÇ\n‚îÇ ‚ù± 722 ‚îÇ   ‚îÇ   return ScaleLinear.from_proc_descr(proc_descr, member_id)                          ‚îÇ\n‚îÇ   723 ‚îÇ   elif isinstance(                                                                       ‚îÇ\n‚îÇ   724 ‚îÇ   ‚îÇ   proc_descr, (v0_4.ScaleMeanVarianceDescr, v0_5.ScaleMeanVarianceDescr)             ‚îÇ\n‚îÇ   725 ‚îÇ   ):                                                                                     ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ /usr/share/miniconda/envs/95227f474ca45b024cf315edb4101e4919199d0a79ef5ff1eb474dc8ce1ec4d8/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ   310 ‚îÇ   ‚îÇ   ‚îÇ   axis = kwargs.axis                                                             ‚îÇ\n‚îÇ   311 ‚îÇ   ‚îÇ   elif isinstance(kwargs, v0_4.ScaleLinearKwargs):                                   ‚îÇ\n‚îÇ   312 ‚îÇ   ‚îÇ   ‚îÇ   if kwargs.axes is not None:                                                    ‚îÇ\n‚îÇ ‚ù± 313 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   raise NotImplementedError(                                                 ‚îÇ\n‚îÇ   314 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   \"model.v0_4.ScaleLinearKwargs with axes not implemented, please consid ‚îÇ\n‚îÇ   315 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   )                                                                          ‚îÇ\n‚îÇ   316 ‚îÇ   ‚îÇ   ‚îÇ   axis = None                                                                    ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\nNotImplementedError: model.v0_4.ScaleLinearKwargs with axes not implemented, please consider updating the model to v0_5.\n",
                                    "type": "bioimageio.core",
                                    "with_traceback": true
                                }
                            ],
                            "loc": [
                                "weights",
                                "onnx"
                            ],
                            "name": "Reproduce test outputs from test inputs (onnx)",
                            "recommended_env": {
                                "channels": [
                                    "conda-forge",
                                    "nodefaults"
                                ],
                                "dependencies": [
                                    "conda-forge::bioimageio.core",
                                    "onnxruntime",
                                    "pip"
                                ],
                                "name": null
                            },
                            "saved_conda_compare": "Success. All the packages in the specification file are present in the environment with matching version and build string.\n",
                            "status": "failed",
                            "warnings": []
                        },
                        {
                            "context": {
                                "file_name": "rdf.yaml",
                                "known_files": {
                                    "bestfitting-inceptionv3-single-cell.onnx": "cce5fccae3434f5bf6310d8671a4f8720a4db2c9769adb407b5c2a2bdd292fc7",
                                    "bestfitting-inceptionv3-single-cell.pt": "3eb4d8ca9907223c6f79c73cec32cd8a9db0ba642da4967d9b110a0a16e2680e",
                                    "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/README.md?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/bestfitting-inceptionv3-single-cell.onnx?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/bestfitting-inceptionv3-single-cell.pt?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/diagram-of-InceptionV3.png?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/hpa_labels.txt?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/sample_image.tif?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/test_input.npy?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/test_output_classes.npy?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/test_output_features.npy?version=v0": null
                                },
                                "original_source_name": null,
                                "perform_io_checks": true,
                                "root": "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files?version=v0",
                                "update_hashes": false
                            },
                            "errors": [],
                            "loc": [],
                            "name": "Successfully created `ModelDescr` instance.",
                            "recommended_env": null,
                            "saved_conda_compare": null,
                            "status": "passed",
                            "warnings": []
                        },
                        {
                            "context": {
                                "file_name": "rdf.yaml",
                                "known_files": {
                                    "bestfitting-inceptionv3-single-cell.onnx": "cce5fccae3434f5bf6310d8671a4f8720a4db2c9769adb407b5c2a2bdd292fc7",
                                    "bestfitting-inceptionv3-single-cell.pt": "3eb4d8ca9907223c6f79c73cec32cd8a9db0ba642da4967d9b110a0a16e2680e",
                                    "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/README.md?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/bestfitting-inceptionv3-single-cell.onnx?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/bestfitting-inceptionv3-single-cell.pt?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/diagram-of-InceptionV3.png?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/hpa_labels.txt?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/sample_image.tif?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/test_input.npy?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/test_output_classes.npy?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/test_output_features.npy?version=v0": null
                                },
                                "original_source_name": null,
                                "perform_io_checks": true,
                                "root": "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files?version=v0",
                                "update_hashes": false
                            },
                            "errors": [],
                            "loc": [],
                            "name": "bioimageio.spec format validation model 0.4.10",
                            "recommended_env": null,
                            "saved_conda_compare": null,
                            "status": "passed",
                            "warnings": []
                        },
                        {
                            "context": null,
                            "errors": [
                                {
                                    "loc": [
                                        "weights",
                                        "onnx"
                                    ],
                                    "msg": "No module named 'onnxruntime'",
                                    "traceback_html": "<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<style>\n.r1 {color: #800000; text-decoration-color: #800000}\n.r2 {color: #800000; text-decoration-color: #800000; font-weight: bold}\n.r3 {color: #bf7f7f; text-decoration-color: #bf7f7f; font-weight: bold}\n.r4 {color: #7f7f7f; text-decoration-color: #7f7f7f}\n.r5 {color: #0000ff; text-decoration-color: #0000ff}\n.r6 {color: #808000; text-decoration-color: #808000}\n.r7 {color: #00ffff; text-decoration-color: #00ffff}\n.r8 {color: #ff00ff; text-decoration-color: #ff00ff}\n.r9 {color: #808080; text-decoration-color: #808080}\n.r10 {color: #00ffff; text-decoration-color: #00ffff; text-decoration: underline}\n.r11 {color: #ff0000; text-decoration-color: #ff0000; font-weight: bold}\n.r12 {color: #008000; text-decoration-color: #008000}\nbody {\n    color: #000000;\n    background-color: #ffffff;\n}\n</style>\n</head>\n<body>\n    <pre style=\"font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><code style=\"font-family:inherit\"><span class=\"r1\">‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ </span><span class=\"r2\">Traceback </span><span class=\"r3\">(most recent call last)</span><span class=\"r1\"> ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">642 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>inputs = get_test_inputs(model)                                                    <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">643 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>expected = get_test_outputs(model)                                                 <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">644 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>                                                                                   <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span>645 <span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">with</span> create_prediction_pipeline(                                                   <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">646 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span>bioimageio_model=model, devices=devices, weight_format=weight_format           <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">647 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>) <span class=\"r5\">as</span> prediction_pipeline:                                                          <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">648 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span>results = prediction_pipeline.predict_sample_without_blocking(inputs)          <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">368 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r6\">f&quot;deprecated create_prediction_pipeline kwargs: {</span><span class=\"r7\">set</span>(deprecated_kwargs)<span class=\"r6\">}&quot;</span>      <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">369 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>)                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">370 </span><span class=\"r4\">‚îÇ   </span>                                                                                       <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span>371 <span class=\"r4\">‚îÇ   </span>model_adapter = model_adapter <span class=\"r8\">or</span> create_model_adapter(                                 <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">372 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>model_description=bioimageio_model,                                                <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">373 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>devices=devices,                                                                   <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">374 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>weight_format_priority_order=weights_format <span class=\"r8\">and</span> (weights_format,),                 <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">166 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">assert</span> errors                                                                      <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">167 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">if</span> <span class=\"r7\">len</span>(weight_format_priority_order) == <span class=\"r5\">1</span>:                                         <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">168 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">assert</span> <span class=\"r7\">len</span>(errors) == <span class=\"r5\">1</span>                                                        <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span>169 <span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">raise</span> errors[<span class=\"r5\">0</span>]                                                                <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">170 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>                                                                                   <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">171 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">else</span>:                                                                              <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">172 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span>msg = (                                                                        <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">127 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">elif</span> wf == <span class=\"r6\">&quot;onnx&quot;</span>:                                                             <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">128 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">assert</span> weights.onnx <span class=\"r8\">is</span> <span class=\"r8\">not</span> <span class=\"r5\">None</span>                                            <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">129 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">try</span>:                                                                       <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span>130 <span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">from</span><span class=\"r9\"> </span><span class=\"r10\">.onnx_backend</span><span class=\"r9\"> </span><span class=\"r5\">import</span> ONNXModelAdapter                             <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">131 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span>                                                                       <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">132 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">return</span> ONNXModelAdapter(                                               <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">133 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span>model_description=model_description, devices=devices               <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 2 </span><span class=\"r5\">import</span><span class=\"r9\"> </span><span class=\"r10\">warnings</span>                                                                             <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 3 </span><span class=\"r5\">from</span><span class=\"r9\"> </span><span class=\"r10\">typing</span><span class=\"r9\"> </span><span class=\"r5\">import</span> Any, List, Optional, Sequence, Union                                     <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 4 </span>                                                                                            <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span> 5 <span class=\"r5\">import</span><span class=\"r9\"> </span><span class=\"r10\">onnxruntime</span><span class=\"r9\"> </span><span class=\"r5\">as</span><span class=\"r9\"> </span><span class=\"r10\">rt</span>  <span class=\"r4\"># pyright: ignore[reportMissingTypeStubs]</span>                         <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 6 </span><span class=\"r5\">from</span><span class=\"r9\"> </span><span class=\"r10\">numpy.typing</span><span class=\"r9\"> </span><span class=\"r5\">import</span> NDArray                                                            <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 7 </span>                                                                                            <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 8 </span><span class=\"r5\">from</span><span class=\"r9\"> </span><span class=\"r10\">bioimageio.spec.model</span><span class=\"r9\"> </span><span class=\"r5\">import</span> v0_4, v0_5                                                <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ</span>\n<span class=\"r11\">ModuleNotFoundError: </span>No module named <span class=\"r12\">&#x27;onnxruntime&#x27;</span>\n</code></pre>\n</body>\n</html>\n",
                                    "traceback_md": "‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Traceback (most recent call last) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ /usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ   642 ‚îÇ   ‚îÇ   inputs = get_test_inputs(model)                                                    ‚îÇ\n‚îÇ   643 ‚îÇ   ‚îÇ   expected = get_test_outputs(model)                                                 ‚îÇ\n‚îÇ   644 ‚îÇ   ‚îÇ                                                                                      ‚îÇ\n‚îÇ ‚ù± 645 ‚îÇ   ‚îÇ   with create_prediction_pipeline(                                                   ‚îÇ\n‚îÇ   646 ‚îÇ   ‚îÇ   ‚îÇ   bioimageio_model=model, devices=devices, weight_format=weight_format           ‚îÇ\n‚îÇ   647 ‚îÇ   ‚îÇ   ) as prediction_pipeline:                                                          ‚îÇ\n‚îÇ   648 ‚îÇ   ‚îÇ   ‚îÇ   results = prediction_pipeline.predict_sample_without_blocking(inputs)          ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ /usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ   368 ‚îÇ   ‚îÇ   ‚îÇ   f\"deprecated create_prediction_pipeline kwargs: {set(deprecated_kwargs)}\"      ‚îÇ\n‚îÇ   369 ‚îÇ   ‚îÇ   )                                                                                  ‚îÇ\n‚îÇ   370 ‚îÇ                                                                                          ‚îÇ\n‚îÇ ‚ù± 371 ‚îÇ   model_adapter = model_adapter or create_model_adapter(                                 ‚îÇ\n‚îÇ   372 ‚îÇ   ‚îÇ   model_description=bioimageio_model,                                                ‚îÇ\n‚îÇ   373 ‚îÇ   ‚îÇ   devices=devices,                                                                   ‚îÇ\n‚îÇ   374 ‚îÇ   ‚îÇ   weight_format_priority_order=weights_format and (weights_format,),                 ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ /usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ   166 ‚îÇ   ‚îÇ   assert errors                                                                      ‚îÇ\n‚îÇ   167 ‚îÇ   ‚îÇ   if len(weight_format_priority_order) == 1:                                         ‚îÇ\n‚îÇ   168 ‚îÇ   ‚îÇ   ‚îÇ   assert len(errors) == 1                                                        ‚îÇ\n‚îÇ ‚ù± 169 ‚îÇ   ‚îÇ   ‚îÇ   raise errors[0]                                                                ‚îÇ\n‚îÇ   170 ‚îÇ   ‚îÇ                                                                                      ‚îÇ\n‚îÇ   171 ‚îÇ   ‚îÇ   else:                                                                              ‚îÇ\n‚îÇ   172 ‚îÇ   ‚îÇ   ‚îÇ   msg = (                                                                        ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ /usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ   127 ‚îÇ   ‚îÇ   ‚îÇ   elif wf == \"onnx\":                                                             ‚îÇ\n‚îÇ   128 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   assert weights.onnx is not None                                            ‚îÇ\n‚îÇ   129 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   try:                                                                       ‚îÇ\n‚îÇ ‚ù± 130 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   from .onnx_backend import ONNXModelAdapter                             ‚îÇ\n‚îÇ   131 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ                                                                          ‚îÇ\n‚îÇ   132 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   return ONNXModelAdapter(                                               ‚îÇ\n‚îÇ   133 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   model_description=model_description, devices=devices               ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ /usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ    2 import warnings                                                                             ‚îÇ\n‚îÇ    3 from typing import Any, List, Optional, Sequence, Union                                     ‚îÇ\n‚îÇ    4                                                                                             ‚îÇ\n‚îÇ ‚ù±  5 import onnxruntime as rt  # pyright: ignore[reportMissingTypeStubs]                         ‚îÇ\n‚îÇ    6 from numpy.typing import NDArray                                                            ‚îÇ\n‚îÇ    7                                                                                             ‚îÇ\n‚îÇ    8 from bioimageio.spec.model import v0_4, v0_5                                                ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\nModuleNotFoundError: No module named 'onnxruntime'\n",
                                    "type": "bioimageio.core",
                                    "with_traceback": true
                                }
                            ],
                            "loc": [
                                "weights",
                                "onnx"
                            ],
                            "name": "Reproduce test outputs from test inputs (onnx)",
                            "recommended_env": {
                                "channels": [
                                    "conda-forge",
                                    "nodefaults"
                                ],
                                "dependencies": [
                                    "conda-forge::bioimageio.core",
                                    "onnxruntime",
                                    "pip"
                                ],
                                "name": null
                            },
                            "saved_conda_compare": "usage: conda [-h] [-v] [--no-plugins] [-V] COMMAND ...\n\nconda is a tool for managing and deploying applications, environments and packages.\n\noptions:\n  -h, --help            Show this help message and exit.\n  -v, --verbose         Can be used multiple times. Once for detailed output,\n                        twice for INFO logging, thrice for DEBUG logging, four\n                        times for TRACE logging.\n  --no-plugins          Disable all plugins that are not built into conda.\n  -V, --version         Show the conda version number and exit.\n\ncommands:\n  The following built-in and plugins subcommands are available.\n\n  COMMAND\n    activate            Activate a conda environment.\n    clean               Remove unused packages and caches.\n    commands            List all available conda subcommands (including those\n                        from plugins). Generally only used by tab-completion.\n    compare             Compare packages between conda environments.\n    config              Modify configuration values in .condarc.\n    content-trust       Signing and verification tools for Conda\n    create              Create a new conda environment from a list of\n                        specified packages.\n    deactivate          Deactivate the current active conda environment.\n    doctor              Display a health report for your environment.\n    env                 Create and manage conda environments.\n    export              Export a given environment\n    info                Display information about current conda install.\n    init                Initialize conda for shell interaction.\n    install             Install a list of packages into a specified conda\n                        environment.\n    list                List installed packages in a conda environment.\n    notices             Retrieve latest channel notifications.\n    package             Create low-level conda packages. (EXPERIMENTAL)\n    remove (uninstall)  Remove a list of packages from a specified conda\n                        environment.\n    rename              Rename an existing environment.\n    repoquery           Advanced search for repodata.\n    run                 Run an executable in a conda environment.\n    search              Search for packages and display associated information\n                        using the MatchSpec format.\n    token               See `conda token --help`.\n    tos                 A subcommand for viewing, accepting, rejecting, and\n                        otherwise interacting with a channel's Terms of\n                        Service (ToS). This plugin periodically checks for\n                        updated Terms of Service for the active/selected\n                        channels. Channels with a Terms of Service will need\n                        to be accepted or rejected prior to use. Conda will\n                        only allow package installation from channels without\n                        a Terms of Service or with an accepted Terms of\n                        Service. Attempting to use a channel with a rejected\n                        Terms of Service will result in an error.\n    update (upgrade)    Update conda packages to the latest compatible\n                        version.\n",
                            "status": "failed",
                            "warnings": []
                        },
                        {
                            "context": null,
                            "errors": [
                                {
                                    "loc": [
                                        "weights",
                                        "torchscript"
                                    ],
                                    "msg": "model.v0_4.ScaleLinearKwargs with axes not implemented, please consider updating the model to v0_5.",
                                    "traceback_html": "<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<style>\n.r1 {color: #800000; text-decoration-color: #800000}\n.r2 {color: #800000; text-decoration-color: #800000; font-weight: bold}\n.r3 {color: #bf7f7f; text-decoration-color: #bf7f7f; font-weight: bold}\n.r4 {color: #7f7f7f; text-decoration-color: #7f7f7f}\n.r5 {color: #0000ff; text-decoration-color: #0000ff}\n.r6 {color: #00ffff; text-decoration-color: #00ffff}\n.r7 {color: #bfbfbf; text-decoration-color: #bfbfbf}\n.r8 {color: #808000; text-decoration-color: #808000}\n.r9 {color: #bfbf7f; text-decoration-color: #bfbf7f}\n.r10 {color: #808080; text-decoration-color: #808080}\n.r11 {color: #00ff00; text-decoration-color: #00ff00}\n.r12 {color: #ff00ff; text-decoration-color: #ff00ff}\n.r13 {color: #ff0000; text-decoration-color: #ff0000; font-weight: bold}\nbody {\n    color: #000000;\n    background-color: #ffffff;\n}\n</style>\n</head>\n<body>\n    <pre style=\"font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><code style=\"font-family:inherit\"><span class=\"r1\">‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ </span><span class=\"r2\">Traceback </span><span class=\"r3\">(most recent call last)</span><span class=\"r1\"> ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">642 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>inputs = get_test_inputs(model)                                                    <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">643 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>expected = get_test_outputs(model)                                                 <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">644 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>                                                                                   <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span>645 <span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">with</span> create_prediction_pipeline(                                                   <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">646 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span>bioimageio_model=model, devices=devices, weight_format=weight_format           <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">647 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>) <span class=\"r5\">as</span> prediction_pipeline:                                                          <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">648 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span>results = prediction_pipeline.predict_sample_without_blocking(inputs)          <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">384 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">else</span>:                                                                          <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">385 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">yield</span> Sample(members=<span class=\"r6\">dict</span>(<span class=\"r6\">zip</span>(input_ids, x)), stat=common_stat, <span class=\"r6\">id</span>=i)      <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">386 </span><span class=\"r4\">‚îÇ   </span>                                                                                       <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span>387 <span class=\"r4\">‚îÇ   </span>preprocessing, postprocessing = setup_pre_and_postprocessing(                          <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">388 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>bioimageio_model,                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">389 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>dataset(),                                                                         <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">390 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>keep_updating_initial_dataset_stats=keep_updating_initial_dataset_statistics,      <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 95 </span><span class=\"r7\">‚îÇ   </span><span class=\"r8\">&quot;&quot;&quot;</span>                                                                                    <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 96 </span><span class=\"r9\">‚îÇ   </span><span class=\"r8\">Get pre- and postprocessing operators for a `model` description.</span>                       <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 97 </span><span class=\"r9\">‚îÇ   </span><span class=\"r8\">Used in `bioimageio.core.create_prediction_pipeline&quot;&quot;&quot;</span>                                 <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span> 98 <span class=\"r4\">‚îÇ   </span>prep, post, prep_meas, post_meas = _prepare_setup_pre_and_postprocessing(model)        <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 99 </span><span class=\"r4\">‚îÇ   </span>                                                                                       <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">100 </span><span class=\"r4\">‚îÇ   </span>missing_dataset_stats = {                                                              <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">101 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>m                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">216 </span>                                                                                           <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">217 </span><span class=\"r5\">def</span><span class=\"r10\"> </span><span class=\"r11\">_prepare_setup_pre_and_postprocessing</span>(model: AnyModelDescr) -&gt; _SetupProcessing:       <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">218 </span><span class=\"r4\">‚îÇ   </span><span class=\"r5\">if</span> <span class=\"r6\">isinstance</span>(model, v0_4.ModelDescr):                                                 <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span>219 <span class=\"r4\">‚îÇ   ‚îÇ   </span>pre = _prepare_procs(model.inputs)                                                 <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">220 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>post = _prepare_procs(model.outputs)                                               <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">221 </span><span class=\"r4\">‚îÇ   </span><span class=\"r5\">elif</span> <span class=\"r6\">isinstance</span>(model, v0_5.ModelDescr):                                               <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">222 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>pre = _prepare_procs(model.inputs)                                                 <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">188 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>                                                                                   <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">189 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">if</span> <span class=\"r6\">isinstance</span>(t_descr, (v0_4.InputTensorDescr, v0_5.InputTensorDescr)):            <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">190 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">for</span> proc_d <span class=\"r12\">in</span> t_descr.preprocessing:                                           <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span>191 <span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span>procs.append(get_proc(proc_d, t_descr))                                    <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">192 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">elif</span> <span class=\"r6\">isinstance</span>(t_descr, (v0_4.OutputTensorDescr, v0_5.OutputTensorDescr)):        <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">193 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">for</span> proc_d <span class=\"r12\">in</span> t_descr.postprocessing:                                          <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">194 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span>procs.append(get_proc(proc_d, t_descr))                                    <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">687 </span><span class=\"r4\">‚îÇ   </span><span class=\"r5\">elif</span> <span class=\"r6\">isinstance</span>(proc_descr, v0_5.FixedZeroMeanUnitVarianceDescr):                      <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">688 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">return</span> FixedZeroMeanUnitVariance.from_proc_descr(proc_descr, member_id)            <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">689 </span><span class=\"r4\">‚îÇ   </span><span class=\"r5\">elif</span> <span class=\"r6\">isinstance</span>(proc_descr, (v0_4.ScaleLinearDescr, v0_5.ScaleLinearDescr)):           <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span>690 <span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">return</span> ScaleLinear.from_proc_descr(proc_descr, member_id)                          <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">691 </span><span class=\"r4\">‚îÇ   </span><span class=\"r5\">elif</span> <span class=\"r6\">isinstance</span>(                                                                       <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">692 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>proc_descr, (v0_4.ScaleMeanVarianceDescr, v0_5.ScaleMeanVarianceDescr)             <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">693 </span><span class=\"r4\">‚îÇ   </span>):                                                                                     <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">309 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span>axis = kwargs.axis                                                             <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">310 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">elif</span> <span class=\"r6\">isinstance</span>(kwargs, v0_4.ScaleLinearKwargs):                                   <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">311 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">if</span> kwargs.axes <span class=\"r12\">is</span> <span class=\"r12\">not</span> <span class=\"r5\">None</span>:                                                    <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span>312 <span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">raise</span> <span class=\"r6\">NotImplementedError</span>(                                                 <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">313 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r8\">&quot;model.v0_4.ScaleLinearKwargs with axes not implemented, please consid</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">314 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span>)                                                                          <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">315 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span>axis = <span class=\"r5\">None</span>                                                                    <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ</span>\n<span class=\"r13\">NotImplementedError: </span>model.v0_4.ScaleLinearKwargs with axes not implemented, please consider updating the model to v0_5.\n</code></pre>\n</body>\n</html>\n",
                                    "traceback_md": "‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Traceback (most recent call last) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ /usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ   642 ‚îÇ   ‚îÇ   inputs = get_test_inputs(model)                                                    ‚îÇ\n‚îÇ   643 ‚îÇ   ‚îÇ   expected = get_test_outputs(model)                                                 ‚îÇ\n‚îÇ   644 ‚îÇ   ‚îÇ                                                                                      ‚îÇ\n‚îÇ ‚ù± 645 ‚îÇ   ‚îÇ   with create_prediction_pipeline(                                                   ‚îÇ\n‚îÇ   646 ‚îÇ   ‚îÇ   ‚îÇ   bioimageio_model=model, devices=devices, weight_format=weight_format           ‚îÇ\n‚îÇ   647 ‚îÇ   ‚îÇ   ) as prediction_pipeline:                                                          ‚îÇ\n‚îÇ   648 ‚îÇ   ‚îÇ   ‚îÇ   results = prediction_pipeline.predict_sample_without_blocking(inputs)          ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ /usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ   384 ‚îÇ   ‚îÇ   ‚îÇ   else:                                                                          ‚îÇ\n‚îÇ   385 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   yield Sample(members=dict(zip(input_ids, x)), stat=common_stat, id=i)      ‚îÇ\n‚îÇ   386 ‚îÇ                                                                                          ‚îÇ\n‚îÇ ‚ù± 387 ‚îÇ   preprocessing, postprocessing = setup_pre_and_postprocessing(                          ‚îÇ\n‚îÇ   388 ‚îÇ   ‚îÇ   bioimageio_model,                                                                  ‚îÇ\n‚îÇ   389 ‚îÇ   ‚îÇ   dataset(),                                                                         ‚îÇ\n‚îÇ   390 ‚îÇ   ‚îÇ   keep_updating_initial_dataset_stats=keep_updating_initial_dataset_statistics,      ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ /usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ    95 ‚îÇ   \"\"\"                                                                                    ‚îÇ\n‚îÇ    96 ‚îÇ   Get pre- and postprocessing operators for a `model` description.                       ‚îÇ\n‚îÇ    97 ‚îÇ   Used in `bioimageio.core.create_prediction_pipeline\"\"\"                                 ‚îÇ\n‚îÇ ‚ù±  98 ‚îÇ   prep, post, prep_meas, post_meas = _prepare_setup_pre_and_postprocessing(model)        ‚îÇ\n‚îÇ    99 ‚îÇ                                                                                          ‚îÇ\n‚îÇ   100 ‚îÇ   missing_dataset_stats = {                                                              ‚îÇ\n‚îÇ   101 ‚îÇ   ‚îÇ   m                                                                                  ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ /usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ   216                                                                                            ‚îÇ\n‚îÇ   217 def _prepare_setup_pre_and_postprocessing(model: AnyModelDescr) -> _SetupProcessing:       ‚îÇ\n‚îÇ   218 ‚îÇ   if isinstance(model, v0_4.ModelDescr):                                                 ‚îÇ\n‚îÇ ‚ù± 219 ‚îÇ   ‚îÇ   pre = _prepare_procs(model.inputs)                                                 ‚îÇ\n‚îÇ   220 ‚îÇ   ‚îÇ   post = _prepare_procs(model.outputs)                                               ‚îÇ\n‚îÇ   221 ‚îÇ   elif isinstance(model, v0_5.ModelDescr):                                               ‚îÇ\n‚îÇ   222 ‚îÇ   ‚îÇ   pre = _prepare_procs(model.inputs)                                                 ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ /usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ   188 ‚îÇ   ‚îÇ                                                                                      ‚îÇ\n‚îÇ   189 ‚îÇ   ‚îÇ   if isinstance(t_descr, (v0_4.InputTensorDescr, v0_5.InputTensorDescr)):            ‚îÇ\n‚îÇ   190 ‚îÇ   ‚îÇ   ‚îÇ   for proc_d in t_descr.preprocessing:                                           ‚îÇ\n‚îÇ ‚ù± 191 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   procs.append(get_proc(proc_d, t_descr))                                    ‚îÇ\n‚îÇ   192 ‚îÇ   ‚îÇ   elif isinstance(t_descr, (v0_4.OutputTensorDescr, v0_5.OutputTensorDescr)):        ‚îÇ\n‚îÇ   193 ‚îÇ   ‚îÇ   ‚îÇ   for proc_d in t_descr.postprocessing:                                          ‚îÇ\n‚îÇ   194 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   procs.append(get_proc(proc_d, t_descr))                                    ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ /usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ   687 ‚îÇ   elif isinstance(proc_descr, v0_5.FixedZeroMeanUnitVarianceDescr):                      ‚îÇ\n‚îÇ   688 ‚îÇ   ‚îÇ   return FixedZeroMeanUnitVariance.from_proc_descr(proc_descr, member_id)            ‚îÇ\n‚îÇ   689 ‚îÇ   elif isinstance(proc_descr, (v0_4.ScaleLinearDescr, v0_5.ScaleLinearDescr)):           ‚îÇ\n‚îÇ ‚ù± 690 ‚îÇ   ‚îÇ   return ScaleLinear.from_proc_descr(proc_descr, member_id)                          ‚îÇ\n‚îÇ   691 ‚îÇ   elif isinstance(                                                                       ‚îÇ\n‚îÇ   692 ‚îÇ   ‚îÇ   proc_descr, (v0_4.ScaleMeanVarianceDescr, v0_5.ScaleMeanVarianceDescr)             ‚îÇ\n‚îÇ   693 ‚îÇ   ):                                                                                     ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ /usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ   309 ‚îÇ   ‚îÇ   ‚îÇ   axis = kwargs.axis                                                             ‚îÇ\n‚îÇ   310 ‚îÇ   ‚îÇ   elif isinstance(kwargs, v0_4.ScaleLinearKwargs):                                   ‚îÇ\n‚îÇ   311 ‚îÇ   ‚îÇ   ‚îÇ   if kwargs.axes is not None:                                                    ‚îÇ\n‚îÇ ‚ù± 312 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   raise NotImplementedError(                                                 ‚îÇ\n‚îÇ   313 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   \"model.v0_4.ScaleLinearKwargs with axes not implemented, please consid ‚îÇ\n‚îÇ   314 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   )                                                                          ‚îÇ\n‚îÇ   315 ‚îÇ   ‚îÇ   ‚îÇ   axis = None                                                                    ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\nNotImplementedError: model.v0_4.ScaleLinearKwargs with axes not implemented, please consider updating the model to v0_5.\n",
                                    "type": "bioimageio.core",
                                    "with_traceback": true
                                }
                            ],
                            "loc": [
                                "weights",
                                "torchscript"
                            ],
                            "name": "Reproduce test outputs from test inputs (torchscript)",
                            "recommended_env": {
                                "channels": [
                                    "pytorch",
                                    "conda-forge",
                                    "nodefaults"
                                ],
                                "dependencies": [
                                    "conda-forge::bioimageio.core",
                                    "mkl ==2024.0.0",
                                    "numpy <2",
                                    "pip",
                                    "pytorch==1.10.1",
                                    "setuptools <70.0.0",
                                    "torchaudio==0.10.1",
                                    "torchvision==0.11.2"
                                ],
                                "name": null
                            },
                            "saved_conda_compare": "usage: conda [-h] [-v] [--no-plugins] [-V] COMMAND ...\n\nconda is a tool for managing and deploying applications, environments and packages.\n\noptions:\n  -h, --help            Show this help message and exit.\n  -v, --verbose         Can be used multiple times. Once for detailed output,\n                        twice for INFO logging, thrice for DEBUG logging, four\n                        times for TRACE logging.\n  --no-plugins          Disable all plugins that are not built into conda.\n  -V, --version         Show the conda version number and exit.\n\ncommands:\n  The following built-in and plugins subcommands are available.\n\n  COMMAND\n    activate            Activate a conda environment.\n    clean               Remove unused packages and caches.\n    commands            List all available conda subcommands (including those\n                        from plugins). Generally only used by tab-completion.\n    compare             Compare packages between conda environments.\n    config              Modify configuration values in .condarc.\n    content-trust       Signing and verification tools for Conda\n    create              Create a new conda environment from a list of\n                        specified packages.\n    deactivate          Deactivate the current active conda environment.\n    doctor              Display a health report for your environment.\n    env                 Create and manage conda environments.\n    export              Export a given environment\n    info                Display information about current conda install.\n    init                Initialize conda for shell interaction.\n    install             Install a list of packages into a specified conda\n                        environment.\n    list                List installed packages in a conda environment.\n    notices             Retrieve latest channel notifications.\n    package             Create low-level conda packages. (EXPERIMENTAL)\n    remove (uninstall)  Remove a list of packages from a specified conda\n                        environment.\n    rename              Rename an existing environment.\n    repoquery           Advanced search for repodata.\n    run                 Run an executable in a conda environment.\n    search              Search for packages and display associated information\n                        using the MatchSpec format.\n    token               See `conda token --help`.\n    tos                 A subcommand for viewing, accepting, rejecting, and\n                        otherwise interacting with a channel's Terms of\n                        Service (ToS). This plugin periodically checks for\n                        updated Terms of Service for the active/selected\n                        channels. Channels with a Terms of Service will need\n                        to be accepted or rejected prior to use. Conda will\n                        only allow package installation from channels without\n                        a Terms of Service or with an accepted Terms of\n                        Service. Attempting to use a channel with a rejected\n                        Terms of Service will result in an error.\n    update (upgrade)    Update conda packages to the latest compatible\n                        version.\n",
                            "status": "failed",
                            "warnings": []
                        }
                    ],
                    "env": [
                        [
                            "bioimageio.core",
                            "0.9.4",
                            "",
                            ""
                        ],
                        [
                            "bioimageio.spec",
                            "0.5.5.6",
                            "",
                            ""
                        ]
                    ],
                    "format_version": "0.4.10",
                    "id": "10.5281/zenodo.5910854/6539073",
                    "metadata_completeness": 0.6911764705882353,
                    "name": "bioimageio format validation",
                    "saved_conda_list": "# packages in environment at /usr/share/miniconda/envs/95227f474ca45b024cf315edb4101e4919199d0a79ef5ff1eb474dc8ce1ec4d8:\n#\n# Name                     Version          Build                    Channel\n_libgcc_mutex              0.1              conda_forge              conda-forge\n_openmp_mutex              4.5              2_gnu                    conda-forge\nannotated-types            0.7.0            pyhd8ed1ab_1             conda-forge\nanyio                      4.11.0           pyhcf101f3_0             conda-forge\naom                        3.9.1            hac33072_0               conda-forge\nbioimageio.core            0.9.4            pyhd8ed1ab_0             conda-forge\nbioimageio.spec            0.5.5.6          pyhd8ed1ab_0             conda-forge\nblosc                      1.21.6           he440d0b_1               conda-forge\nbrunsli                    0.1              he3183e4_1               conda-forge\nbzip2                      1.0.8            hda65f42_8               conda-forge\nc-ares                     1.34.5           hb9d3cd8_0               conda-forge\nc-blosc2                   2.21.3           h4cfbee9_0               conda-forge\nca-certificates            2025.10.5        hbd8a1cb_0               conda-forge\ncached-property            1.5.2            hd8ed1ab_1               conda-forge\ncached_property            1.5.2            pyha770c72_1             conda-forge\ncertifi                    2025.10.5        pyhd8ed1ab_0             conda-forge\ncharls                     2.4.2            h59595ed_0               conda-forge\ncolorama                   0.4.6            pyhd8ed1ab_1             conda-forge\ncoloredlogs                15.0.1           pyhd8ed1ab_4             conda-forge\ncpython                    3.13.9           py313hd8ed1ab_100        conda-forge\ndav1d                      1.2.1            hd590300_0               conda-forge\ndistro                     1.9.0            pyhd8ed1ab_1             conda-forge\ndnspython                  2.8.0            pyhcf101f3_0             conda-forge\nemail-validator            2.3.0            pyhd8ed1ab_0             conda-forge\nemail_validator            2.3.0            hd8ed1ab_0               conda-forge\nexceptiongroup             1.3.0            pyhd8ed1ab_0             conda-forge\nfilelock                   3.20.0           pyhd8ed1ab_0             conda-forge\ngenericache                0.5.2            pyhd8ed1ab_0             conda-forge\ngiflib                     5.2.2            hd590300_0               conda-forge\ngmp                        6.3.0            hac33072_2               conda-forge\ngmpy2                      2.2.1            py313h86d8783_1          conda-forge\nh11                        0.16.0           pyhd8ed1ab_0             conda-forge\nh2                         4.3.0            pyhcf101f3_0             conda-forge\nh5py                       3.15.1           nompi_py313h253c126_100  conda-forge\nhdf5                       1.14.6           nompi_h6e4c0c1_103       conda-forge\nhpack                      4.1.0            pyhd8ed1ab_0             conda-forge\nhttpcore                   1.0.9            pyh29332c3_0             conda-forge\nhttpx                      0.28.1           pyhd8ed1ab_0             conda-forge\nhumanfriendly              10.0             pyh707e725_8             conda-forge\nhyperframe                 6.1.0            pyhd8ed1ab_0             conda-forge\nidna                       3.11             pyhd8ed1ab_0             conda-forge\nimagecodecs                2025.8.2         py313h718aa22_4          conda-forge\nimageio                    2.37.0           pyhfb79c49_0             conda-forge\nimportlib-metadata         8.7.0            pyhe01879c_1             conda-forge\njxrlib                     1.1              hd590300_3               conda-forge\nkeyutils                   1.6.3            hb9d3cd8_0               conda-forge\nkrb5                       1.21.3           h659f571_0               conda-forge\nlcms2                      2.17             h717163a_0               conda-forge\nld_impl_linux-64           2.44             ha97dd6f_2               conda-forge\nlerc                       4.0.0            h0aef613_1               conda-forge\nlibabseil                  20250814.1       cxx17_hee66210_0         conda-forge\nlibaec                     1.1.4            h3f801dc_0               conda-forge\nlibavif16                  1.3.0            h6395336_2               conda-forge\nlibblas                    3.9.0            37_h4a7cf45_openblas     conda-forge\nlibbrotlicommon            1.1.0            hb03c661_4               conda-forge\nlibbrotlidec               1.1.0            hb03c661_4               conda-forge\nlibbrotlienc               1.1.0            hb03c661_4               conda-forge\nlibcblas                   3.9.0            37_h0358290_openblas     conda-forge\nlibcurl                    8.16.0           h4e3cde8_0               conda-forge\nlibdeflate                 1.24             h86f0d12_0               conda-forge\nlibedit                    3.1.20250104     pl5321h7949ede_0         conda-forge\nlibev                      4.33             hd590300_2               conda-forge\nlibexpat                   2.7.1            hecca717_0               conda-forge\nlibffi                     3.4.6            h2dba641_1               conda-forge\nlibfreetype                2.14.1           ha770c72_0               conda-forge\nlibfreetype6               2.14.1           h73754d4_0               conda-forge\nlibgcc                     15.2.0           h767d61c_7               conda-forge\nlibgcc-ng                  15.2.0           h69a702a_7               conda-forge\nlibgfortran                15.2.0           h69a702a_7               conda-forge\nlibgfortran5               15.2.0           hcd61629_7               conda-forge\nlibgomp                    15.2.0           h767d61c_7               conda-forge\nlibhwy                     1.3.0            h4c17acf_1               conda-forge\nlibjpeg-turbo              3.1.0            hb9d3cd8_0               conda-forge\nlibjxl                     0.11.1           h6cb5226_4               conda-forge\nliblapack                  3.9.0            37_h47877c9_openblas     conda-forge\nliblzma                    5.8.1            hb9d3cd8_2               conda-forge\nlibmpdec                   4.0.0            hb9d3cd8_0               conda-forge\nlibnghttp2                 1.67.0           had1ee68_0               conda-forge\nlibopenblas                0.3.30           pthreads_h94d23a6_2      conda-forge\nlibpng                     1.6.50           h421ea60_1               conda-forge\nlibsqlite                  3.50.4           h0c1763c_0               conda-forge\nlibssh2                    1.11.1           hcf80075_0               conda-forge\nlibstdcxx                  15.2.0           h8f9b012_7               conda-forge\nlibstdcxx-ng               15.2.0           h4852527_7               conda-forge\nlibtiff                    4.7.1            h8261f1e_0               conda-forge\nlibuuid                    2.41.2           he9a06e4_0               conda-forge\nlibwebp-base               1.6.0            hd42ef1d_0               conda-forge\nlibxcb                     1.17.0           h8a09558_0               conda-forge\nlibzlib                    1.3.1            hb9d3cd8_2               conda-forge\nlibzopfli                  1.0.3            h9c3ff4c_0               conda-forge\nloguru                     0.7.3            pyh707e725_0             conda-forge\nlz4-c                      1.10.0           h5888daf_1               conda-forge\nmarkdown                   3.9              pyhd8ed1ab_0             conda-forge\nmarkdown-it-py             4.0.0            pyhd8ed1ab_0             conda-forge\nmdurl                      0.1.2            pyhd8ed1ab_1             conda-forge\nmpc                        1.3.1            h24ddda3_1               conda-forge\nmpfr                       4.2.1            h90cbb55_3               conda-forge\nmpmath                     1.3.0            pyhd8ed1ab_1             conda-forge\nncurses                    6.5              h2d0b736_3               conda-forge\nnumpy                      2.3.3            py313hf6604e3_0          conda-forge\nonnxruntime                1.22.0           py313hd753461_0_cpu      conda-forge\nopenjpeg                   2.5.4            h55fea9a_0               conda-forge\nopenssl                    3.5.4            h26f9b46_0               conda-forge\npackaging                  25.0             pyh29332c3_1             conda-forge\npandas                     2.3.3            py313h08cd8bf_1          conda-forge\npillow                     11.3.0           py313ha492abd_3          conda-forge\npip                        25.2             pyh145f28c_0             conda-forge\nplatformdirs               4.5.0            pyhcf101f3_0             conda-forge\nprotobuf                   6.32.1           py313h50fafe1_2          conda-forge\npthread-stubs              0.4              hb9d3cd8_1002            conda-forge\npydantic                   2.11.10          pyh3cfb1c2_0             conda-forge\npydantic-core              2.33.2           py313h4b2b08d_0          conda-forge\npydantic-settings          2.11.0           pyh3cfb1c2_0             conda-forge\npygments                   2.19.2           pyhd8ed1ab_0             conda-forge\npython                     3.13.9           h2b335a9_100_cp313       conda-forge\npython-dateutil            2.9.0.post0      pyhe01879c_2             conda-forge\npython-dotenv              1.1.1            pyhe01879c_0             conda-forge\npython-flatbuffers         25.9.23          pyh1e1bc0e_0             conda-forge\npython-tzdata              2025.2           pyhd8ed1ab_0             conda-forge\npython_abi                 3.13             8_cp313                  conda-forge\npytz                       2025.2           pyhd8ed1ab_0             conda-forge\nrav1e                      0.7.1            h8fae777_3               conda-forge\nreadline                   8.2              h8c095d6_2               conda-forge\nrich                       14.2.0           pyhcf101f3_0             conda-forge\nruyaml                     0.91.0           pyhd8ed1ab_1             conda-forge\nscipy                      1.16.2           py313h11c21cd_0          conda-forge\nsetuptools                 80.9.0           pyhff2d567_0             conda-forge\nsix                        1.17.0           pyhe01879c_1             conda-forge\nsnappy                     1.2.2            h03e3b7b_0               conda-forge\nsniffio                    1.3.1            pyhd8ed1ab_1             conda-forge\nsvt-av1                    3.1.2            hecca717_0               conda-forge\nsympy                      1.14.0           pyh2585a3b_105           conda-forge\ntifffile                   2025.10.16       pyhd8ed1ab_0             conda-forge\ntk                         8.6.13           noxft_hd72426e_102       conda-forge\ntqdm                       4.67.1           pyhd8ed1ab_1             conda-forge\ntyping-extensions          4.15.0           h396c80c_0               conda-forge\ntyping-inspection          0.4.2            pyhd8ed1ab_0             conda-forge\ntyping_extensions          4.15.0           pyhcf101f3_0             conda-forge\ntzdata                     2025b            h78e105d_0               conda-forge\nxarray                     2025.1.2         pyhd8ed1ab_0             conda-forge\nxorg-libxau                1.0.12           hb9d3cd8_0               conda-forge\nxorg-libxdmcp              1.1.5            hb9d3cd8_0               conda-forge\nzfp                        1.0.1            h909a3a2_3               conda-forge\nzipp                       3.23.0           pyhd8ed1ab_0             conda-forge\nzlib-ng                    2.2.5            hde8ca8f_0               conda-forge\nzstd                       1.5.7            hb8e6e7a_2               conda-forge\n",
                    "source_name": "https://hypha.aicell.io/bioimage-io/artifacts/straightforward-crocodile/files/rdf.yaml?version=v0",
                    "status": "failed",
                    "type": "model"
                },
                "error": "model.v0_4.ScaleLinearKwargs with axes not implemented, please consider updating the model to v0_5.\n\nNo module named 'onnxruntime'\n\nmodel.v0_4.ScaleLinearKwargs with axes not implemented, please consider updating the model to v0_5.",
                "links": [],
                "score": 0.0,
                "status": "failed"
            }
        },
        "careamics": {
            "0.0.16": {
                "badge": null,
                "details": [
                    "CAREamics compatibility check does not support `bioimageio.spec.v0.4` model desciptions."
                ],
                "error": null,
                "links": [],
                "score": 0.0,
                "status": "not-applicable"
            },
            "0.0.17": {
                "badge": null,
                "details": [
                    "CAREamics compatibility check does not support `bioimageio.spec.v0.4` model desciptions."
                ],
                "error": null,
                "links": [],
                "score": 0.0,
                "status": "not-applicable"
            }
        }
    }
}