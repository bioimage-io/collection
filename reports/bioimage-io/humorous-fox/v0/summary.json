{
    "rdf_content": {
        "attachments": [
            {
                "sha256": "c0c925fd12ecc6a7e1ef2921ca6ff2f177156d306932b98eba73ca46c8856770",
                "source": "config.yml"
            }
        ],
        "authors": [
            {
                "affiliation": "Human Technopole",
                "name": "CAREamics authors"
            }
        ],
        "cite": [
            {
                "doi": "10.1109/cvpr.2019.00223",
                "text": "Krull, A., Buchholz, T.O. and Jug, F., 2019. \"Noise2Void - Learning denoising from single noisy images\". In Proceedings of the IEEE/CVF conference on computer vision and pattern recognition (pp. 2129-2137)."
            }
        ],
        "config": {
            "bioimageio": {
                "thumbnails": {}
            }
        },
        "covers": [
            "cover.png"
        ],
        "description": "This model is the output of an example notebook available on the CAREamics documentation website. It can be found under \"Applications\" in the side bar. ([Link](https://careamics.github.io/latest/applications/Noise2Void/SEM/).)",
        "documentation": "README.md",
        "format_version": "0.5.3",
        "id": "humorous-fox",
        "id_emoji": "🦊",
        "inputs": [
            {
                "axes": [
                    {
                        "type": "batch"
                    },
                    {
                        "channel_names": [
                            "channel"
                        ],
                        "type": "channel"
                    },
                    {
                        "id": "y",
                        "size": 256,
                        "type": "space"
                    },
                    {
                        "id": "x",
                        "size": 256,
                        "type": "space"
                    }
                ],
                "id": "input",
                "preprocessing": [
                    {
                        "id": "ensure_dtype",
                        "kwargs": {
                            "dtype": "float32"
                        }
                    },
                    {
                        "id": "fixed_zero_mean_unit_variance",
                        "kwargs": {
                            "axis": "channel",
                            "mean": [
                                39216.046875
                            ],
                            "std": [
                                18678.18359375
                            ]
                        }
                    },
                    {
                        "id": "ensure_dtype",
                        "kwargs": {
                            "dtype": "float32"
                        }
                    }
                ],
                "test_tensor": {
                    "sha256": "889f8bbdd258b300276e63bf676e07436830a2117400688fd255dbc2328e5bef",
                    "source": "inputs.npy"
                }
            }
        ],
        "license": "BSD-3-Clause",
        "links": [
            "https://github.com/CAREamics/careamics",
            "https://careamics.github.io/latest/"
        ],
        "name": "SEM_N2V",
        "outputs": [
            {
                "axes": [
                    {
                        "type": "batch"
                    },
                    {
                        "channel_names": [
                            "channel"
                        ],
                        "type": "channel"
                    },
                    {
                        "id": "y",
                        "size": 256,
                        "type": "space"
                    },
                    {
                        "id": "x",
                        "size": 256,
                        "type": "space"
                    }
                ],
                "id": "prediction",
                "postprocessing": [
                    {
                        "id": "fixed_zero_mean_unit_variance",
                        "kwargs": {
                            "axis": "channel",
                            "mean": [
                                -2.0995642684453917
                            ],
                            "std": [
                                0.000052538396543070526
                            ]
                        }
                    },
                    {
                        "id": "ensure_dtype",
                        "kwargs": {
                            "dtype": "float32"
                        }
                    }
                ],
                "test_tensor": {
                    "sha256": "98dacd0e9f9210adc03ba0b441387a0f00b51c569ffd08090f42ceefbcfbd91f",
                    "source": "outputs.npy"
                }
            }
        ],
        "tags": [
            "denoising",
            "restoration",
            "UNet",
            "2D",
            "CAREamics",
            "pytorch",
            "Noise2Void"
        ],
        "type": "model",
        "uploader": {
            "email": "mehdi.seifi@fht.org",
            "name": "Mehdi Seifi"
        },
        "version": "0.1.0",
        "weights": {
            "pytorch_state_dict": {
                "architecture": {
                    "callable": "UNet",
                    "import_from": "careamics.models.unet",
                    "kwargs": {
                        "conv_dims": 2,
                        "depth": 2,
                        "final_activation": "None",
                        "in_channels": 1,
                        "independent_channels": true,
                        "n2v2": false,
                        "num_channels_init": 32,
                        "num_classes": 1
                    }
                },
                "dependencies": {
                    "sha256": "f6daf3b6fe660089befee91ccc3e6b557b6c457ff49553b8f9a258c7e39c8756",
                    "source": "environment.yml"
                },
                "pytorch_version": "2.4.0",
                "sha256": "6a5a32855cd732b8d104f3da35698d21b4268a4ef298655b952ae34e2239666e",
                "source": "weights.pth"
            }
        }
    },
    "rdf_yaml_sha256": "d036e9ee752bc73e1dd46b5655eee625cab481f90746bceea9212377dc3d64ad",
    "status": "failed",
    "scores": {
        "tool_compatibility_version_specific": {},
        "metadata_completeness": 0.0,
        "metadata_format": 0.0,
        "core_compatibility": 0.0,
        "tool_compatibility": {},
        "overall_partner_tool_compatibility": 0.0,
        "overall_compatibility": 0.0
    },
    "tests": {
        "bioimageio.core_0.9.4": {
            "status": "failed",
            "score": 0.0,
            "error": "No module named 'careamics'",
            "details": {
                "name": "bioimageio format validation",
                "source_name": "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/rdf.yaml?version=v0",
                "id": "humorous-fox",
                "type": "model",
                "format_version": "0.5.5",
                "status": "failed",
                "metadata_completeness": 0.7049180327868853,
                "details": [
                    {
                        "name": "Successfully created `ModelDescr` instance.",
                        "status": "passed",
                        "loc": [],
                        "errors": [],
                        "warnings": [],
                        "context": {
                            "file_name": "rdf.yaml",
                            "original_source_name": null,
                            "perform_io_checks": true,
                            "known_files": {
                                "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/cover.png?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/config.yml?version=v0": null,
                                "config.yml": "c0c925fd12ecc6a7e1ef2921ca6ff2f177156d306932b98eba73ca46c8856770",
                                "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/README.md?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/inputs.npy?version=v0": null,
                                "inputs.npy": "889f8bbdd258b300276e63bf676e07436830a2117400688fd255dbc2328e5bef",
                                "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/outputs.npy?version=v0": null,
                                "outputs.npy": "98dacd0e9f9210adc03ba0b441387a0f00b51c569ffd08090f42ceefbcfbd91f",
                                "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/weights.pth?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/environment.yml?version=v0": null,
                                "environment.yml": "f6daf3b6fe660089befee91ccc3e6b557b6c457ff49553b8f9a258c7e39c8756",
                                "weights.pth": "6a5a32855cd732b8d104f3da35698d21b4268a4ef298655b952ae34e2239666e"
                            },
                            "update_hashes": false,
                            "root": "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files?version=v0"
                        },
                        "recommended_env": null,
                        "saved_conda_compare": null
                    },
                    {
                        "name": "bioimageio.spec format validation model 0.5.5",
                        "status": "passed",
                        "loc": [],
                        "errors": [],
                        "warnings": [
                            {
                                "loc": [
                                    "documentation"
                                ],
                                "msg": "No '# Validation' (sub)section found in README.md.",
                                "type": "warning",
                                "severity": 30
                            },
                            {
                                "loc": [
                                    "inputs",
                                    0,
                                    "sample_tensor"
                                ],
                                "msg": "Needs to be filled for FAIR compliance",
                                "type": "warning",
                                "severity": 35
                            },
                            {
                                "loc": [
                                    "outputs",
                                    0,
                                    "sample_tensor"
                                ],
                                "msg": "Needs to be filled for FAIR compliance",
                                "type": "warning",
                                "severity": 35
                            }
                        ],
                        "context": {
                            "file_name": "rdf.yaml",
                            "original_source_name": null,
                            "perform_io_checks": true,
                            "known_files": {
                                "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/cover.png?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/config.yml?version=v0": null,
                                "config.yml": "c0c925fd12ecc6a7e1ef2921ca6ff2f177156d306932b98eba73ca46c8856770",
                                "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/README.md?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/inputs.npy?version=v0": null,
                                "inputs.npy": "889f8bbdd258b300276e63bf676e07436830a2117400688fd255dbc2328e5bef",
                                "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/outputs.npy?version=v0": null,
                                "outputs.npy": "98dacd0e9f9210adc03ba0b441387a0f00b51c569ffd08090f42ceefbcfbd91f",
                                "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/weights.pth?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/environment.yml?version=v0": null,
                                "environment.yml": "f6daf3b6fe660089befee91ccc3e6b557b6c457ff49553b8f9a258c7e39c8756",
                                "weights.pth": "6a5a32855cd732b8d104f3da35698d21b4268a4ef298655b952ae34e2239666e"
                            },
                            "update_hashes": false,
                            "root": "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files?version=v0"
                        },
                        "recommended_env": null,
                        "saved_conda_compare": null
                    },
                    {
                        "name": "Reproduce test outputs from test inputs (pytorch_state_dict)",
                        "status": "failed",
                        "loc": [
                            "weights",
                            "pytorch_state_dict"
                        ],
                        "errors": [
                            {
                                "loc": [
                                    "weights",
                                    "pytorch_state_dict"
                                ],
                                "msg": "No module named 'careamics'",
                                "type": "bioimageio.core",
                                "with_traceback": true,
                                "traceback_md": "╭─────────────────────────────── Traceback (most recent call last) ────────────────────────────────╮\n│ /usr/share/miniconda/envs/3d5bf57e23beeafd6ea2183cfc86de256c11395f850f34909b53a65354a43210/lib/p │\n│                                                                                                  │\n│    774 │   │   test_input = get_test_input_sample(model)                                         │\n│    775 │   │   expected = get_test_output_sample(model)                                          │\n│    776 │   │                                                                                     │\n│ ❱  777 │   │   with create_prediction_pipeline(                                                  │\n│    778 │   │   │   bioimageio_model=model, devices=devices, weight_format=weight_format          │\n│    779 │   │   ) as prediction_pipeline:                                                         │\n│    780 │   │   │   results = prediction_pipeline.predict_sample_without_blocking(test_input)     │\n│                                                                                                  │\n│ /usr/share/miniconda/envs/3d5bf57e23beeafd6ea2183cfc86de256c11395f850f34909b53a65354a43210/lib/p │\n│                                                                                                  │\n│   368 │   │   │   f\"deprecated create_prediction_pipeline kwargs: {set(deprecated_kwargs)}\"      │\n│   369 │   │   )                                                                                  │\n│   370 │                                                                                          │\n│ ❱ 371 │   model_adapter = model_adapter or create_model_adapter(                                 │\n│   372 │   │   model_description=bioimageio_model,                                                │\n│   373 │   │   devices=devices,                                                                   │\n│   374 │   │   weight_format_priority_order=weights_format and (weights_format,),                 │\n│                                                                                                  │\n│ /usr/share/miniconda/envs/3d5bf57e23beeafd6ea2183cfc86de256c11395f850f34909b53a65354a43210/lib/p │\n│                                                                                                  │\n│   166 │   │   assert errors                                                                      │\n│   167 │   │   if len(weight_format_priority_order) == 1:                                         │\n│   168 │   │   │   assert len(errors) == 1                                                        │\n│ ❱ 169 │   │   │   raise errors[0]                                                                │\n│   170 │   │                                                                                      │\n│   171 │   │   else:                                                                              │\n│   172 │   │   │   msg = (                                                                        │\n│                                                                                                  │\n│ /usr/share/miniconda/envs/3d5bf57e23beeafd6ea2183cfc86de256c11395f850f34909b53a65354a43210/lib/p │\n│                                                                                                  │\n│   109 │   │   │   │   try:                                                                       │\n│   110 │   │   │   │   │   from .pytorch_backend import PytorchModelAdapter                       │\n│   111 │   │   │   │   │                                                                          │\n│ ❱ 112 │   │   │   │   │   return PytorchModelAdapter(                                            │\n│   113 │   │   │   │   │   │   model_description=model_description, devices=devices               │\n│   114 │   │   │   │   │   )                                                                      │\n│   115 │   │   │   │   except Exception as e:                                                     │\n│                                                                                                  │\n│ /usr/share/miniconda/envs/3d5bf57e23beeafd6ea2183cfc86de256c11395f850f34909b53a65354a43210/lib/p │\n│                                                                                                  │\n│    35 │   │   │   raise ValueError(\"No `pytorch_state_dict` weights found\")                      │\n│    36 │   │                                                                                      │\n│    37 │   │   devices = get_devices(devices)                                                     │\n│ ❱  38 │   │   self._model = load_torch_model(weights, load_state=True, devices=devices)          │\n│    39 │   │   if mode == \"eval\":                                                                 │\n│    40 │   │   │   self._model = self._model.eval()                                               │\n│    41 │   │   elif mode == \"train\":                                                              │\n│                                                                                                  │\n│ /usr/share/miniconda/envs/3d5bf57e23beeafd6ea2183cfc86de256c11395f850f34909b53a65354a43210/lib/p │\n│                                                                                                  │\n│   100 │   load_state: bool = True,                                                               │\n│   101 │   devices: Optional[Sequence[Union[str, torch.device]]] = None,                          │\n│   102 ) -> nn.Module:                                                                            │\n│ ❱ 103 │   custom_callable = import_callable(                                                     │\n│   104 │   │   weight_spec.architecture,                                                          │\n│   105 │   │   sha256=(                                                                           │\n│   106 │   │   │   weight_spec.architecture_sha256                                                │\n│                                                                                                  │\n│ /usr/share/miniconda/envs/3d5bf57e23beeafd6ea2183cfc86de256c11395f850f34909b53a65354a43210/lib/p │\n│                                                                                                  │\n│    69 │   │   module = importlib.import_module(node.module_name)                                 │\n│    70 │   │   c = getattr(module, str(node.callable_name))                                       │\n│    71 │   elif isinstance(node, ArchitectureFromLibraryDescr):                                   │\n│ ❱  72 │   │   module = importlib.import_module(node.import_from)                                 │\n│    73 │   │   c = getattr(module, str(node.callable))                                            │\n│    74 │   elif isinstance(node, CallableFromFile):                                               │\n│    75 │   │   c = _import_from_file_impl(node.source_file, str(node.callable_name), **kwargs)    │\n│                                                                                                  │\n│ /usr/share/miniconda/envs/3d5bf57e23beeafd6ea2183cfc86de256c11395f850f34909b53a65354a43210/lib/p │\n│                                                                                                  │\n│   123 │   │   │   if character != '.':                                                           │\n│   124 │   │   │   │   break                                                                      │\n│   125 │   │   │   level += 1                                                                     │\n│ ❱ 126 │   return _bootstrap._gcd_import(name[level:], package, level)                            │\n│   127                                                                                            │\n│   128                                                                                            │\n│   129 _RELOADING = {}                                                                            │\n│ in _gcd_import:1050                                                                              │\n│ in _find_and_load:1027                                                                           │\n│ in _find_and_load_unlocked:992                                                                   │\n│ in _call_with_frames_removed:241                                                                 │\n│ in _gcd_import:1050                                                                              │\n│ in _find_and_load:1027                                                                           │\n│ in _find_and_load_unlocked:992                                                                   │\n│ in _call_with_frames_removed:241                                                                 │\n│ in _gcd_import:1050                                                                              │\n│ in _find_and_load:1027                                                                           │\n│ in _find_and_load_unlocked:1004                                                                  │\n╰──────────────────────────────────────────────────────────────────────────────────────────────────╯\nModuleNotFoundError: No module named 'careamics'\n",
                                "traceback_html": "<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<style>\n.r1 {color: #800000; text-decoration-color: #800000}\n.r2 {color: #800000; text-decoration-color: #800000; font-weight: bold}\n.r3 {color: #bf7f7f; text-decoration-color: #bf7f7f; font-weight: bold}\n.r4 {color: #7f7f7f; text-decoration-color: #7f7f7f}\n.r5 {color: #0000ff; text-decoration-color: #0000ff}\n.r6 {color: #808000; text-decoration-color: #808000}\n.r7 {color: #00ffff; text-decoration-color: #00ffff}\n.r8 {color: #ff00ff; text-decoration-color: #ff00ff}\n.r9 {color: #808080; text-decoration-color: #808080}\n.r10 {color: #00ffff; text-decoration-color: #00ffff; text-decoration: underline}\n.r11 {color: #ff0000; text-decoration-color: #ff0000; font-weight: bold}\n.r12 {color: #008000; text-decoration-color: #008000}\nbody {\n    color: #000000;\n    background-color: #ffffff;\n}\n</style>\n</head>\n<body>\n    <pre style=\"font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><code style=\"font-family:inherit\"><span class=\"r1\">╭─────────────────────────────── </span><span class=\"r2\">Traceback </span><span class=\"r3\">(most recent call last)</span><span class=\"r1\"> ────────────────────────────────╮</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/3d5bf57e23beeafd6ea2183cfc86de256c11395f850f34909b53a65354a43210/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 774 </span><span class=\"r4\">│   │   </span>test_input = get_test_input_sample(model)                                         <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 775 </span><span class=\"r4\">│   │   </span>expected = get_test_output_sample(model)                                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 776 </span><span class=\"r4\">│   │   </span>                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span> 777 <span class=\"r4\">│   │   </span><span class=\"r5\">with</span> create_prediction_pipeline(                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 778 </span><span class=\"r4\">│   │   │   </span>bioimageio_model=model, devices=devices, weight_format=weight_format          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 779 </span><span class=\"r4\">│   │   </span>) <span class=\"r5\">as</span> prediction_pipeline:                                                         <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 780 </span><span class=\"r4\">│   │   │   </span>results = prediction_pipeline.predict_sample_without_blocking(test_input)     <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/3d5bf57e23beeafd6ea2183cfc86de256c11395f850f34909b53a65354a43210/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">368 </span><span class=\"r4\">│   │   │   </span><span class=\"r6\">f&quot;deprecated create_prediction_pipeline kwargs: {</span><span class=\"r7\">set</span>(deprecated_kwargs)<span class=\"r6\">}&quot;</span>      <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">369 </span><span class=\"r4\">│   │   </span>)                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">370 </span><span class=\"r4\">│   </span>                                                                                       <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span>371 <span class=\"r4\">│   </span>model_adapter = model_adapter <span class=\"r8\">or</span> create_model_adapter(                                 <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">372 </span><span class=\"r4\">│   │   </span>model_description=bioimageio_model,                                                <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">373 </span><span class=\"r4\">│   │   </span>devices=devices,                                                                   <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">374 </span><span class=\"r4\">│   │   </span>weight_format_priority_order=weights_format <span class=\"r8\">and</span> (weights_format,),                 <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/3d5bf57e23beeafd6ea2183cfc86de256c11395f850f34909b53a65354a43210/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">166 </span><span class=\"r4\">│   │   </span><span class=\"r5\">assert</span> errors                                                                      <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">167 </span><span class=\"r4\">│   │   </span><span class=\"r5\">if</span> <span class=\"r7\">len</span>(weight_format_priority_order) == <span class=\"r5\">1</span>:                                         <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">168 </span><span class=\"r4\">│   │   │   </span><span class=\"r5\">assert</span> <span class=\"r7\">len</span>(errors) == <span class=\"r5\">1</span>                                                        <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span>169 <span class=\"r4\">│   │   │   </span><span class=\"r5\">raise</span> errors[<span class=\"r5\">0</span>]                                                                <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">170 </span><span class=\"r4\">│   │   </span>                                                                                   <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">171 </span><span class=\"r4\">│   │   </span><span class=\"r5\">else</span>:                                                                              <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">172 </span><span class=\"r4\">│   │   │   </span>msg = (                                                                        <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/3d5bf57e23beeafd6ea2183cfc86de256c11395f850f34909b53a65354a43210/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">109 </span><span class=\"r4\">│   │   │   │   </span><span class=\"r5\">try</span>:                                                                       <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">110 </span><span class=\"r4\">│   │   │   │   │   </span><span class=\"r5\">from</span><span class=\"r9\"> </span><span class=\"r10\">.pytorch_backend</span><span class=\"r9\"> </span><span class=\"r5\">import</span> PytorchModelAdapter                       <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">111 </span><span class=\"r4\">│   │   │   │   │   </span>                                                                       <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span>112 <span class=\"r4\">│   │   │   │   │   </span><span class=\"r5\">return</span> PytorchModelAdapter(                                            <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">113 </span><span class=\"r4\">│   │   │   │   │   │   </span>model_description=model_description, devices=devices               <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">114 </span><span class=\"r4\">│   │   │   │   │   </span>)                                                                      <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">115 </span><span class=\"r4\">│   │   │   │   </span><span class=\"r5\">except</span> <span class=\"r7\">Exception</span> <span class=\"r5\">as</span> e:                                                     <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/3d5bf57e23beeafd6ea2183cfc86de256c11395f850f34909b53a65354a43210/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 35 </span><span class=\"r4\">│   │   │   </span><span class=\"r5\">raise</span> <span class=\"r7\">ValueError</span>(<span class=\"r6\">&quot;No `pytorch_state_dict` weights found&quot;</span>)                      <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 36 </span><span class=\"r4\">│   │   </span>                                                                                   <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 37 </span><span class=\"r4\">│   │   </span>devices = get_devices(devices)                                                     <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span> 38 <span class=\"r4\">│   │   </span><span class=\"r7\">self</span>._model = load_torch_model(weights, load_state=<span class=\"r5\">True</span>, devices=devices)          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 39 </span><span class=\"r4\">│   │   </span><span class=\"r5\">if</span> mode == <span class=\"r6\">&quot;eval&quot;</span>:                                                                 <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 40 </span><span class=\"r4\">│   │   │   </span><span class=\"r7\">self</span>._model = <span class=\"r7\">self</span>._model.eval()                                               <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 41 </span><span class=\"r4\">│   │   </span><span class=\"r5\">elif</span> mode == <span class=\"r6\">&quot;train&quot;</span>:                                                              <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/3d5bf57e23beeafd6ea2183cfc86de256c11395f850f34909b53a65354a43210/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">100 </span><span class=\"r4\">│   </span>load_state: <span class=\"r7\">bool</span> = <span class=\"r5\">True</span>,                                                               <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">101 </span><span class=\"r4\">│   </span>devices: Optional[Sequence[Union[<span class=\"r7\">str</span>, torch.device]]] = <span class=\"r5\">None</span>,                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">102 </span>) -&gt; nn.Module:                                                                            <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span>103 <span class=\"r4\">│   </span>custom_callable = import_callable(                                                     <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">104 </span><span class=\"r4\">│   │   </span>weight_spec.architecture,                                                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">105 </span><span class=\"r4\">│   │   </span>sha256=(                                                                           <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">106 </span><span class=\"r4\">│   │   │   </span>weight_spec.architecture_sha256                                                <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/3d5bf57e23beeafd6ea2183cfc86de256c11395f850f34909b53a65354a43210/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 69 </span><span class=\"r4\">│   │   </span>module = importlib.import_module(node.module_name)                                 <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 70 </span><span class=\"r4\">│   │   </span>c = <span class=\"r7\">getattr</span>(module, <span class=\"r7\">str</span>(node.callable_name))                                       <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 71 </span><span class=\"r4\">│   </span><span class=\"r5\">elif</span> <span class=\"r7\">isinstance</span>(node, ArchitectureFromLibraryDescr):                                   <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span> 72 <span class=\"r4\">│   │   </span>module = importlib.import_module(node.import_from)                                 <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 73 </span><span class=\"r4\">│   │   </span>c = <span class=\"r7\">getattr</span>(module, <span class=\"r7\">str</span>(node.callable))                                            <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 74 </span><span class=\"r4\">│   </span><span class=\"r5\">elif</span> <span class=\"r7\">isinstance</span>(node, CallableFromFile):                                               <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 75 </span><span class=\"r4\">│   │   </span>c = _import_from_file_impl(node.source_file, <span class=\"r7\">str</span>(node.callable_name), **kwargs)    <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/3d5bf57e23beeafd6ea2183cfc86de256c11395f850f34909b53a65354a43210/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">123 </span><span class=\"r4\">│   │   │   </span><span class=\"r5\">if</span> character != <span class=\"r6\">&#x27;.&#x27;</span>:                                                           <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">124 </span><span class=\"r4\">│   │   │   │   </span><span class=\"r5\">break</span>                                                                      <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">125 </span><span class=\"r4\">│   │   │   </span>level += <span class=\"r5\">1</span>                                                                     <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span>126 <span class=\"r4\">│   </span><span class=\"r5\">return</span> _bootstrap._gcd_import(name[level:], package, level)                            <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">127 </span>                                                                                           <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">128 </span>                                                                                           <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">129 </span>_RELOADING = {}                                                                            <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> in _gcd_import:1050                                                                              <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> in _find_and_load:1027                                                                           <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> in _find_and_load_unlocked:992                                                                   <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> in _call_with_frames_removed:241                                                                 <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> in _gcd_import:1050                                                                              <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> in _find_and_load:1027                                                                           <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> in _find_and_load_unlocked:992                                                                   <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> in _call_with_frames_removed:241                                                                 <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> in _gcd_import:1050                                                                              <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> in _find_and_load:1027                                                                           <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> in _find_and_load_unlocked:1004                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">╰──────────────────────────────────────────────────────────────────────────────────────────────────╯</span>\n<span class=\"r11\">ModuleNotFoundError: </span>No module named <span class=\"r12\">&#x27;careamics&#x27;</span>\n</code></pre>\n</body>\n</html>\n"
                            }
                        ],
                        "warnings": [],
                        "context": null,
                        "recommended_env": {
                            "name": "careamics",
                            "channels": [
                                "conda-forge",
                                "nodefaults"
                            ],
                            "dependencies": [
                                "conda-forge::bioimageio.core",
                                "pip",
                                "python=3.10",
                                "pytorch=2.4.0",
                                "torchvision=0.19.0",
                                {
                                    "pip": [
                                        "git+https://github.com/CAREamics/careamics.git"
                                    ]
                                }
                            ]
                        },
                        "saved_conda_compare": "//github.com/careamics/careamics.git not found\n"
                    }
                ],
                "env": [
                    [
                        "bioimageio.core",
                        "0.9.4",
                        "",
                        ""
                    ],
                    [
                        "bioimageio.spec",
                        "0.5.5.6",
                        "",
                        ""
                    ]
                ],
                "saved_conda_list": "# packages in environment at /usr/share/miniconda/envs/3d5bf57e23beeafd6ea2183cfc86de256c11395f850f34909b53a65354a43210:\n#\n# Name                     Version          Build                      Channel\n_openmp_mutex              4.5              5_kmp_llvm                 conda-forge\nannotated-types            0.7.0            pyhd8ed1ab_1               conda-forge\nanyio                      4.11.0           pyhcf101f3_0               conda-forge\naom                        3.9.1            hac33072_0                 conda-forge\nbioimageio.core            0.9.4            pyhd8ed1ab_0               conda-forge\nbioimageio.spec            0.5.5.6          pyhd8ed1ab_0               conda-forge\nblosc                      1.21.6           he440d0b_1                 conda-forge\nbrunsli                    0.1              he3183e4_1                 conda-forge\nbzip2                      1.0.8            hda65f42_8                 conda-forge\nc-ares                     1.34.5           hb9d3cd8_0                 conda-forge\nc-blosc2                   2.19.1           h4cfbee9_0                 conda-forge\nca-certificates            2025.10.5        hbd8a1cb_0                 conda-forge\ncached-property            1.5.2            hd8ed1ab_1                 conda-forge\ncached_property            1.5.2            pyha770c72_1               conda-forge\ncertifi                    2025.10.5        pyhd8ed1ab_0               conda-forge\ncharls                     2.4.2            h59595ed_0                 conda-forge\ncolorama                   0.4.6            pyhd8ed1ab_1               conda-forge\ncpython                    3.10.19          py310hd8ed1ab_2            conda-forge\ndav1d                      1.2.1            hd590300_0                 conda-forge\ndistro                     1.9.0            pyhd8ed1ab_1               conda-forge\ndnspython                  2.8.0            pyhcf101f3_0               conda-forge\nemail-validator            2.3.0            pyhd8ed1ab_0               conda-forge\nemail_validator            2.3.0            hd8ed1ab_0                 conda-forge\nexceptiongroup             1.3.0            pyhd8ed1ab_0               conda-forge\nfilelock                   3.20.0           pyhd8ed1ab_0               conda-forge\nfsspec                     2025.9.0         pyhd8ed1ab_0               conda-forge\ngenericache                0.5.2            pyhd8ed1ab_0               conda-forge\ngiflib                     5.2.2            hd590300_0                 conda-forge\ngmp                        6.3.0            hac33072_2                 conda-forge\ngmpy2                      2.2.1            py310h63ebcad_1            conda-forge\nh11                        0.16.0           pyhd8ed1ab_0               conda-forge\nh2                         4.3.0            pyhcf101f3_0               conda-forge\nh5py                       3.15.1           nompi_py310h4aa865e_100    conda-forge\nhdf5                       1.14.6           nompi_h6e4c0c1_103         conda-forge\nhpack                      4.1.0            pyhd8ed1ab_0               conda-forge\nhttpcore                   1.0.9            pyh29332c3_0               conda-forge\nhttpx                      0.28.1           pyhd8ed1ab_0               conda-forge\nhyperframe                 6.1.0            pyhd8ed1ab_0               conda-forge\nidna                       3.11             pyhd8ed1ab_0               conda-forge\nimagecodecs                2025.3.30        py310h4eb8eaf_2            conda-forge\nimageio                    2.37.0           pyhfb79c49_0               conda-forge\nimportlib-metadata         8.7.0            pyhe01879c_1               conda-forge\njinja2                     3.1.6            pyhd8ed1ab_0               conda-forge\njxrlib                     1.1              hd590300_3                 conda-forge\nkeyutils                   1.6.3            hb9d3cd8_0                 conda-forge\nkrb5                       1.21.3           h659f571_0                 conda-forge\nlcms2                      2.17             h717163a_0                 conda-forge\nld_impl_linux-64           2.44             ha97dd6f_2                 conda-forge\nlerc                       4.0.0            h0aef613_1                 conda-forge\nlibabseil                  20240116.2       cxx17_he02047a_1           conda-forge\nlibaec                     1.1.4            h3f801dc_0                 conda-forge\nlibavif16                  1.3.0            h6395336_2                 conda-forge\nlibblas                    3.9.0            37_h4a7cf45_openblas       conda-forge\nlibbrotlicommon            1.1.0            hb03c661_4                 conda-forge\nlibbrotlidec               1.1.0            hb03c661_4                 conda-forge\nlibbrotlienc               1.1.0            hb03c661_4                 conda-forge\nlibcblas                   3.9.0            37_h0358290_openblas       conda-forge\nlibcurl                    8.16.0           h4e3cde8_0                 conda-forge\nlibdeflate                 1.24             h86f0d12_0                 conda-forge\nlibedit                    3.1.20250104     pl5321h7949ede_0           conda-forge\nlibev                      4.33             hd590300_2                 conda-forge\nlibexpat                   2.7.1            hecca717_0                 conda-forge\nlibffi                     3.5.2            h9ec8514_0                 conda-forge\nlibfreetype                2.14.1           ha770c72_0                 conda-forge\nlibfreetype6               2.14.1           h73754d4_0                 conda-forge\nlibgcc                     15.2.0           h767d61c_7                 conda-forge\nlibgcc-ng                  15.2.0           h69a702a_7                 conda-forge\nlibgfortran                15.2.0           h69a702a_7                 conda-forge\nlibgfortran5               15.2.0           hcd61629_7                 conda-forge\nlibhwloc                   2.12.1           default_h7f8ec31_1002      conda-forge\nlibhwy                     1.3.0            h4c17acf_1                 conda-forge\nlibiconv                   1.18             h3b78370_2                 conda-forge\nlibjpeg-turbo              3.1.0            hb9d3cd8_0                 conda-forge\nlibjxl                     0.11.1           h6cb5226_4                 conda-forge\nliblapack                  3.9.0            37_h47877c9_openblas       conda-forge\nliblzma                    5.8.1            hb9d3cd8_2                 conda-forge\nlibnghttp2                 1.67.0           had1ee68_0                 conda-forge\nlibnsl                     2.0.1            hb9d3cd8_1                 conda-forge\nlibopenblas                0.3.30           pthreads_h94d23a6_2        conda-forge\nlibpng                     1.6.50           h421ea60_1                 conda-forge\nlibprotobuf                4.25.3           hd5b35b9_1                 conda-forge\nlibsqlite                  3.50.4           h0c1763c_0                 conda-forge\nlibssh2                    1.11.1           hcf80075_0                 conda-forge\nlibstdcxx                  15.2.0           h8f9b012_7                 conda-forge\nlibstdcxx-ng               15.2.0           h4852527_7                 conda-forge\nlibtiff                    4.7.1            h8261f1e_0                 conda-forge\nlibtorch                   2.4.0            cpu_mkl_h85b1651_101       conda-forge\nlibuuid                    2.41.2           he9a06e4_0                 conda-forge\nlibuv                      1.51.0           hb03c661_1                 conda-forge\nlibwebp-base               1.6.0            hd42ef1d_0                 conda-forge\nlibxcb                     1.17.0           h8a09558_0                 conda-forge\nlibxcrypt                  4.4.36           hd590300_1                 conda-forge\nlibxml2                    2.15.1           h031cc0b_0                 conda-forge\nlibxml2-16                 2.15.1           hf2a90c1_0                 conda-forge\nlibzlib                    1.3.1            hb9d3cd8_2                 conda-forge\nlibzopfli                  1.0.3            h9c3ff4c_0                 conda-forge\nllvm-openmp                21.1.4           h4922eb0_0                 conda-forge\nloguru                     0.7.3            pyh707e725_0               conda-forge\nlz4-c                      1.10.0           h5888daf_1                 conda-forge\nmarkdown                   3.9              pyhd8ed1ab_0               conda-forge\nmarkdown-it-py             4.0.0            pyhd8ed1ab_0               conda-forge\nmarkupsafe                 3.0.3            py310h3406613_0            conda-forge\nmdurl                      0.1.2            pyhd8ed1ab_1               conda-forge\nmkl                        2023.2.0         ha770c72_50498             conda-forge\nmpc                        1.3.1            h24ddda3_1                 conda-forge\nmpfr                       4.2.1            h90cbb55_3                 conda-forge\nmpmath                     1.3.0            pyhd8ed1ab_1               conda-forge\nncurses                    6.5              h2d0b736_3                 conda-forge\nnetworkx                   3.4.2            pyh267e887_2               conda-forge\nnumpy                      2.2.6            py310hefbff90_0            conda-forge\nopenjpeg                   2.5.4            h55fea9a_0                 conda-forge\nopenssl                    3.5.4            h26f9b46_0                 conda-forge\npackaging                  25.0             pyh29332c3_1               conda-forge\npandas                     2.3.3            py310h0158d43_1            conda-forge\npillow                     11.3.0           py310h6557065_3            conda-forge\npip                        25.2             pyh8b19718_0               conda-forge\nplatformdirs               4.5.0            pyhcf101f3_0               conda-forge\npthread-stubs              0.4              hb9d3cd8_1002              conda-forge\npydantic                   2.11.10          pyh3cfb1c2_0               conda-forge\npydantic-core              2.33.2           py310hbcd0ec0_0            conda-forge\npydantic-settings          2.11.0           pyh3cfb1c2_0               conda-forge\npygments                   2.19.2           pyhd8ed1ab_0               conda-forge\npython                     3.10.19          h3c07f61_2_cpython         conda-forge\npython-dateutil            2.9.0.post0      pyhe01879c_2               conda-forge\npython-dotenv              1.1.1            pyhe01879c_0               conda-forge\npython-tzdata              2025.2           pyhd8ed1ab_0               conda-forge\npython_abi                 3.10             8_cp310                    conda-forge\npytorch                    2.4.0            cpu_mkl_py310h0b5cf2a_101  conda-forge\npytz                       2025.2           pyhd8ed1ab_0               conda-forge\nrav1e                      0.7.1            h8fae777_3                 conda-forge\nreadline                   8.2              h8c095d6_2                 conda-forge\nrich                       14.2.0           pyhcf101f3_0               conda-forge\nruyaml                     0.91.0           pyhd8ed1ab_1               conda-forge\nscipy                      1.15.2           py310h1d65ade_0            conda-forge\nsetuptools                 80.9.0           pyhff2d567_0               conda-forge\nsix                        1.17.0           pyhe01879c_1               conda-forge\nsleef                      3.9.0            ha0421bc_0                 conda-forge\nsnappy                     1.2.2            h03e3b7b_0                 conda-forge\nsniffio                    1.3.1            pyhd8ed1ab_1               conda-forge\nsvt-av1                    3.1.2            hecca717_0                 conda-forge\nsympy                      1.14.0           pyh2585a3b_105             conda-forge\ntbb                        2021.13.0        hb60516a_3                 conda-forge\ntifffile                   2025.5.10        pyhd8ed1ab_0               conda-forge\ntk                         8.6.13           noxft_hd72426e_102         conda-forge\ntorchvision                0.19.0           cpu_py310hd9679db_0        conda-forge\ntqdm                       4.67.1           pyhd8ed1ab_1               conda-forge\ntyping-extensions          4.15.0           h396c80c_0                 conda-forge\ntyping-inspection          0.4.2            pyhd8ed1ab_0               conda-forge\ntyping_extensions          4.15.0           pyhcf101f3_0               conda-forge\ntzdata                     2025b            h78e105d_0                 conda-forge\nwheel                      0.45.1           pyhd8ed1ab_1               conda-forge\nxarray                     2025.1.2         pyhd8ed1ab_0               conda-forge\nxorg-libxau                1.0.12           hb9d3cd8_0                 conda-forge\nxorg-libxdmcp              1.1.5            hb9d3cd8_0                 conda-forge\nzfp                        1.0.1            h909a3a2_3                 conda-forge\nzipp                       3.23.0           pyhd8ed1ab_0               conda-forge\nzlib-ng                    2.2.5            hde8ca8f_0                 conda-forge\nzstd                       1.5.7            hb8e6e7a_2                 conda-forge\n"
            },
            "badge": null,
            "links": []
        },
        "careamics_0.0.17": {
            "status": "failed",
            "score": 0.0,
            "error": null,
            "details": "CAREamics config file is not present in attachments.",
            "badge": null,
            "links": []
        },
        "biapy_3.6.5": {
            "status": "failed",
            "score": 0.0,
            "error": "[all] pytorch_state_dict not found in model RDF or inputs != 1\n",
            "details": "[all] pytorch_state_dict not found in model RDF or inputs != 1\n",
            "badge": null,
            "links": [
                "biapy/biapy"
            ]
        },
        "bioimageio.core_0.9.3": {
            "status": "failed",
            "score": 0.0,
            "error": "Command '['conda', 'env', 'create', '--file=/tmp/tmphdbe72qs/pytorch_state_dict/env.yaml', '--name=3d5bf57e23beeafd6ea2183cfc86de256c11395f850f34909b53a65354a43210']' returned non-zero exit status 1.",
            "details": {
                "name": "bioimageio format validation",
                "source_name": "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/rdf.yaml?version=v0",
                "id": "humorous-fox",
                "type": "model",
                "format_version": "0.5.5",
                "status": "failed",
                "metadata_completeness": 0.7049180327868853,
                "details": [
                    {
                        "name": "Successfully created `ModelDescr` instance.",
                        "status": "passed",
                        "loc": [],
                        "errors": [],
                        "warnings": [],
                        "context": {
                            "file_name": "rdf.yaml",
                            "original_source_name": null,
                            "perform_io_checks": true,
                            "known_files": {
                                "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/cover.png?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/config.yml?version=v0": null,
                                "config.yml": "c0c925fd12ecc6a7e1ef2921ca6ff2f177156d306932b98eba73ca46c8856770",
                                "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/README.md?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/inputs.npy?version=v0": null,
                                "inputs.npy": "889f8bbdd258b300276e63bf676e07436830a2117400688fd255dbc2328e5bef",
                                "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/outputs.npy?version=v0": null,
                                "outputs.npy": "98dacd0e9f9210adc03ba0b441387a0f00b51c569ffd08090f42ceefbcfbd91f",
                                "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/weights.pth?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/environment.yml?version=v0": null,
                                "environment.yml": "f6daf3b6fe660089befee91ccc3e6b557b6c457ff49553b8f9a258c7e39c8756",
                                "weights.pth": "6a5a32855cd732b8d104f3da35698d21b4268a4ef298655b952ae34e2239666e"
                            },
                            "update_hashes": false,
                            "root": "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files?version=v0"
                        },
                        "recommended_env": null,
                        "saved_conda_compare": null
                    },
                    {
                        "name": "bioimageio.spec format validation model 0.5.5",
                        "status": "passed",
                        "loc": [],
                        "errors": [],
                        "warnings": [
                            {
                                "loc": [
                                    "documentation"
                                ],
                                "msg": "No '# Validation' (sub)section found in README.md.",
                                "type": "warning",
                                "severity": 30
                            },
                            {
                                "loc": [
                                    "inputs",
                                    0,
                                    "sample_tensor"
                                ],
                                "msg": "Needs to be filled for FAIR compliance",
                                "type": "warning",
                                "severity": 35
                            },
                            {
                                "loc": [
                                    "outputs",
                                    0,
                                    "sample_tensor"
                                ],
                                "msg": "Needs to be filled for FAIR compliance",
                                "type": "warning",
                                "severity": 35
                            }
                        ],
                        "context": {
                            "file_name": "rdf.yaml",
                            "original_source_name": null,
                            "perform_io_checks": true,
                            "known_files": {
                                "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/cover.png?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/config.yml?version=v0": null,
                                "config.yml": "c0c925fd12ecc6a7e1ef2921ca6ff2f177156d306932b98eba73ca46c8856770",
                                "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/README.md?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/inputs.npy?version=v0": null,
                                "inputs.npy": "889f8bbdd258b300276e63bf676e07436830a2117400688fd255dbc2328e5bef",
                                "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/outputs.npy?version=v0": null,
                                "outputs.npy": "98dacd0e9f9210adc03ba0b441387a0f00b51c569ffd08090f42ceefbcfbd91f",
                                "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/weights.pth?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/environment.yml?version=v0": null,
                                "environment.yml": "f6daf3b6fe660089befee91ccc3e6b557b6c457ff49553b8f9a258c7e39c8756",
                                "weights.pth": "6a5a32855cd732b8d104f3da35698d21b4268a4ef298655b952ae34e2239666e"
                            },
                            "update_hashes": false,
                            "root": "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files?version=v0"
                        },
                        "recommended_env": null,
                        "saved_conda_compare": null
                    },
                    {
                        "name": "Conda environment creation",
                        "status": "failed",
                        "loc": [
                            "weights",
                            "pytorch_state_dict"
                        ],
                        "errors": [
                            {
                                "loc": [
                                    "weights",
                                    "pytorch_state_dict"
                                ],
                                "msg": "Command '['conda', 'env', 'create', '--file=/tmp/tmphdbe72qs/pytorch_state_dict/env.yaml', '--name=3d5bf57e23beeafd6ea2183cfc86de256c11395f850f34909b53a65354a43210']' returned non-zero exit status 1.",
                                "type": "conda",
                                "with_traceback": true,
                                "traceback_md": "╭─────────────────────────────── Traceback (most recent call last) ────────────────────────────────╮\n│ /home/runner/.local/lib/python3.12/site-packages/bioimageio/core/_resource_tests.py:389 in _test │\n│                                                                                                  │\n│    386 │   │   raise RuntimeError(\"Conda not available\") from e                                  │\n│    387 │                                                                                         │\n│    388 │   try:                                                                                  │\n│ ❱  389 │   │   run_command([CONDA_CMD, \"activate\", env_name])                                    │\n│    390 │   except Exception:                                                                     │\n│    391 │   │   working_dir.mkdir(parents=True, exist_ok=True)                                    │\n│    392 │   │   path = working_dir / \"env.yaml\"                                                   │\n│                                                                                                  │\n│ /home/runner/.local/lib/python3.12/site-packages/bioimageio/core/_resource_tests.py:196 in defau │\n│                                                                                                  │\n│    193                                                                                           │\n│    194 def default_run_command(args: Sequence[str]):                                             │\n│    195 │   logger.info(\"running '{}'...\", \" \".join(args))                                        │\n│ ❱  196 │   _ = subprocess.check_call(args)                                                       │\n│    197                                                                                           │\n│    198                                                                                           │\n│    199 def test_description(                                                                     │\n│                                                                                                  │\n│ /usr/lib/python3.12/subprocess.py:413 in check_call                                              │\n│                                                                                                  │\n│    410 │   │   cmd = kwargs.get(\"args\")                                                          │\n│    411 │   │   if cmd is None:                                                                   │\n│    412 │   │   │   cmd = popenargs[0]                                                            │\n│ ❱  413 │   │   raise CalledProcessError(retcode, cmd)                                            │\n│    414 │   return 0                                                                              │\n│    415                                                                                           │\n│    416                                                                                           │\n╰──────────────────────────────────────────────────────────────────────────────────────────────────╯\nCalledProcessError: Command '['conda', 'activate', '3d5bf57e23beeafd6ea2183cfc86de256c11395f850f34909b53a65354a43210']' returned non-zero exit status 1.\n\nDuring handling of the above exception, another exception occurred:\n\n╭─────────────────────────────── Traceback (most recent call last) ────────────────────────────────╮\n│ /home/runner/.local/lib/python3.12/site-packages/bioimageio/core/_resource_tests.py:396 in _test │\n│                                                                                                  │\n│    393 │   │   try:                                                                              │\n│    394 │   │   │   _ = path.write_bytes(encoded_env)                                             │\n│    395 │   │   │   logger.debug(\"written conda env to {}\", path)                                 │\n│ ❱  396 │   │   │   run_command(                                                                  │\n│    397 │   │   │   │   [CONDA_CMD, \"env\", \"create\", f\"--file={path}\", f\"--name={env_name}\"]      │\n│    398 │   │   │   )                                                                             │\n│    399 │   │   │   run_command([CONDA_CMD, \"activate\", env_name])                                │\n│                                                                                                  │\n│ /home/runner/.local/lib/python3.12/site-packages/bioimageio/core/_resource_tests.py:196 in defau │\n│                                                                                                  │\n│    193                                                                                           │\n│    194 def default_run_command(args: Sequence[str]):                                             │\n│    195 │   logger.info(\"running '{}'...\", \" \".join(args))                                        │\n│ ❱  196 │   _ = subprocess.check_call(args)                                                       │\n│    197                                                                                           │\n│    198                                                                                           │\n│    199 def test_description(                                                                     │\n│                                                                                                  │\n│ /usr/lib/python3.12/subprocess.py:413 in check_call                                              │\n│                                                                                                  │\n│    410 │   │   cmd = kwargs.get(\"args\")                                                          │\n│    411 │   │   if cmd is None:                                                                   │\n│    412 │   │   │   cmd = popenargs[0]                                                            │\n│ ❱  413 │   │   raise CalledProcessError(retcode, cmd)                                            │\n│    414 │   return 0                                                                              │\n│    415                                                                                           │\n│    416                                                                                           │\n╰──────────────────────────────────────────────────────────────────────────────────────────────────╯\nCalledProcessError: Command '['conda', 'env', 'create', '--file=/tmp/tmphdbe72qs/pytorch_state_dict/env.yaml', '--name=3d5bf57e23beeafd6ea2183cfc86de256c11395f850f34909b53a65354a43210']' returned non-zero exit status 1.\n",
                                "traceback_html": "<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<style>\n.r1 {color: #800000; text-decoration-color: #800000}\n.r2 {color: #800000; text-decoration-color: #800000; font-weight: bold}\n.r3 {color: #bf7f7f; text-decoration-color: #bf7f7f; font-weight: bold}\n.r4 {color: #bfbf7f; text-decoration-color: #bfbf7f}\n.r5 {color: #808000; text-decoration-color: #808000; font-weight: bold}\n.r6 {color: #0000ff; text-decoration-color: #0000ff}\n.r7 {color: #00ff00; text-decoration-color: #00ff00}\n.r8 {color: #7f7f7f; text-decoration-color: #7f7f7f}\n.r9 {color: #00ffff; text-decoration-color: #00ffff}\n.r10 {color: #808000; text-decoration-color: #808000}\n.r11 {color: #00ffff; text-decoration-color: #00ffff; text-decoration: underline}\n.r12 {color: #ff00ff; text-decoration-color: #ff00ff}\n.r13 {color: #ff0000; text-decoration-color: #ff0000; font-weight: bold}\n.r14 {color: #008000; text-decoration-color: #008000}\n.r15 {font-weight: bold}\n.r16 {color: #008080; text-decoration-color: #008080; font-weight: bold}\n.r17 {font-style: italic}\nbody {\n    color: #000000;\n    background-color: #ffffff;\n}\n</style>\n</head>\n<body>\n    <pre style=\"font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><code style=\"font-family:inherit\"><span class=\"r1\">╭─────────────────────────────── </span><span class=\"r2\">Traceback </span><span class=\"r3\">(most recent call last)</span><span class=\"r1\"> ────────────────────────────────╮</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/home/runner/.local/lib/python3.12/site-packages/bioimageio/core/</span><span class=\"r5\">_resource_tests.py</span>:<span class=\"r6\">389</span> in <span class=\"r7\">_test</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 386 </span><span class=\"r8\">│   │   </span><span class=\"r6\">raise</span> <span class=\"r9\">RuntimeError</span>(<span class=\"r10\">&quot;Conda not available&quot;</span>) <span class=\"r6\">from</span> <span class=\"r11\">e</span>                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 387 </span><span class=\"r8\">│   </span>                                                                                      <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 388 </span><span class=\"r8\">│   </span><span class=\"r6\">try</span>:                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span> 389 <span class=\"r8\">│   │   </span>run_command([CONDA_CMD, <span class=\"r10\">&quot;activate&quot;</span>, env_name])                                    <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 390 </span><span class=\"r8\">│   </span><span class=\"r6\">except</span> <span class=\"r9\">Exception</span>:                                                                     <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 391 </span><span class=\"r8\">│   │   </span>working_dir.mkdir(parents=<span class=\"r6\">True</span>, exist_ok=<span class=\"r6\">True</span>)                                    <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 392 </span><span class=\"r8\">│   │   </span>path = working_dir / <span class=\"r10\">&quot;env.yaml&quot;</span>                                                   <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/home/runner/.local/lib/python3.12/site-packages/bioimageio/core/</span><span class=\"r5\">_resource_tests.py</span>:<span class=\"r6\">196</span> in <span class=\"r7\">defau</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 193 </span>                                                                                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 194 </span><span class=\"r6\">def</span> <span class=\"r7\">default_run_command</span>(args: Sequence[<span class=\"r9\">str</span>]):                                             <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 195 </span><span class=\"r8\">│   </span>logger.info(<span class=\"r10\">&quot;running &#x27;{}&#x27;...&quot;</span>, <span class=\"r10\">&quot; &quot;</span>.join(args))                                        <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span> 196 <span class=\"r8\">│   </span>_ = subprocess.check_call(args)                                                       <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 197 </span>                                                                                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 198 </span>                                                                                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 199 </span><span class=\"r6\">def</span> <span class=\"r7\">test_description</span>(                                                                     <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/lib/python3.12/</span><span class=\"r5\">subprocess.py</span>:<span class=\"r6\">413</span> in <span class=\"r7\">check_call</span>                                              <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 410 </span><span class=\"r8\">│   │   </span>cmd = kwargs.get(<span class=\"r10\">&quot;args&quot;</span>)                                                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 411 </span><span class=\"r8\">│   │   </span><span class=\"r6\">if</span> cmd <span class=\"r12\">is</span> <span class=\"r6\">None</span>:                                                                   <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 412 </span><span class=\"r8\">│   │   │   </span>cmd = popenargs[<span class=\"r6\">0</span>]                                                            <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span> 413 <span class=\"r8\">│   │   </span><span class=\"r6\">raise</span> CalledProcessError(retcode, cmd)                                            <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 414 </span><span class=\"r8\">│   </span><span class=\"r6\">return</span> <span class=\"r6\">0</span>                                                                              <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 415 </span>                                                                                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 416 </span>                                                                                          <span class=\"r1\">│</span>\n<span class=\"r1\">╰──────────────────────────────────────────────────────────────────────────────────────────────────╯</span>\n<span class=\"r13\">CalledProcessError: </span>Command <span class=\"r14\">&#x27;[&#x27;</span>conda&#x27;, <span class=\"r14\">&#x27;activate&#x27;</span>, <span class=\"r14\">&#x27;3d5bf57e23beeafd6ea2183cfc86de256c11395f850f34909b53a65354a43210&#x27;</span><span class=\"r15\">]</span>&#x27; returned non-zero exit status <span class=\"r16\">1</span>.\n\n<span class=\"r17\">During handling of the above exception, another exception occurred:</span>\n\n<span class=\"r1\">╭─────────────────────────────── </span><span class=\"r2\">Traceback </span><span class=\"r3\">(most recent call last)</span><span class=\"r1\"> ────────────────────────────────╮</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/home/runner/.local/lib/python3.12/site-packages/bioimageio/core/</span><span class=\"r5\">_resource_tests.py</span>:<span class=\"r6\">396</span> in <span class=\"r7\">_test</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 393 </span><span class=\"r8\">│   │   </span><span class=\"r6\">try</span>:                                                                              <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 394 </span><span class=\"r8\">│   │   │   </span>_ = path.write_bytes(encoded_env)                                             <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 395 </span><span class=\"r8\">│   │   │   </span>logger.debug(<span class=\"r10\">&quot;written conda env to {}&quot;</span>, path)                                 <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span> 396 <span class=\"r8\">│   │   │   </span>run_command(                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 397 </span><span class=\"r8\">│   │   │   │   </span>[CONDA_CMD, <span class=\"r10\">&quot;env&quot;</span>, <span class=\"r10\">&quot;create&quot;</span>, <span class=\"r10\">f&quot;--file={</span>path<span class=\"r10\">}&quot;</span>, <span class=\"r10\">f&quot;--name={</span>env_name<span class=\"r10\">}&quot;</span>]      <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 398 </span><span class=\"r8\">│   │   │   </span>)                                                                             <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 399 </span><span class=\"r8\">│   │   │   </span>run_command([CONDA_CMD, <span class=\"r10\">&quot;activate&quot;</span>, env_name])                                <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/home/runner/.local/lib/python3.12/site-packages/bioimageio/core/</span><span class=\"r5\">_resource_tests.py</span>:<span class=\"r6\">196</span> in <span class=\"r7\">defau</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 193 </span>                                                                                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 194 </span><span class=\"r6\">def</span> <span class=\"r7\">default_run_command</span>(args: Sequence[<span class=\"r9\">str</span>]):                                             <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 195 </span><span class=\"r8\">│   </span>logger.info(<span class=\"r10\">&quot;running &#x27;{}&#x27;...&quot;</span>, <span class=\"r10\">&quot; &quot;</span>.join(args))                                        <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span> 196 <span class=\"r8\">│   </span>_ = subprocess.check_call(args)                                                       <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 197 </span>                                                                                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 198 </span>                                                                                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 199 </span><span class=\"r6\">def</span> <span class=\"r7\">test_description</span>(                                                                     <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/lib/python3.12/</span><span class=\"r5\">subprocess.py</span>:<span class=\"r6\">413</span> in <span class=\"r7\">check_call</span>                                              <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 410 </span><span class=\"r8\">│   │   </span>cmd = kwargs.get(<span class=\"r10\">&quot;args&quot;</span>)                                                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 411 </span><span class=\"r8\">│   │   </span><span class=\"r6\">if</span> cmd <span class=\"r12\">is</span> <span class=\"r6\">None</span>:                                                                   <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 412 </span><span class=\"r8\">│   │   │   </span>cmd = popenargs[<span class=\"r6\">0</span>]                                                            <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span> 413 <span class=\"r8\">│   │   </span><span class=\"r6\">raise</span> CalledProcessError(retcode, cmd)                                            <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 414 </span><span class=\"r8\">│   </span><span class=\"r6\">return</span> <span class=\"r6\">0</span>                                                                              <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 415 </span>                                                                                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 416 </span>                                                                                          <span class=\"r1\">│</span>\n<span class=\"r1\">╰──────────────────────────────────────────────────────────────────────────────────────────────────╯</span>\n<span class=\"r13\">CalledProcessError: </span>Command <span class=\"r14\">&#x27;[&#x27;</span>conda&#x27;, <span class=\"r14\">&#x27;env&#x27;</span>, <span class=\"r14\">&#x27;create&#x27;</span>, <span class=\"r14\">&#x27;--file=/tmp/tmphdbe72qs/pytorch_state_dict/env.yaml&#x27;</span>, <span class=\"r14\">&#x27;--name=3d5bf57e23beeafd6ea2183cfc86de256c11395f850f34909b53a65354a43210&#x27;</span><span class=\"r15\">]</span>&#x27; returned non-zero exit status <span class=\"r16\">1</span>.\n</code></pre>\n</body>\n</html>\n"
                            }
                        ],
                        "warnings": [],
                        "context": null,
                        "recommended_env": {
                            "name": null,
                            "channels": [
                                "conda-forge",
                                "nodefaults"
                            ],
                            "dependencies": [
                                "conda-forge::bioimageio.core",
                                "pip",
                                "python=3.10",
                                "pytorch=2.4.0",
                                "torchvision=0.19.0",
                                {
                                    "pip": [
                                        "git+https://github.com/CAREamics/careamics.git"
                                    ]
                                }
                            ]
                        },
                        "saved_conda_compare": "bioimageio.core not found\npip not found\npython not found\npytorch not found\ntorchvision not found\n//github.com/careamics/careamics.git not found\n"
                    }
                ],
                "env": [
                    [
                        "bioimageio.spec",
                        "0.5.5.5",
                        "",
                        ""
                    ]
                ],
                "saved_conda_list": "# packages in environment at /usr/share/miniconda/envs/core:\n#\n# Name                     Version          Build            Channel\n"
            },
            "badge": null,
            "links": []
        }
    }
}