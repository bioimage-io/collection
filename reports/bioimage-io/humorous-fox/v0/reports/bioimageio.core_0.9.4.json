{"status": "failed", "score": 0.0, "error": "No module named 'careamics'", "details": {"name": "bioimageio format validation", "source_name": "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/rdf.yaml?version=v0", "id": "humorous-fox", "type": "model", "format_version": "0.5.5", "status": "failed", "metadata_completeness": 0.7049180327868853, "details": [{"name": "Successfully created `ModelDescr` instance.", "status": "passed", "loc": [], "errors": [], "warnings": [], "context": {"file_name": "rdf.yaml", "original_source_name": null, "perform_io_checks": true, "known_files": {"https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/cover.png?version=v0": null, "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/config.yml?version=v0": null, "config.yml": "c0c925fd12ecc6a7e1ef2921ca6ff2f177156d306932b98eba73ca46c8856770", "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/README.md?version=v0": null, "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/inputs.npy?version=v0": null, "inputs.npy": "889f8bbdd258b300276e63bf676e07436830a2117400688fd255dbc2328e5bef", "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/outputs.npy?version=v0": null, "outputs.npy": "98dacd0e9f9210adc03ba0b441387a0f00b51c569ffd08090f42ceefbcfbd91f", "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/weights.pth?version=v0": null, "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/environment.yml?version=v0": null, "environment.yml": "f6daf3b6fe660089befee91ccc3e6b557b6c457ff49553b8f9a258c7e39c8756", "weights.pth": "6a5a32855cd732b8d104f3da35698d21b4268a4ef298655b952ae34e2239666e"}, "update_hashes": false, "root": "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files?version=v0"}, "recommended_env": null, "saved_conda_compare": null}, {"name": "bioimageio.spec format validation model 0.5.5", "status": "passed", "loc": [], "errors": [], "warnings": [{"loc": ["documentation"], "msg": "No '# Validation' (sub)section found in README.md.", "type": "warning", "severity": 30}, {"loc": ["inputs", 0, "sample_tensor"], "msg": "Needs to be filled for FAIR compliance", "type": "warning", "severity": 35}, {"loc": ["outputs", 0, "sample_tensor"], "msg": "Needs to be filled for FAIR compliance", "type": "warning", "severity": 35}], "context": {"file_name": "rdf.yaml", "original_source_name": null, "perform_io_checks": true, "known_files": {"https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/cover.png?version=v0": null, "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/config.yml?version=v0": null, "config.yml": "c0c925fd12ecc6a7e1ef2921ca6ff2f177156d306932b98eba73ca46c8856770", "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/README.md?version=v0": null, "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/inputs.npy?version=v0": null, "inputs.npy": "889f8bbdd258b300276e63bf676e07436830a2117400688fd255dbc2328e5bef", "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/outputs.npy?version=v0": null, "outputs.npy": "98dacd0e9f9210adc03ba0b441387a0f00b51c569ffd08090f42ceefbcfbd91f", "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/weights.pth?version=v0": null, "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files/environment.yml?version=v0": null, "environment.yml": "f6daf3b6fe660089befee91ccc3e6b557b6c457ff49553b8f9a258c7e39c8756", "weights.pth": "6a5a32855cd732b8d104f3da35698d21b4268a4ef298655b952ae34e2239666e"}, "update_hashes": false, "root": "https://hypha.aicell.io/bioimage-io/artifacts/humorous-fox/files?version=v0"}, "recommended_env": null, "saved_conda_compare": null}, {"name": "Reproduce test outputs from test inputs (pytorch_state_dict)", "status": "failed", "loc": ["weights", "pytorch_state_dict"], "errors": [{"loc": ["weights", "pytorch_state_dict"], "msg": "No module named 'careamics'", "type": "bioimageio.core", "with_traceback": true, "traceback_md": "\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /usr/share/miniconda/envs/3d5bf57e23beeafd6ea2183cfc86de256c11395f850f34909b53a65354a43210/lib/p \u2502\n\u2502                                                                                                  \u2502\n\u2502    774 \u2502   \u2502   test_input = get_test_input_sample(model)                                         \u2502\n\u2502    775 \u2502   \u2502   expected = get_test_output_sample(model)                                          \u2502\n\u2502    776 \u2502   \u2502                                                                                     \u2502\n\u2502 \u2771  777 \u2502   \u2502   with create_prediction_pipeline(                                                  \u2502\n\u2502    778 \u2502   \u2502   \u2502   bioimageio_model=model, devices=devices, weight_format=weight_format          \u2502\n\u2502    779 \u2502   \u2502   ) as prediction_pipeline:                                                         \u2502\n\u2502    780 \u2502   \u2502   \u2502   results = prediction_pipeline.predict_sample_without_blocking(test_input)     \u2502\n\u2502                                                                                                  \u2502\n\u2502 /usr/share/miniconda/envs/3d5bf57e23beeafd6ea2183cfc86de256c11395f850f34909b53a65354a43210/lib/p \u2502\n\u2502                                                                                                  \u2502\n\u2502   368 \u2502   \u2502   \u2502   f\"deprecated create_prediction_pipeline kwargs: {set(deprecated_kwargs)}\"      \u2502\n\u2502   369 \u2502   \u2502   )                                                                                  \u2502\n\u2502   370 \u2502                                                                                          \u2502\n\u2502 \u2771 371 \u2502   model_adapter = model_adapter or create_model_adapter(                                 \u2502\n\u2502   372 \u2502   \u2502   model_description=bioimageio_model,                                                \u2502\n\u2502   373 \u2502   \u2502   devices=devices,                                                                   \u2502\n\u2502   374 \u2502   \u2502   weight_format_priority_order=weights_format and (weights_format,),                 \u2502\n\u2502                                                                                                  \u2502\n\u2502 /usr/share/miniconda/envs/3d5bf57e23beeafd6ea2183cfc86de256c11395f850f34909b53a65354a43210/lib/p \u2502\n\u2502                                                                                                  \u2502\n\u2502   166 \u2502   \u2502   assert errors                                                                      \u2502\n\u2502   167 \u2502   \u2502   if len(weight_format_priority_order) == 1:                                         \u2502\n\u2502   168 \u2502   \u2502   \u2502   assert len(errors) == 1                                                        \u2502\n\u2502 \u2771 169 \u2502   \u2502   \u2502   raise errors[0]                                                                \u2502\n\u2502   170 \u2502   \u2502                                                                                      \u2502\n\u2502   171 \u2502   \u2502   else:                                                                              \u2502\n\u2502   172 \u2502   \u2502   \u2502   msg = (                                                                        \u2502\n\u2502                                                                                                  \u2502\n\u2502 /usr/share/miniconda/envs/3d5bf57e23beeafd6ea2183cfc86de256c11395f850f34909b53a65354a43210/lib/p \u2502\n\u2502                                                                                                  \u2502\n\u2502   109 \u2502   \u2502   \u2502   \u2502   try:                                                                       \u2502\n\u2502   110 \u2502   \u2502   \u2502   \u2502   \u2502   from .pytorch_backend import PytorchModelAdapter                       \u2502\n\u2502   111 \u2502   \u2502   \u2502   \u2502   \u2502                                                                          \u2502\n\u2502 \u2771 112 \u2502   \u2502   \u2502   \u2502   \u2502   return PytorchModelAdapter(                                            \u2502\n\u2502   113 \u2502   \u2502   \u2502   \u2502   \u2502   \u2502   model_description=model_description, devices=devices               \u2502\n\u2502   114 \u2502   \u2502   \u2502   \u2502   \u2502   )                                                                      \u2502\n\u2502   115 \u2502   \u2502   \u2502   \u2502   except Exception as e:                                                     \u2502\n\u2502                                                                                                  \u2502\n\u2502 /usr/share/miniconda/envs/3d5bf57e23beeafd6ea2183cfc86de256c11395f850f34909b53a65354a43210/lib/p \u2502\n\u2502                                                                                                  \u2502\n\u2502    35 \u2502   \u2502   \u2502   raise ValueError(\"No `pytorch_state_dict` weights found\")                      \u2502\n\u2502    36 \u2502   \u2502                                                                                      \u2502\n\u2502    37 \u2502   \u2502   devices = get_devices(devices)                                                     \u2502\n\u2502 \u2771  38 \u2502   \u2502   self._model = load_torch_model(weights, load_state=True, devices=devices)          \u2502\n\u2502    39 \u2502   \u2502   if mode == \"eval\":                                                                 \u2502\n\u2502    40 \u2502   \u2502   \u2502   self._model = self._model.eval()                                               \u2502\n\u2502    41 \u2502   \u2502   elif mode == \"train\":                                                              \u2502\n\u2502                                                                                                  \u2502\n\u2502 /usr/share/miniconda/envs/3d5bf57e23beeafd6ea2183cfc86de256c11395f850f34909b53a65354a43210/lib/p \u2502\n\u2502                                                                                                  \u2502\n\u2502   100 \u2502   load_state: bool = True,                                                               \u2502\n\u2502   101 \u2502   devices: Optional[Sequence[Union[str, torch.device]]] = None,                          \u2502\n\u2502   102 ) -> nn.Module:                                                                            \u2502\n\u2502 \u2771 103 \u2502   custom_callable = import_callable(                                                     \u2502\n\u2502   104 \u2502   \u2502   weight_spec.architecture,                                                          \u2502\n\u2502   105 \u2502   \u2502   sha256=(                                                                           \u2502\n\u2502   106 \u2502   \u2502   \u2502   weight_spec.architecture_sha256                                                \u2502\n\u2502                                                                                                  \u2502\n\u2502 /usr/share/miniconda/envs/3d5bf57e23beeafd6ea2183cfc86de256c11395f850f34909b53a65354a43210/lib/p \u2502\n\u2502                                                                                                  \u2502\n\u2502    69 \u2502   \u2502   module = importlib.import_module(node.module_name)                                 \u2502\n\u2502    70 \u2502   \u2502   c = getattr(module, str(node.callable_name))                                       \u2502\n\u2502    71 \u2502   elif isinstance(node, ArchitectureFromLibraryDescr):                                   \u2502\n\u2502 \u2771  72 \u2502   \u2502   module = importlib.import_module(node.import_from)                                 \u2502\n\u2502    73 \u2502   \u2502   c = getattr(module, str(node.callable))                                            \u2502\n\u2502    74 \u2502   elif isinstance(node, CallableFromFile):                                               \u2502\n\u2502    75 \u2502   \u2502   c = _import_from_file_impl(node.source_file, str(node.callable_name), **kwargs)    \u2502\n\u2502                                                                                                  \u2502\n\u2502 /usr/share/miniconda/envs/3d5bf57e23beeafd6ea2183cfc86de256c11395f850f34909b53a65354a43210/lib/p \u2502\n\u2502                                                                                                  \u2502\n\u2502   123 \u2502   \u2502   \u2502   if character != '.':                                                           \u2502\n\u2502   124 \u2502   \u2502   \u2502   \u2502   break                                                                      \u2502\n\u2502   125 \u2502   \u2502   \u2502   level += 1                                                                     \u2502\n\u2502 \u2771 126 \u2502   return _bootstrap._gcd_import(name[level:], package, level)                            \u2502\n\u2502   127                                                                                            \u2502\n\u2502   128                                                                                            \u2502\n\u2502   129 _RELOADING = {}                                                                            \u2502\n\u2502 in _gcd_import:1050                                                                              \u2502\n\u2502 in _find_and_load:1027                                                                           \u2502\n\u2502 in _find_and_load_unlocked:992                                                                   \u2502\n\u2502 in _call_with_frames_removed:241                                                                 \u2502\n\u2502 in _gcd_import:1050                                                                              \u2502\n\u2502 in _find_and_load:1027                                                                           \u2502\n\u2502 in _find_and_load_unlocked:992                                                                   \u2502\n\u2502 in _call_with_frames_removed:241                                                                 \u2502\n\u2502 in _gcd_import:1050                                                                              \u2502\n\u2502 in _find_and_load:1027                                                                           \u2502\n\u2502 in _find_and_load_unlocked:1004                                                                  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nModuleNotFoundError: No module named 'careamics'\n", "traceback_html": "<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<style>\n.r1 {color: #800000; text-decoration-color: #800000}\n.r2 {color: #800000; text-decoration-color: #800000; font-weight: bold}\n.r3 {color: #bf7f7f; text-decoration-color: #bf7f7f; font-weight: bold}\n.r4 {color: #7f7f7f; text-decoration-color: #7f7f7f}\n.r5 {color: #0000ff; text-decoration-color: #0000ff}\n.r6 {color: #808000; text-decoration-color: #808000}\n.r7 {color: #00ffff; text-decoration-color: #00ffff}\n.r8 {color: #ff00ff; text-decoration-color: #ff00ff}\n.r9 {color: #808080; text-decoration-color: #808080}\n.r10 {color: #00ffff; text-decoration-color: #00ffff; text-decoration: underline}\n.r11 {color: #ff0000; text-decoration-color: #ff0000; font-weight: bold}\n.r12 {color: #008000; text-decoration-color: #008000}\nbody {\n    color: #000000;\n    background-color: #ffffff;\n}\n</style>\n</head>\n<body>\n    <pre style=\"font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><code style=\"font-family:inherit\"><span class=\"r1\">\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 </span><span class=\"r2\">Traceback </span><span class=\"r3\">(most recent call last)</span><span class=\"r1\"> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</span>\n<span class=\"r1\">\u2502</span> <span class=\"r4\">/usr/share/miniconda/envs/3d5bf57e23beeafd6ea2183cfc86de256c11395f850f34909b53a65354a43210/lib/p</span> <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>                                                                                                  <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\"> 774 </span><span class=\"r4\">\u2502   \u2502   </span>test_input = get_test_input_sample(model)                                         <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\"> 775 </span><span class=\"r4\">\u2502   \u2502   </span>expected = get_test_output_sample(model)                                          <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\"> 776 </span><span class=\"r4\">\u2502   \u2502   </span>                                                                                  <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span> <span class=\"r1\">\u2771 </span> 777 <span class=\"r4\">\u2502   \u2502   </span><span class=\"r5\">with</span> create_prediction_pipeline(                                                  <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\"> 778 </span><span class=\"r4\">\u2502   \u2502   \u2502   </span>bioimageio_model=model, devices=devices, weight_format=weight_format          <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\"> 779 </span><span class=\"r4\">\u2502   \u2502   </span>) <span class=\"r5\">as</span> prediction_pipeline:                                                         <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\"> 780 </span><span class=\"r4\">\u2502   \u2502   \u2502   </span>results = prediction_pipeline.predict_sample_without_blocking(test_input)     <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>                                                                                                  <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span> <span class=\"r4\">/usr/share/miniconda/envs/3d5bf57e23beeafd6ea2183cfc86de256c11395f850f34909b53a65354a43210/lib/p</span> <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>                                                                                                  <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\">368 </span><span class=\"r4\">\u2502   \u2502   \u2502   </span><span class=\"r6\">f&quot;deprecated create_prediction_pipeline kwargs: {</span><span class=\"r7\">set</span>(deprecated_kwargs)<span class=\"r6\">}&quot;</span>      <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\">369 </span><span class=\"r4\">\u2502   \u2502   </span>)                                                                                  <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\">370 </span><span class=\"r4\">\u2502   </span>                                                                                       <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span> <span class=\"r1\">\u2771 </span>371 <span class=\"r4\">\u2502   </span>model_adapter = model_adapter <span class=\"r8\">or</span> create_model_adapter(                                 <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\">372 </span><span class=\"r4\">\u2502   \u2502   </span>model_description=bioimageio_model,                                                <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\">373 </span><span class=\"r4\">\u2502   \u2502   </span>devices=devices,                                                                   <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\">374 </span><span class=\"r4\">\u2502   \u2502   </span>weight_format_priority_order=weights_format <span class=\"r8\">and</span> (weights_format,),                 <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>                                                                                                  <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span> <span class=\"r4\">/usr/share/miniconda/envs/3d5bf57e23beeafd6ea2183cfc86de256c11395f850f34909b53a65354a43210/lib/p</span> <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>                                                                                                  <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\">166 </span><span class=\"r4\">\u2502   \u2502   </span><span class=\"r5\">assert</span> errors                                                                      <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\">167 </span><span class=\"r4\">\u2502   \u2502   </span><span class=\"r5\">if</span> <span class=\"r7\">len</span>(weight_format_priority_order) == <span class=\"r5\">1</span>:                                         <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\">168 </span><span class=\"r4\">\u2502   \u2502   \u2502   </span><span class=\"r5\">assert</span> <span class=\"r7\">len</span>(errors) == <span class=\"r5\">1</span>                                                        <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span> <span class=\"r1\">\u2771 </span>169 <span class=\"r4\">\u2502   \u2502   \u2502   </span><span class=\"r5\">raise</span> errors[<span class=\"r5\">0</span>]                                                                <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\">170 </span><span class=\"r4\">\u2502   \u2502   </span>                                                                                   <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\">171 </span><span class=\"r4\">\u2502   \u2502   </span><span class=\"r5\">else</span>:                                                                              <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\">172 </span><span class=\"r4\">\u2502   \u2502   \u2502   </span>msg = (                                                                        <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>                                                                                                  <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span> <span class=\"r4\">/usr/share/miniconda/envs/3d5bf57e23beeafd6ea2183cfc86de256c11395f850f34909b53a65354a43210/lib/p</span> <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>                                                                                                  <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\">109 </span><span class=\"r4\">\u2502   \u2502   \u2502   \u2502   </span><span class=\"r5\">try</span>:                                                                       <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\">110 </span><span class=\"r4\">\u2502   \u2502   \u2502   \u2502   \u2502   </span><span class=\"r5\">from</span><span class=\"r9\"> </span><span class=\"r10\">.pytorch_backend</span><span class=\"r9\"> </span><span class=\"r5\">import</span> PytorchModelAdapter                       <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\">111 </span><span class=\"r4\">\u2502   \u2502   \u2502   \u2502   \u2502   </span>                                                                       <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span> <span class=\"r1\">\u2771 </span>112 <span class=\"r4\">\u2502   \u2502   \u2502   \u2502   \u2502   </span><span class=\"r5\">return</span> PytorchModelAdapter(                                            <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\">113 </span><span class=\"r4\">\u2502   \u2502   \u2502   \u2502   \u2502   \u2502   </span>model_description=model_description, devices=devices               <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\">114 </span><span class=\"r4\">\u2502   \u2502   \u2502   \u2502   \u2502   </span>)                                                                      <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\">115 </span><span class=\"r4\">\u2502   \u2502   \u2502   \u2502   </span><span class=\"r5\">except</span> <span class=\"r7\">Exception</span> <span class=\"r5\">as</span> e:                                                     <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>                                                                                                  <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span> <span class=\"r4\">/usr/share/miniconda/envs/3d5bf57e23beeafd6ea2183cfc86de256c11395f850f34909b53a65354a43210/lib/p</span> <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>                                                                                                  <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\"> 35 </span><span class=\"r4\">\u2502   \u2502   \u2502   </span><span class=\"r5\">raise</span> <span class=\"r7\">ValueError</span>(<span class=\"r6\">&quot;No `pytorch_state_dict` weights found&quot;</span>)                      <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\"> 36 </span><span class=\"r4\">\u2502   \u2502   </span>                                                                                   <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\"> 37 </span><span class=\"r4\">\u2502   \u2502   </span>devices = get_devices(devices)                                                     <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span> <span class=\"r1\">\u2771 </span> 38 <span class=\"r4\">\u2502   \u2502   </span><span class=\"r7\">self</span>._model = load_torch_model(weights, load_state=<span class=\"r5\">True</span>, devices=devices)          <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\"> 39 </span><span class=\"r4\">\u2502   \u2502   </span><span class=\"r5\">if</span> mode == <span class=\"r6\">&quot;eval&quot;</span>:                                                                 <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\"> 40 </span><span class=\"r4\">\u2502   \u2502   \u2502   </span><span class=\"r7\">self</span>._model = <span class=\"r7\">self</span>._model.eval()                                               <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\"> 41 </span><span class=\"r4\">\u2502   \u2502   </span><span class=\"r5\">elif</span> mode == <span class=\"r6\">&quot;train&quot;</span>:                                                              <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>                                                                                                  <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span> <span class=\"r4\">/usr/share/miniconda/envs/3d5bf57e23beeafd6ea2183cfc86de256c11395f850f34909b53a65354a43210/lib/p</span> <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>                                                                                                  <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\">100 </span><span class=\"r4\">\u2502   </span>load_state: <span class=\"r7\">bool</span> = <span class=\"r5\">True</span>,                                                               <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\">101 </span><span class=\"r4\">\u2502   </span>devices: Optional[Sequence[Union[<span class=\"r7\">str</span>, torch.device]]] = <span class=\"r5\">None</span>,                          <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\">102 </span>) -&gt; nn.Module:                                                                            <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span> <span class=\"r1\">\u2771 </span>103 <span class=\"r4\">\u2502   </span>custom_callable = import_callable(                                                     <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\">104 </span><span class=\"r4\">\u2502   \u2502   </span>weight_spec.architecture,                                                          <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\">105 </span><span class=\"r4\">\u2502   \u2502   </span>sha256=(                                                                           <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\">106 </span><span class=\"r4\">\u2502   \u2502   \u2502   </span>weight_spec.architecture_sha256                                                <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>                                                                                                  <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span> <span class=\"r4\">/usr/share/miniconda/envs/3d5bf57e23beeafd6ea2183cfc86de256c11395f850f34909b53a65354a43210/lib/p</span> <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>                                                                                                  <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\"> 69 </span><span class=\"r4\">\u2502   \u2502   </span>module = importlib.import_module(node.module_name)                                 <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\"> 70 </span><span class=\"r4\">\u2502   \u2502   </span>c = <span class=\"r7\">getattr</span>(module, <span class=\"r7\">str</span>(node.callable_name))                                       <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\"> 71 </span><span class=\"r4\">\u2502   </span><span class=\"r5\">elif</span> <span class=\"r7\">isinstance</span>(node, ArchitectureFromLibraryDescr):                                   <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span> <span class=\"r1\">\u2771 </span> 72 <span class=\"r4\">\u2502   \u2502   </span>module = importlib.import_module(node.import_from)                                 <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\"> 73 </span><span class=\"r4\">\u2502   \u2502   </span>c = <span class=\"r7\">getattr</span>(module, <span class=\"r7\">str</span>(node.callable))                                            <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\"> 74 </span><span class=\"r4\">\u2502   </span><span class=\"r5\">elif</span> <span class=\"r7\">isinstance</span>(node, CallableFromFile):                                               <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\"> 75 </span><span class=\"r4\">\u2502   \u2502   </span>c = _import_from_file_impl(node.source_file, <span class=\"r7\">str</span>(node.callable_name), **kwargs)    <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>                                                                                                  <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span> <span class=\"r4\">/usr/share/miniconda/envs/3d5bf57e23beeafd6ea2183cfc86de256c11395f850f34909b53a65354a43210/lib/p</span> <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>                                                                                                  <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\">123 </span><span class=\"r4\">\u2502   \u2502   \u2502   </span><span class=\"r5\">if</span> character != <span class=\"r6\">&#x27;.&#x27;</span>:                                                           <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\">124 </span><span class=\"r4\">\u2502   \u2502   \u2502   \u2502   </span><span class=\"r5\">break</span>                                                                      <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\">125 </span><span class=\"r4\">\u2502   \u2502   \u2502   </span>level += <span class=\"r5\">1</span>                                                                     <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span> <span class=\"r1\">\u2771 </span>126 <span class=\"r4\">\u2502   </span><span class=\"r5\">return</span> _bootstrap._gcd_import(name[level:], package, level)                            <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\">127 </span>                                                                                           <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\">128 </span>                                                                                           <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span>   <span class=\"r4\">129 </span>_RELOADING = {}                                                                            <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span> in _gcd_import:1050                                                                              <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span> in _find_and_load:1027                                                                           <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span> in _find_and_load_unlocked:992                                                                   <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span> in _call_with_frames_removed:241                                                                 <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span> in _gcd_import:1050                                                                              <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span> in _find_and_load:1027                                                                           <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span> in _find_and_load_unlocked:992                                                                   <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span> in _call_with_frames_removed:241                                                                 <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span> in _gcd_import:1050                                                                              <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span> in _find_and_load:1027                                                                           <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2502</span> in _find_and_load_unlocked:1004                                                                  <span class=\"r1\">\u2502</span>\n<span class=\"r1\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</span>\n<span class=\"r11\">ModuleNotFoundError: </span>No module named <span class=\"r12\">&#x27;careamics&#x27;</span>\n</code></pre>\n</body>\n</html>\n"}], "warnings": [], "context": null, "recommended_env": {"name": "careamics", "channels": ["conda-forge", "nodefaults"], "dependencies": ["conda-forge::bioimageio.core", "pip", "python=3.10", "pytorch=2.4.0", "torchvision=0.19.0", {"pip": ["git+https://github.com/CAREamics/careamics.git"]}]}, "saved_conda_compare": "//github.com/careamics/careamics.git not found\n"}], "env": [["bioimageio.core", "0.9.4", "", ""], ["bioimageio.spec", "0.5.5.6", "", ""]], "saved_conda_list": "# packages in environment at /usr/share/miniconda/envs/3d5bf57e23beeafd6ea2183cfc86de256c11395f850f34909b53a65354a43210:\n#\n# Name                     Version          Build                      Channel\n_openmp_mutex              4.5              5_kmp_llvm                 conda-forge\nannotated-types            0.7.0            pyhd8ed1ab_1               conda-forge\nanyio                      4.11.0           pyhcf101f3_0               conda-forge\naom                        3.9.1            hac33072_0                 conda-forge\nbioimageio.core            0.9.4            pyhd8ed1ab_0               conda-forge\nbioimageio.spec            0.5.5.6          pyhd8ed1ab_0               conda-forge\nblosc                      1.21.6           he440d0b_1                 conda-forge\nbrunsli                    0.1              he3183e4_1                 conda-forge\nbzip2                      1.0.8            hda65f42_8                 conda-forge\nc-ares                     1.34.5           hb9d3cd8_0                 conda-forge\nc-blosc2                   2.19.1           h4cfbee9_0                 conda-forge\nca-certificates            2025.10.5        hbd8a1cb_0                 conda-forge\ncached-property            1.5.2            hd8ed1ab_1                 conda-forge\ncached_property            1.5.2            pyha770c72_1               conda-forge\ncertifi                    2025.10.5        pyhd8ed1ab_0               conda-forge\ncharls                     2.4.2            h59595ed_0                 conda-forge\ncolorama                   0.4.6            pyhd8ed1ab_1               conda-forge\ncpython                    3.10.19          py310hd8ed1ab_2            conda-forge\ndav1d                      1.2.1            hd590300_0                 conda-forge\ndistro                     1.9.0            pyhd8ed1ab_1               conda-forge\ndnspython                  2.8.0            pyhcf101f3_0               conda-forge\nemail-validator            2.3.0            pyhd8ed1ab_0               conda-forge\nemail_validator            2.3.0            hd8ed1ab_0                 conda-forge\nexceptiongroup             1.3.0            pyhd8ed1ab_0               conda-forge\nfilelock                   3.20.0           pyhd8ed1ab_0               conda-forge\nfsspec                     2025.9.0         pyhd8ed1ab_0               conda-forge\ngenericache                0.5.2            pyhd8ed1ab_0               conda-forge\ngiflib                     5.2.2            hd590300_0                 conda-forge\ngmp                        6.3.0            hac33072_2                 conda-forge\ngmpy2                      2.2.1            py310h63ebcad_1            conda-forge\nh11                        0.16.0           pyhd8ed1ab_0               conda-forge\nh2                         4.3.0            pyhcf101f3_0               conda-forge\nh5py                       3.15.1           nompi_py310h4aa865e_100    conda-forge\nhdf5                       1.14.6           nompi_h6e4c0c1_103         conda-forge\nhpack                      4.1.0            pyhd8ed1ab_0               conda-forge\nhttpcore                   1.0.9            pyh29332c3_0               conda-forge\nhttpx                      0.28.1           pyhd8ed1ab_0               conda-forge\nhyperframe                 6.1.0            pyhd8ed1ab_0               conda-forge\nidna                       3.11             pyhd8ed1ab_0               conda-forge\nimagecodecs                2025.3.30        py310h4eb8eaf_2            conda-forge\nimageio                    2.37.0           pyhfb79c49_0               conda-forge\nimportlib-metadata         8.7.0            pyhe01879c_1               conda-forge\njinja2                     3.1.6            pyhd8ed1ab_0               conda-forge\njxrlib                     1.1              hd590300_3                 conda-forge\nkeyutils                   1.6.3            hb9d3cd8_0                 conda-forge\nkrb5                       1.21.3           h659f571_0                 conda-forge\nlcms2                      2.17             h717163a_0                 conda-forge\nld_impl_linux-64           2.44             ha97dd6f_2                 conda-forge\nlerc                       4.0.0            h0aef613_1                 conda-forge\nlibabseil                  20240116.2       cxx17_he02047a_1           conda-forge\nlibaec                     1.1.4            h3f801dc_0                 conda-forge\nlibavif16                  1.3.0            h6395336_2                 conda-forge\nlibblas                    3.9.0            37_h4a7cf45_openblas       conda-forge\nlibbrotlicommon            1.1.0            hb03c661_4                 conda-forge\nlibbrotlidec               1.1.0            hb03c661_4                 conda-forge\nlibbrotlienc               1.1.0            hb03c661_4                 conda-forge\nlibcblas                   3.9.0            37_h0358290_openblas       conda-forge\nlibcurl                    8.16.0           h4e3cde8_0                 conda-forge\nlibdeflate                 1.24             h86f0d12_0                 conda-forge\nlibedit                    3.1.20250104     pl5321h7949ede_0           conda-forge\nlibev                      4.33             hd590300_2                 conda-forge\nlibexpat                   2.7.1            hecca717_0                 conda-forge\nlibffi                     3.5.2            h9ec8514_0                 conda-forge\nlibfreetype                2.14.1           ha770c72_0                 conda-forge\nlibfreetype6               2.14.1           h73754d4_0                 conda-forge\nlibgcc                     15.2.0           h767d61c_7                 conda-forge\nlibgcc-ng                  15.2.0           h69a702a_7                 conda-forge\nlibgfortran                15.2.0           h69a702a_7                 conda-forge\nlibgfortran5               15.2.0           hcd61629_7                 conda-forge\nlibhwloc                   2.12.1           default_h7f8ec31_1002      conda-forge\nlibhwy                     1.3.0            h4c17acf_1                 conda-forge\nlibiconv                   1.18             h3b78370_2                 conda-forge\nlibjpeg-turbo              3.1.0            hb9d3cd8_0                 conda-forge\nlibjxl                     0.11.1           h6cb5226_4                 conda-forge\nliblapack                  3.9.0            37_h47877c9_openblas       conda-forge\nliblzma                    5.8.1            hb9d3cd8_2                 conda-forge\nlibnghttp2                 1.67.0           had1ee68_0                 conda-forge\nlibnsl                     2.0.1            hb9d3cd8_1                 conda-forge\nlibopenblas                0.3.30           pthreads_h94d23a6_2        conda-forge\nlibpng                     1.6.50           h421ea60_1                 conda-forge\nlibprotobuf                4.25.3           hd5b35b9_1                 conda-forge\nlibsqlite                  3.50.4           h0c1763c_0                 conda-forge\nlibssh2                    1.11.1           hcf80075_0                 conda-forge\nlibstdcxx                  15.2.0           h8f9b012_7                 conda-forge\nlibstdcxx-ng               15.2.0           h4852527_7                 conda-forge\nlibtiff                    4.7.1            h8261f1e_0                 conda-forge\nlibtorch                   2.4.0            cpu_mkl_h85b1651_101       conda-forge\nlibuuid                    2.41.2           he9a06e4_0                 conda-forge\nlibuv                      1.51.0           hb03c661_1                 conda-forge\nlibwebp-base               1.6.0            hd42ef1d_0                 conda-forge\nlibxcb                     1.17.0           h8a09558_0                 conda-forge\nlibxcrypt                  4.4.36           hd590300_1                 conda-forge\nlibxml2                    2.15.1           h031cc0b_0                 conda-forge\nlibxml2-16                 2.15.1           hf2a90c1_0                 conda-forge\nlibzlib                    1.3.1            hb9d3cd8_2                 conda-forge\nlibzopfli                  1.0.3            h9c3ff4c_0                 conda-forge\nllvm-openmp                21.1.4           h4922eb0_0                 conda-forge\nloguru                     0.7.3            pyh707e725_0               conda-forge\nlz4-c                      1.10.0           h5888daf_1                 conda-forge\nmarkdown                   3.9              pyhd8ed1ab_0               conda-forge\nmarkdown-it-py             4.0.0            pyhd8ed1ab_0               conda-forge\nmarkupsafe                 3.0.3            py310h3406613_0            conda-forge\nmdurl                      0.1.2            pyhd8ed1ab_1               conda-forge\nmkl                        2023.2.0         ha770c72_50498             conda-forge\nmpc                        1.3.1            h24ddda3_1                 conda-forge\nmpfr                       4.2.1            h90cbb55_3                 conda-forge\nmpmath                     1.3.0            pyhd8ed1ab_1               conda-forge\nncurses                    6.5              h2d0b736_3                 conda-forge\nnetworkx                   3.4.2            pyh267e887_2               conda-forge\nnumpy                      2.2.6            py310hefbff90_0            conda-forge\nopenjpeg                   2.5.4            h55fea9a_0                 conda-forge\nopenssl                    3.5.4            h26f9b46_0                 conda-forge\npackaging                  25.0             pyh29332c3_1               conda-forge\npandas                     2.3.3            py310h0158d43_1            conda-forge\npillow                     11.3.0           py310h6557065_3            conda-forge\npip                        25.2             pyh8b19718_0               conda-forge\nplatformdirs               4.5.0            pyhcf101f3_0               conda-forge\npthread-stubs              0.4              hb9d3cd8_1002              conda-forge\npydantic                   2.11.10          pyh3cfb1c2_0               conda-forge\npydantic-core              2.33.2           py310hbcd0ec0_0            conda-forge\npydantic-settings          2.11.0           pyh3cfb1c2_0               conda-forge\npygments                   2.19.2           pyhd8ed1ab_0               conda-forge\npython                     3.10.19          h3c07f61_2_cpython         conda-forge\npython-dateutil            2.9.0.post0      pyhe01879c_2               conda-forge\npython-dotenv              1.1.1            pyhe01879c_0               conda-forge\npython-tzdata              2025.2           pyhd8ed1ab_0               conda-forge\npython_abi                 3.10             8_cp310                    conda-forge\npytorch                    2.4.0            cpu_mkl_py310h0b5cf2a_101  conda-forge\npytz                       2025.2           pyhd8ed1ab_0               conda-forge\nrav1e                      0.7.1            h8fae777_3                 conda-forge\nreadline                   8.2              h8c095d6_2                 conda-forge\nrich                       14.2.0           pyhcf101f3_0               conda-forge\nruyaml                     0.91.0           pyhd8ed1ab_1               conda-forge\nscipy                      1.15.2           py310h1d65ade_0            conda-forge\nsetuptools                 80.9.0           pyhff2d567_0               conda-forge\nsix                        1.17.0           pyhe01879c_1               conda-forge\nsleef                      3.9.0            ha0421bc_0                 conda-forge\nsnappy                     1.2.2            h03e3b7b_0                 conda-forge\nsniffio                    1.3.1            pyhd8ed1ab_1               conda-forge\nsvt-av1                    3.1.2            hecca717_0                 conda-forge\nsympy                      1.14.0           pyh2585a3b_105             conda-forge\ntbb                        2021.13.0        hb60516a_3                 conda-forge\ntifffile                   2025.5.10        pyhd8ed1ab_0               conda-forge\ntk                         8.6.13           noxft_hd72426e_102         conda-forge\ntorchvision                0.19.0           cpu_py310hd9679db_0        conda-forge\ntqdm                       4.67.1           pyhd8ed1ab_1               conda-forge\ntyping-extensions          4.15.0           h396c80c_0                 conda-forge\ntyping-inspection          0.4.2            pyhd8ed1ab_0               conda-forge\ntyping_extensions          4.15.0           pyhcf101f3_0               conda-forge\ntzdata                     2025b            h78e105d_0                 conda-forge\nwheel                      0.45.1           pyhd8ed1ab_1               conda-forge\nxarray                     2025.1.2         pyhd8ed1ab_0               conda-forge\nxorg-libxau                1.0.12           hb9d3cd8_0                 conda-forge\nxorg-libxdmcp              1.1.5            hb9d3cd8_0                 conda-forge\nzfp                        1.0.1            h909a3a2_3                 conda-forge\nzipp                       3.23.0           pyhd8ed1ab_0               conda-forge\nzlib-ng                    2.2.5            hde8ca8f_0                 conda-forge\nzstd                       1.5.7            hb8e6e7a_2                 conda-forge\n"}, "badge": null, "links": []}