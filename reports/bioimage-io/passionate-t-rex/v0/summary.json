{
    "rdf_content": {
        "authors": [
            {
                "affiliation": "EMBL",
                "name": "Adrian Wolny"
            },
            {
                "affiliation": "Heidelberg University",
                "name": "Lorenzo Cerrone"
            }
        ],
        "cite": [
            {
                "text": "Wolny, Cerrone et al. Accurate and Versatile 3D Segmentation of Plant Tissues at Cellular Resolution. eLife 2020.",
                "url": "https://elifesciences.org/articles/57613"
            }
        ],
        "config": {
            "bioimageio": {
                "nickname": "passionate-t-rex",
                "nickname_icon": "🦖",
                "thumbnails": {
                    "ilastik_pred.png": "ilastik_pred.thumbnail.png",
                    "ilastik_raw.png": "ilastik_raw.thumbnail.png",
                    "ilastik_sneak.png": "ilastik_sneak.thumbnail.png"
                }
            }
        },
        "covers": [
            "ilastik_raw.png",
            "ilastik_sneak.png",
            "ilastik_pred.png"
        ],
        "description": "A 3d U-Net trained to predict the cell boundaries in confocal stacks of Arabidopsis ovules. Voxel size: (0.235, 0.150, 0.150) microns ZYX",
        "documentation": "doc.md",
        "format_version": "0.4.10",
        "id": "10.5281/zenodo.6334583/7805434",
        "id_emoji": "🦖",
        "inputs": [
            {
                "axes": "bczyx",
                "data_range": [
                    null,
                    null
                ],
                "data_type": "float32",
                "name": "input0",
                "shape": [
                    1,
                    1,
                    100,
                    128,
                    128
                ]
            }
        ],
        "license": "MIT",
        "links": [
            "imjoy/BioImageIO-Packager",
            "ilastik/ilastik"
        ],
        "maintainers": [
            {
                "github_user": "wolny",
                "name": "Adrian Wolny"
            }
        ],
        "name": "3D UNet Arabidopsis Ovules",
        "outputs": [
            {
                "axes": "bczyx",
                "data_range": [
                    null,
                    null
                ],
                "data_type": "float32",
                "name": "output0",
                "shape": [
                    1,
                    1,
                    100,
                    128,
                    128
                ]
            }
        ],
        "tags": [
            "3d",
            "torchscript",
            "ilastik",
            "unet",
            "plant",
            "plantseg",
            "cell-membrane",
            "ovules",
            "tissue",
            "semantic-segmentation",
            "arabidopsis",
            "deepimagej",
            "pytorch",
            "fluorescence-light-microscopy",
            "ilastik"
        ],
        "test_inputs": [
            "test_input.npy"
        ],
        "test_outputs": [
            "test_output.npy"
        ],
        "timestamp": "2023-04-06T12:43:33.436336",
        "type": "model",
        "uploader": {
            "email": "bioimageiobot@gmail.com"
        },
        "version": 1,
        "version_number": 1,
        "weights": {
            "pytorch_state_dict": {
                "architecture": "unet.py:UNet3D",
                "architecture_sha256": "2da9f7149e144b63fee715fb8fe5154e96bf9aa230d176c91e923d528ef0c4e1",
                "kwargs": {
                    "f_maps": 32,
                    "final_sigmoid": true,
                    "in_channels": 1,
                    "is_segmentation": true,
                    "layer_order": "gcr",
                    "num_groups": 8,
                    "out_channels": 1
                },
                "sha256": "0f11cbd0608d12ef161892586408c6ec1a074f1f27ea6afef9d1ceece3dd3c1f",
                "source": "unet3d-arabidopsis-ovules-confocal-ds2x.pytorch"
            },
            "torchscript": {
                "pytorch_version": "2.0.0",
                "sha256": "09be0d33ca00fb8137cca507a69f5e95719a159ada0d709286ae9dc183093aaf",
                "source": "torchscript_tracing.pt"
            }
        }
    },
    "rdf_yaml_sha256": "e8a5976a6dda10f860aeda169617d685d1a994623861d755c27be2cd904dcac1",
    "scores": {
        "core_compatibility": 0.0,
        "metadata_completeness": 0.0,
        "metadata_format": 0.0,
        "overall_compatibility": 0.0,
        "overall_partner_tool_compatibility": 0.0,
        "tool_compatibility": {},
        "tool_compatibility_version_specific": {}
    },
    "status": "failed",
    "tests": {
        "biapy": {
            "3.6.5": {
                "badge": null,
                "details": "[all] pytorch_state_dict not found in model RDF or inputs != 1\n",
                "error": "[all] pytorch_state_dict not found in model RDF or inputs != 1\n",
                "links": [
                    "biapy/biapy"
                ],
                "score": 0.0,
                "status": "failed"
            }
        },
        "bioimageio.core": {
            "0.9.3": {
                "badge": null,
                "details": {
                    "details": [
                        {
                            "context": null,
                            "errors": [
                                {
                                    "loc": [],
                                    "msg": "test command 'conda run -n 6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8 bioimageio test https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files/rdf.yaml?version=v0 --summary-path=/tmp/tmpxsadxk1u/pytorch_state_dict/summary.json --determinism=full --stop-early' did not produce a summary file at /tmp/tmpxsadxk1u/pytorch_state_dict/summary.json",
                                    "traceback_html": "",
                                    "traceback_md": "",
                                    "type": "bioimageio cli",
                                    "with_traceback": false
                                }
                            ],
                            "loc": [],
                            "name": "run 'bioimageio test'",
                            "recommended_env": null,
                            "saved_conda_compare": null,
                            "status": "failed",
                            "warnings": []
                        },
                        {
                            "context": null,
                            "errors": [
                                {
                                    "loc": [],
                                    "msg": "test command 'conda run -n 049c295b5f4216d89ea5f935696492c778e1691b3f2a054934e96c88ac46aad7 bioimageio test https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files/rdf.yaml?version=v0 --summary-path=/tmp/tmpxsadxk1u/torchscript/summary.json --determinism=full --stop-early' did not produce a summary file at /tmp/tmpxsadxk1u/torchscript/summary.json",
                                    "traceback_html": "",
                                    "traceback_md": "",
                                    "type": "bioimageio cli",
                                    "with_traceback": false
                                }
                            ],
                            "loc": [],
                            "name": "run 'bioimageio test'",
                            "recommended_env": null,
                            "saved_conda_compare": null,
                            "status": "failed",
                            "warnings": []
                        }
                    ],
                    "env": [],
                    "format_version": "unknown",
                    "id": null,
                    "metadata_completeness": 0.0,
                    "name": "calling bioimageio test command",
                    "saved_conda_list": "# packages in environment at /usr/share/miniconda/envs/core:\n#\n# Name                     Version          Build                    Channel\n_libgcc_mutex              0.1              conda_forge              conda-forge\n_openmp_mutex              4.5              2_gnu                    conda-forge\nannotated-types            0.7.0            pyhd8ed1ab_1             conda-forge\nanyio                      4.11.0           pyhcf101f3_0             conda-forge\naom                        3.9.1            hac33072_0               conda-forge\nbackoffice                 0.1.0            pypi_0                   pypi\nbioimageio.core            0.9.3            pyhd8ed1ab_0             conda-forge\nbioimageio.spec            0.5.5.5          pyhd8ed1ab_0             conda-forge\nblosc                      1.21.6           he440d0b_1               conda-forge\nbrunsli                    0.1              he3183e4_1               conda-forge\nbzip2                      1.0.8            hda65f42_8               conda-forge\nc-ares                     1.34.5           hb9d3cd8_0               conda-forge\nc-blosc2                   2.21.3           h4cfbee9_0               conda-forge\nca-certificates            2025.10.5        hbd8a1cb_0               conda-forge\ncached-property            1.5.2            hd8ed1ab_1               conda-forge\ncached_property            1.5.2            pyha770c72_1             conda-forge\ncertifi                    2025.10.5        pyhd8ed1ab_0             conda-forge\ncffi                       2.0.0            pypi_0                   pypi\ncharls                     2.4.2            h59595ed_0               conda-forge\ncharset-normalizer         3.4.3            pypi_0                   pypi\ncolorama                   0.4.6            pyhd8ed1ab_1             conda-forge\ncryptography               46.0.2           pypi_0                   pypi\ndav1d                      1.2.1            hd590300_0               conda-forge\ndistro                     1.9.0            pyhd8ed1ab_1             conda-forge\ndnspython                  2.8.0            pyhcf101f3_0             conda-forge\nemail-validator            2.3.0            pyhd8ed1ab_0             conda-forge\nemail_validator            2.3.0            hd8ed1ab_0               conda-forge\nexceptiongroup             1.3.0            pyhd8ed1ab_0             conda-forge\nfilelock                   3.20.0           pyhd8ed1ab_0             conda-forge\ngenericache                0.5.2            pyhd8ed1ab_0             conda-forge\ngiflib                     5.2.2            hd590300_0               conda-forge\nh11                        0.16.0           pyhd8ed1ab_0             conda-forge\nh2                         4.3.0            pyhcf101f3_0             conda-forge\nh5py                       3.14.0           nompi_py313h253c126_101  conda-forge\nhdf5                       1.14.6           nompi_h6e4c0c1_103       conda-forge\nhpack                      4.1.0            pyhd8ed1ab_0             conda-forge\nhttpcore                   1.0.9            pyh29332c3_0             conda-forge\nhttpx                      0.28.1           pyhd8ed1ab_0             conda-forge\nhyperframe                 6.1.0            pyhd8ed1ab_0             conda-forge\nidna                       3.10             pyhd8ed1ab_1             conda-forge\nimagecodecs                2025.8.2         py313h718aa22_4          conda-forge\nimageio                    2.37.0           pyhfb79c49_0             conda-forge\nimportlib-metadata         8.7.0            pyhe01879c_1             conda-forge\njxrlib                     1.1              hd590300_3               conda-forge\nkeyutils                   1.6.3            hb9d3cd8_0               conda-forge\nkrb5                       1.21.3           h659f571_0               conda-forge\nlcms2                      2.17             h717163a_0               conda-forge\nld_impl_linux-64           2.44             ha97dd6f_2               conda-forge\nlerc                       4.0.0            h0aef613_1               conda-forge\nlibaec                     1.1.4            h3f801dc_0               conda-forge\nlibavif16                  1.3.0            h6395336_2               conda-forge\nlibblas                    3.9.0            36_h4a7cf45_openblas     conda-forge\nlibbrotlicommon            1.1.0            hb03c661_4               conda-forge\nlibbrotlidec               1.1.0            hb03c661_4               conda-forge\nlibbrotlienc               1.1.0            hb03c661_4               conda-forge\nlibcblas                   3.9.0            36_h0358290_openblas     conda-forge\nlibcurl                    8.14.1           h332b0f4_0               conda-forge\nlibdeflate                 1.24             h86f0d12_0               conda-forge\nlibedit                    3.1.20250104     pl5321h7949ede_0         conda-forge\nlibev                      4.33             hd590300_2               conda-forge\nlibexpat                   2.7.1            hecca717_0               conda-forge\nlibffi                     3.4.6            h2dba641_1               conda-forge\nlibfreetype                2.14.1           ha770c72_0               conda-forge\nlibfreetype6               2.14.1           h73754d4_0               conda-forge\nlibgcc                     15.2.0           h767d61c_7               conda-forge\nlibgcc-ng                  15.2.0           h69a702a_7               conda-forge\nlibgfortran                15.2.0           h69a702a_7               conda-forge\nlibgfortran5               15.2.0           hcd61629_7               conda-forge\nlibgomp                    15.2.0           h767d61c_7               conda-forge\nlibhwy                     1.3.0            h4c17acf_1               conda-forge\nlibjpeg-turbo              3.1.0            hb9d3cd8_0               conda-forge\nlibjxl                     0.11.1           h6cb5226_4               conda-forge\nliblapack                  3.9.0            36_h47877c9_openblas     conda-forge\nliblzma                    5.8.1            hb9d3cd8_2               conda-forge\nlibmpdec                   4.0.0            hb9d3cd8_0               conda-forge\nlibnghttp2                 1.67.0           had1ee68_0               conda-forge\nlibopenblas                0.3.30           pthreads_h94d23a6_2      conda-forge\nlibpng                     1.6.50           h421ea60_1               conda-forge\nlibsqlite                  3.50.4           h0c1763c_0               conda-forge\nlibssh2                    1.11.1           hcf80075_0               conda-forge\nlibstdcxx                  15.2.0           h8f9b012_7               conda-forge\nlibstdcxx-ng               15.2.0           h4852527_7               conda-forge\nlibtiff                    4.7.1            h8261f1e_0               conda-forge\nlibuuid                    2.41.2           he9a06e4_0               conda-forge\nlibwebp-base               1.6.0            hd42ef1d_0               conda-forge\nlibxcb                     1.17.0           h8a09558_0               conda-forge\nlibzlib                    1.3.1            hb9d3cd8_2               conda-forge\nlibzopfli                  1.0.3            h9c3ff4c_0               conda-forge\nloguru                     0.7.3            pyh707e725_0             conda-forge\nlz4-c                      1.10.0           h5888daf_1               conda-forge\nmarkdown                   3.9              pyhd8ed1ab_0             conda-forge\nmarkdown-it-py             4.0.0            pyhd8ed1ab_0             conda-forge\nmdurl                      0.1.2            pyhd8ed1ab_1             conda-forge\nncurses                    6.5              h2d0b736_3               conda-forge\nnumpy                      2.3.3            py313hf6604e3_0          conda-forge\nopenjpeg                   2.5.4            h55fea9a_0               conda-forge\nopenssl                    3.5.4            h26f9b46_0               conda-forge\npackaging                  25.0             pyh29332c3_1             conda-forge\npandas                     2.3.3            py313h08cd8bf_1          conda-forge\npillow                     11.3.0           py313ha492abd_3          conda-forge\npip                        25.2             pyh145f28c_0             conda-forge\nplatformdirs               4.5.0            pyhcf101f3_0             conda-forge\npthread-stubs              0.4              hb9d3cd8_1002            conda-forge\npycparser                  2.23             pypi_0                   pypi\npydantic                   2.11.10          pyh3cfb1c2_0             conda-forge\npydantic-core              2.33.2           py313h4b2b08d_0          conda-forge\npydantic-settings          2.11.0           pyh3cfb1c2_0             conda-forge\npygithub                   2.8.1            pypi_0                   pypi\npygments                   2.19.2           pyhd8ed1ab_0             conda-forge\npyjwt                      2.10.1           pypi_0                   pypi\npynacl                     1.6.0            pypi_0                   pypi\npython                     3.13.7           h2b335a9_100_cp313       conda-forge\npython-dateutil            2.9.0.post0      pyhe01879c_2             conda-forge\npython-dotenv              1.1.1            pyhe01879c_0             conda-forge\npython-tzdata              2025.2           pyhd8ed1ab_0             conda-forge\npython_abi                 3.13             8_cp313                  conda-forge\npytz                       2025.2           pyhd8ed1ab_0             conda-forge\nrav1e                      0.7.1            h8fae777_3               conda-forge\nreadline                   8.2              h8c095d6_2               conda-forge\nrequests                   2.32.5           pypi_0                   pypi\nrich                       14.1.0           pyhe01879c_0             conda-forge\nruyaml                     0.91.0           pyhd8ed1ab_1             conda-forge\nscipy                      1.16.2           py313h11c21cd_0          conda-forge\nsetuptools                 80.9.0           pyhff2d567_0             conda-forge\nsix                        1.17.0           pyhe01879c_1             conda-forge\nsnappy                     1.2.2            h03e3b7b_0               conda-forge\nsniffio                    1.3.1            pyhd8ed1ab_1             conda-forge\nsvt-av1                    3.1.2            hecca717_0               conda-forge\ntifffile                   2025.10.4        pyhd8ed1ab_0             conda-forge\ntk                         8.6.13           noxft_hd72426e_102       conda-forge\ntqdm                       4.67.1           pyhd8ed1ab_1             conda-forge\ntyping-extensions          4.15.0           h396c80c_0               conda-forge\ntyping-inspection          0.4.2            pyhd8ed1ab_0             conda-forge\ntyping_extensions          4.15.0           pyhcf101f3_0             conda-forge\ntzdata                     2025b            h78e105d_0               conda-forge\nurllib3                    2.5.0            pypi_0                   pypi\nxarray                     2025.1.2         pyhd8ed1ab_0             conda-forge\nxorg-libxau                1.0.12           hb9d3cd8_0               conda-forge\nxorg-libxdmcp              1.1.5            hb9d3cd8_0               conda-forge\nzfp                        1.0.1            h909a3a2_3               conda-forge\nzipp                       3.23.0           pyhd8ed1ab_0             conda-forge\nzlib-ng                    2.2.5            hde8ca8f_0               conda-forge\nzstd                       1.5.7            hb8e6e7a_2               conda-forge\n",
                    "source_name": "https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files/rdf.yaml?version=v0",
                    "status": "failed",
                    "type": "unknown"
                },
                "error": "test command 'conda run -n 6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8 bioimageio test https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files/rdf.yaml?version=v0 --summary-path=/tmp/tmpxsadxk1u/pytorch_state_dict/summary.json --determinism=full --stop-early' did not produce a summary file at /tmp/tmpxsadxk1u/pytorch_state_dict/summary.json\n\ntest command 'conda run -n 049c295b5f4216d89ea5f935696492c778e1691b3f2a054934e96c88ac46aad7 bioimageio test https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files/rdf.yaml?version=v0 --summary-path=/tmp/tmpxsadxk1u/torchscript/summary.json --determinism=full --stop-early' did not produce a summary file at /tmp/tmpxsadxk1u/torchscript/summary.json",
                "links": [],
                "score": 0.0,
                "status": "failed"
            },
            "0.9.4": {
                "badge": null,
                "details": {
                    "details": [
                        {
                            "context": {
                                "file_name": "rdf.yaml",
                                "known_files": {
                                    "https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files/doc.md?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files/ilastik_pred.png?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files/ilastik_raw.png?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files/ilastik_sneak.png?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files/test_input.npy?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files/torchscript_tracing.pt?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files/unet.py?version=v0": null,
                                    "torchscript_tracing.pt": "09be0d33ca00fb8137cca507a69f5e95719a159ada0d709286ae9dc183093aaf",
                                    "unet3d-arabidopsis-ovules-confocal-ds2x.pytorch": "0f11cbd0608d12ef161892586408c6ec1a074f1f27ea6afef9d1ceece3dd3c1f"
                                },
                                "original_source_name": null,
                                "perform_io_checks": true,
                                "root": "https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files?version=v0",
                                "update_hashes": false
                            },
                            "errors": [],
                            "loc": [],
                            "name": "Successfully created `ModelDescr` instance.",
                            "recommended_env": null,
                            "saved_conda_compare": null,
                            "status": "passed",
                            "warnings": []
                        },
                        {
                            "context": {
                                "file_name": "rdf.yaml",
                                "known_files": {
                                    "https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files/doc.md?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files/ilastik_pred.png?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files/ilastik_raw.png?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files/ilastik_sneak.png?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files/test_input.npy?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files/test_output.npy?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files/torchscript_tracing.pt?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files/unet.py?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files/unet3d-arabidopsis-ovules-confocal-ds2x.pytorch?version=v0": null,
                                    "torchscript_tracing.pt": "09be0d33ca00fb8137cca507a69f5e95719a159ada0d709286ae9dc183093aaf",
                                    "unet3d-arabidopsis-ovules-confocal-ds2x.pytorch": "0f11cbd0608d12ef161892586408c6ec1a074f1f27ea6afef9d1ceece3dd3c1f"
                                },
                                "original_source_name": null,
                                "perform_io_checks": true,
                                "root": "https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files?version=v0",
                                "update_hashes": false
                            },
                            "errors": [],
                            "loc": [],
                            "name": "bioimageio.spec format validation model 0.4.10",
                            "recommended_env": null,
                            "saved_conda_compare": null,
                            "status": "passed",
                            "warnings": []
                        },
                        {
                            "context": null,
                            "errors": [
                                {
                                    "loc": [
                                        "weights",
                                        "pytorch_state_dict"
                                    ],
                                    "msg": "'unet_2da9f7149e144b63fee715fb8fe5154e96bf9aa230d176c91e923d528ef0c4e1'",
                                    "traceback_html": "<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<style>\n.r1 {color: #800000; text-decoration-color: #800000}\n.r2 {color: #800000; text-decoration-color: #800000; font-weight: bold}\n.r3 {color: #bf7f7f; text-decoration-color: #bf7f7f; font-weight: bold}\n.r4 {color: #7f7f7f; text-decoration-color: #7f7f7f}\n.r5 {color: #0000ff; text-decoration-color: #0000ff}\n.r6 {color: #ff00ff; text-decoration-color: #ff00ff}\n.r7 {color: #808000; text-decoration-color: #808000}\n.r8 {color: #ff0000; text-decoration-color: #ff0000; font-weight: bold}\n.r9 {color: #800080; text-decoration-color: #800080; font-weight: bold}\n.r10 {font-weight: bold}\n.r11 {color: #008000; text-decoration-color: #008000}\n.r12 {font-style: italic}\n.r13 {color: #00ffff; text-decoration-color: #00ffff}\n.r14 {color: #808080; text-decoration-color: #808080}\n.r15 {color: #00ffff; text-decoration-color: #00ffff; text-decoration: underline}\nbody {\n    color: #000000;\n    background-color: #ffffff;\n}\n</style>\n</head>\n<body>\n    <pre style=\"font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><code style=\"font-family:inherit\"><span class=\"r1\">╭─────────────────────────────── </span><span class=\"r2\">Traceback </span><span class=\"r3\">(most recent call last)</span><span class=\"r1\"> ────────────────────────────────╮</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">108 </span><span class=\"r4\">│   </span>module = sys.modules.get(module_name)                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">109 </span><span class=\"r4\">│   </span><span class=\"r5\">if</span> module <span class=\"r6\">is</span> <span class=\"r5\">None</span>:                                                                     <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">110 </span><span class=\"r4\">│   │   </span><span class=\"r5\">try</span>:                                                                               <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span>111 <span class=\"r4\">│   │   │   </span>tmp_dir = TemporaryDirectory(ignore_cleanup_errors=<span class=\"r5\">True</span>)                       <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">112 </span><span class=\"r4\">│   │   │   </span>module_path = Path(tmp_dir.name) / module_name                                 <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">113 </span><span class=\"r4\">│   │   │   </span><span class=\"r5\">if</span> reader.original_file_name.endswith(<span class=\"r7\">&quot;.zip&quot;</span>) <span class=\"r6\">or</span> is_zipfile(reader):           <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">114 </span><span class=\"r4\">│   │   │   │   </span>module_path.mkdir()                                                        <span class=\"r1\">│</span>\n<span class=\"r1\">╰──────────────────────────────────────────────────────────────────────────────────────────────────╯</span>\n<span class=\"r8\">TypeError: </span><span class=\"r9\">__init__</span><span class=\"r10\">()</span> got an unexpected keyword argument <span class=\"r11\">&#x27;ignore_cleanup_errors&#x27;</span>\n\n<span class=\"r12\">During handling of the above exception, another exception occurred:</span>\n\n<span class=\"r1\">╭─────────────────────────────── </span><span class=\"r2\">Traceback </span><span class=\"r3\">(most recent call last)</span><span class=\"r1\"> ────────────────────────────────╮</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">642 </span><span class=\"r4\">│   │   </span>inputs = get_test_inputs(model)                                                    <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">643 </span><span class=\"r4\">│   │   </span>expected = get_test_outputs(model)                                                 <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">644 </span><span class=\"r4\">│   │   </span>                                                                                   <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span>645 <span class=\"r4\">│   │   </span><span class=\"r5\">with</span> create_prediction_pipeline(                                                   <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">646 </span><span class=\"r4\">│   │   │   </span>bioimageio_model=model, devices=devices, weight_format=weight_format           <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">647 </span><span class=\"r4\">│   │   </span>) <span class=\"r5\">as</span> prediction_pipeline:                                                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">648 </span><span class=\"r4\">│   │   │   </span>results = prediction_pipeline.predict_sample_without_blocking(inputs)          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">368 </span><span class=\"r4\">│   │   │   </span><span class=\"r7\">f&quot;deprecated create_prediction_pipeline kwargs: {</span><span class=\"r13\">set</span>(deprecated_kwargs)<span class=\"r7\">}&quot;</span>      <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">369 </span><span class=\"r4\">│   │   </span>)                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">370 </span><span class=\"r4\">│   </span>                                                                                       <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span>371 <span class=\"r4\">│   </span>model_adapter = model_adapter <span class=\"r6\">or</span> create_model_adapter(                                 <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">372 </span><span class=\"r4\">│   │   </span>model_description=bioimageio_model,                                                <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">373 </span><span class=\"r4\">│   │   </span>devices=devices,                                                                   <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">374 </span><span class=\"r4\">│   │   </span>weight_format_priority_order=weights_format <span class=\"r6\">and</span> (weights_format,),                 <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">166 </span><span class=\"r4\">│   │   </span><span class=\"r5\">assert</span> errors                                                                      <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">167 </span><span class=\"r4\">│   │   </span><span class=\"r5\">if</span> <span class=\"r13\">len</span>(weight_format_priority_order) == <span class=\"r5\">1</span>:                                         <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">168 </span><span class=\"r4\">│   │   │   </span><span class=\"r5\">assert</span> <span class=\"r13\">len</span>(errors) == <span class=\"r5\">1</span>                                                        <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span>169 <span class=\"r4\">│   │   │   </span><span class=\"r5\">raise</span> errors[<span class=\"r5\">0</span>]                                                                <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">170 </span><span class=\"r4\">│   │   </span>                                                                                   <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">171 </span><span class=\"r4\">│   │   </span><span class=\"r5\">else</span>:                                                                              <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">172 </span><span class=\"r4\">│   │   │   </span>msg = (                                                                        <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">109 </span><span class=\"r4\">│   │   │   │   </span><span class=\"r5\">try</span>:                                                                       <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">110 </span><span class=\"r4\">│   │   │   │   │   </span><span class=\"r5\">from</span><span class=\"r14\"> </span><span class=\"r15\">.pytorch_backend</span><span class=\"r14\"> </span><span class=\"r5\">import</span> PytorchModelAdapter                       <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">111 </span><span class=\"r4\">│   │   │   │   │   </span>                                                                       <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span>112 <span class=\"r4\">│   │   │   │   │   </span><span class=\"r5\">return</span> PytorchModelAdapter(                                            <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">113 </span><span class=\"r4\">│   │   │   │   │   │   </span>model_description=model_description, devices=devices               <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">114 </span><span class=\"r4\">│   │   │   │   │   </span>)                                                                      <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">115 </span><span class=\"r4\">│   │   │   │   </span><span class=\"r5\">except</span> <span class=\"r13\">Exception</span> <span class=\"r5\">as</span> e:                                                     <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 35 </span><span class=\"r4\">│   │   │   </span><span class=\"r5\">raise</span> <span class=\"r13\">ValueError</span>(<span class=\"r7\">&quot;No `pytorch_state_dict` weights found&quot;</span>)                      <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 36 </span><span class=\"r4\">│   │   </span>                                                                                   <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 37 </span><span class=\"r4\">│   │   </span>devices = get_devices(devices)                                                     <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span> 38 <span class=\"r4\">│   │   </span><span class=\"r13\">self</span>._model = load_torch_model(weights, load_state=<span class=\"r5\">True</span>, devices=devices)          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 39 </span><span class=\"r4\">│   │   </span><span class=\"r5\">if</span> mode == <span class=\"r7\">&quot;eval&quot;</span>:                                                                 <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 40 </span><span class=\"r4\">│   │   │   </span><span class=\"r13\">self</span>._model = <span class=\"r13\">self</span>._model.eval()                                               <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 41 </span><span class=\"r4\">│   │   </span><span class=\"r5\">elif</span> mode == <span class=\"r7\">&quot;train&quot;</span>:                                                              <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">100 </span><span class=\"r4\">│   </span>load_state: <span class=\"r13\">bool</span> = <span class=\"r5\">True</span>,                                                               <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">101 </span><span class=\"r4\">│   </span>devices: Optional[Sequence[Union[<span class=\"r13\">str</span>, torch.device]]] = <span class=\"r5\">None</span>,                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">102 </span>) -&gt; nn.Module:                                                                            <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span>103 <span class=\"r4\">│   </span>custom_callable = import_callable(                                                     <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">104 </span><span class=\"r4\">│   │   </span>weight_spec.architecture,                                                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">105 </span><span class=\"r4\">│   │   </span>sha256=(                                                                           <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">106 </span><span class=\"r4\">│   │   │   </span>weight_spec.architecture_sha256                                                <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 72 </span><span class=\"r4\">│   │   </span>module = importlib.import_module(node.import_from)                                 <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 73 </span><span class=\"r4\">│   │   </span>c = <span class=\"r13\">getattr</span>(module, <span class=\"r13\">str</span>(node.callable))                                            <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 74 </span><span class=\"r4\">│   </span><span class=\"r5\">elif</span> <span class=\"r13\">isinstance</span>(node, CallableFromFile):                                               <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span> 75 <span class=\"r4\">│   │   </span>c = _import_from_file_impl(node.source_file, <span class=\"r13\">str</span>(node.callable_name), **kwargs)    <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 76 </span><span class=\"r4\">│   </span><span class=\"r5\">elif</span> <span class=\"r13\">isinstance</span>(node, ArchitectureFromFileDescr):                                      <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 77 </span><span class=\"r4\">│   │   </span>c = _import_from_file_impl(node.source, <span class=\"r13\">str</span>(node.callable), sha256=node.sha256)    <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 78 </span><span class=\"r4\">│   </span><span class=\"r5\">else</span>:                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">132 </span><span class=\"r4\">│   │   │   </span>importlib_spec.loader.exec_module(module)                                      <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">133 </span><span class=\"r4\">│   │   </span>                                                                                   <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">134 </span><span class=\"r4\">│   │   </span><span class=\"r5\">except</span> <span class=\"r13\">Exception</span> <span class=\"r5\">as</span> e:                                                             <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span>135 <span class=\"r4\">│   │   │   </span><span class=\"r5\">del</span> sys.modules[module_name]                                                   <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">136 </span><span class=\"r4\">│   │   │   </span><span class=\"r5\">raise</span> <span class=\"r13\">ImportError</span>(<span class=\"r7\">f&quot;Failed to import {</span>source<span class=\"r7\">}&quot;</span>) <span class=\"r5\">from</span><span class=\"r14\"> </span><span class=\"r15\">e</span>                         <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">137 </span><span class=\"r4\">│   </span>                                                                                       <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">138 </span><span class=\"r4\">│   </span><span class=\"r5\">try</span>:                                                                                   <span class=\"r1\">│</span>\n<span class=\"r1\">╰──────────────────────────────────────────────────────────────────────────────────────────────────╯</span>\n<span class=\"r8\">KeyError: </span><span class=\"r11\">&#x27;unet_2da9f7149e144b63fee715fb8fe5154e96bf9aa230d176c91e923d528ef0c4e1&#x27;</span>\n</code></pre>\n</body>\n</html>\n",
                                    "traceback_md": "╭─────────────────────────────── Traceback (most recent call last) ────────────────────────────────╮\n│ /usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p │\n│                                                                                                  │\n│   108 │   module = sys.modules.get(module_name)                                                  │\n│   109 │   if module is None:                                                                     │\n│   110 │   │   try:                                                                               │\n│ ❱ 111 │   │   │   tmp_dir = TemporaryDirectory(ignore_cleanup_errors=True)                       │\n│   112 │   │   │   module_path = Path(tmp_dir.name) / module_name                                 │\n│   113 │   │   │   if reader.original_file_name.endswith(\".zip\") or is_zipfile(reader):           │\n│   114 │   │   │   │   module_path.mkdir()                                                        │\n╰──────────────────────────────────────────────────────────────────────────────────────────────────╯\nTypeError: __init__() got an unexpected keyword argument 'ignore_cleanup_errors'\n\nDuring handling of the above exception, another exception occurred:\n\n╭─────────────────────────────── Traceback (most recent call last) ────────────────────────────────╮\n│ /usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p │\n│                                                                                                  │\n│   642 │   │   inputs = get_test_inputs(model)                                                    │\n│   643 │   │   expected = get_test_outputs(model)                                                 │\n│   644 │   │                                                                                      │\n│ ❱ 645 │   │   with create_prediction_pipeline(                                                   │\n│   646 │   │   │   bioimageio_model=model, devices=devices, weight_format=weight_format           │\n│   647 │   │   ) as prediction_pipeline:                                                          │\n│   648 │   │   │   results = prediction_pipeline.predict_sample_without_blocking(inputs)          │\n│                                                                                                  │\n│ /usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p │\n│                                                                                                  │\n│   368 │   │   │   f\"deprecated create_prediction_pipeline kwargs: {set(deprecated_kwargs)}\"      │\n│   369 │   │   )                                                                                  │\n│   370 │                                                                                          │\n│ ❱ 371 │   model_adapter = model_adapter or create_model_adapter(                                 │\n│   372 │   │   model_description=bioimageio_model,                                                │\n│   373 │   │   devices=devices,                                                                   │\n│   374 │   │   weight_format_priority_order=weights_format and (weights_format,),                 │\n│                                                                                                  │\n│ /usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p │\n│                                                                                                  │\n│   166 │   │   assert errors                                                                      │\n│   167 │   │   if len(weight_format_priority_order) == 1:                                         │\n│   168 │   │   │   assert len(errors) == 1                                                        │\n│ ❱ 169 │   │   │   raise errors[0]                                                                │\n│   170 │   │                                                                                      │\n│   171 │   │   else:                                                                              │\n│   172 │   │   │   msg = (                                                                        │\n│                                                                                                  │\n│ /usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p │\n│                                                                                                  │\n│   109 │   │   │   │   try:                                                                       │\n│   110 │   │   │   │   │   from .pytorch_backend import PytorchModelAdapter                       │\n│   111 │   │   │   │   │                                                                          │\n│ ❱ 112 │   │   │   │   │   return PytorchModelAdapter(                                            │\n│   113 │   │   │   │   │   │   model_description=model_description, devices=devices               │\n│   114 │   │   │   │   │   )                                                                      │\n│   115 │   │   │   │   except Exception as e:                                                     │\n│                                                                                                  │\n│ /usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p │\n│                                                                                                  │\n│    35 │   │   │   raise ValueError(\"No `pytorch_state_dict` weights found\")                      │\n│    36 │   │                                                                                      │\n│    37 │   │   devices = get_devices(devices)                                                     │\n│ ❱  38 │   │   self._model = load_torch_model(weights, load_state=True, devices=devices)          │\n│    39 │   │   if mode == \"eval\":                                                                 │\n│    40 │   │   │   self._model = self._model.eval()                                               │\n│    41 │   │   elif mode == \"train\":                                                              │\n│                                                                                                  │\n│ /usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p │\n│                                                                                                  │\n│   100 │   load_state: bool = True,                                                               │\n│   101 │   devices: Optional[Sequence[Union[str, torch.device]]] = None,                          │\n│   102 ) -> nn.Module:                                                                            │\n│ ❱ 103 │   custom_callable = import_callable(                                                     │\n│   104 │   │   weight_spec.architecture,                                                          │\n│   105 │   │   sha256=(                                                                           │\n│   106 │   │   │   weight_spec.architecture_sha256                                                │\n│                                                                                                  │\n│ /usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p │\n│                                                                                                  │\n│    72 │   │   module = importlib.import_module(node.import_from)                                 │\n│    73 │   │   c = getattr(module, str(node.callable))                                            │\n│    74 │   elif isinstance(node, CallableFromFile):                                               │\n│ ❱  75 │   │   c = _import_from_file_impl(node.source_file, str(node.callable_name), **kwargs)    │\n│    76 │   elif isinstance(node, ArchitectureFromFileDescr):                                      │\n│    77 │   │   c = _import_from_file_impl(node.source, str(node.callable), sha256=node.sha256)    │\n│    78 │   else:                                                                                  │\n│                                                                                                  │\n│ /usr/share/miniconda/envs/6957a898500e9707d2a72c887d10fb220eba92e15c14aaeeddbbc322dd3dedb8/lib/p │\n│                                                                                                  │\n│   132 │   │   │   importlib_spec.loader.exec_module(module)                                      │\n│   133 │   │                                                                                      │\n│   134 │   │   except Exception as e:                                                             │\n│ ❱ 135 │   │   │   del sys.modules[module_name]                                                   │\n│   136 │   │   │   raise ImportError(f\"Failed to import {source}\") from e                         │\n│   137 │                                                                                          │\n│   138 │   try:                                                                                   │\n╰──────────────────────────────────────────────────────────────────────────────────────────────────╯\nKeyError: 'unet_2da9f7149e144b63fee715fb8fe5154e96bf9aa230d176c91e923d528ef0c4e1'\n",
                                    "type": "bioimageio.core",
                                    "with_traceback": true
                                }
                            ],
                            "loc": [
                                "weights",
                                "pytorch_state_dict"
                            ],
                            "name": "Reproduce test outputs from test inputs (pytorch_state_dict)",
                            "recommended_env": {
                                "channels": [
                                    "pytorch",
                                    "conda-forge",
                                    "nodefaults"
                                ],
                                "dependencies": [
                                    "conda-forge::bioimageio.core",
                                    "mkl ==2024.0.0",
                                    "numpy <2",
                                    "pip",
                                    "pytorch==1.10.1",
                                    "setuptools <70.0.0",
                                    "torchaudio==0.10.1",
                                    "torchvision==0.11.2"
                                ],
                                "name": null
                            },
                            "saved_conda_compare": "usage: conda [-h] [-v] [--no-plugins] [-V] COMMAND ...\n\nconda is a tool for managing and deploying applications, environments and packages.\n\noptions:\n  -h, --help            Show this help message and exit.\n  -v, --verbose         Can be used multiple times. Once for detailed output,\n                        twice for INFO logging, thrice for DEBUG logging, four\n                        times for TRACE logging.\n  --no-plugins          Disable all plugins that are not built into conda.\n  -V, --version         Show the conda version number and exit.\n\ncommands:\n  The following built-in and plugins subcommands are available.\n\n  COMMAND\n    activate            Activate a conda environment.\n    clean               Remove unused packages and caches.\n    commands            List all available conda subcommands (including those\n                        from plugins). Generally only used by tab-completion.\n    compare             Compare packages between conda environments.\n    config              Modify configuration values in .condarc.\n    content-trust       Signing and verification tools for Conda\n    create              Create a new conda environment from a list of\n                        specified packages.\n    deactivate          Deactivate the current active conda environment.\n    doctor              Display a health report for your environment.\n    env                 Create and manage conda environments.\n    export              Export a given environment\n    info                Display information about current conda install.\n    init                Initialize conda for shell interaction.\n    install             Install a list of packages into a specified conda\n                        environment.\n    list                List installed packages in a conda environment.\n    notices             Retrieve latest channel notifications.\n    package             Create low-level conda packages. (EXPERIMENTAL)\n    remove (uninstall)  Remove a list of packages from a specified conda\n                        environment.\n    rename              Rename an existing environment.\n    repoquery           Advanced search for repodata.\n    run                 Run an executable in a conda environment.\n    search              Search for packages and display associated information\n                        using the MatchSpec format.\n    token               See `conda token --help`.\n    tos                 A subcommand for viewing, accepting, rejecting, and\n                        otherwise interacting with a channel's Terms of\n                        Service (ToS). This plugin periodically checks for\n                        updated Terms of Service for the active/selected\n                        channels. Channels with a Terms of Service will need\n                        to be accepted or rejected prior to use. Conda will\n                        only allow package installation from channels without\n                        a Terms of Service or with an accepted Terms of\n                        Service. Attempting to use a channel with a rejected\n                        Terms of Service will result in an error.\n    update (upgrade)    Update conda packages to the latest compatible\n                        version.\n",
                            "status": "failed",
                            "warnings": []
                        },
                        {
                            "context": null,
                            "errors": [],
                            "loc": [
                                "weights",
                                "torchscript"
                            ],
                            "name": "Reproduce test outputs from test inputs (torchscript)",
                            "recommended_env": {
                                "channels": [
                                    "pytorch",
                                    "conda-forge",
                                    "nodefaults"
                                ],
                                "dependencies": [
                                    "conda-forge::bioimageio.core",
                                    "mkl ==2024.0.0",
                                    "numpy <2",
                                    "pip",
                                    "pytorch==2.0.0",
                                    "setuptools <70.0.0",
                                    "torchaudio==2.0.0",
                                    "torchvision==0.15.0"
                                ],
                                "name": null
                            },
                            "saved_conda_compare": "usage: conda [-h] [-v] [--no-plugins] [-V] COMMAND ...\n\nconda is a tool for managing and deploying applications, environments and packages.\n\noptions:\n  -h, --help            Show this help message and exit.\n  -v, --verbose         Can be used multiple times. Once for detailed output,\n                        twice for INFO logging, thrice for DEBUG logging, four\n                        times for TRACE logging.\n  --no-plugins          Disable all plugins that are not built into conda.\n  -V, --version         Show the conda version number and exit.\n\ncommands:\n  The following built-in and plugins subcommands are available.\n\n  COMMAND\n    activate            Activate a conda environment.\n    clean               Remove unused packages and caches.\n    commands            List all available conda subcommands (including those\n                        from plugins). Generally only used by tab-completion.\n    compare             Compare packages between conda environments.\n    config              Modify configuration values in .condarc.\n    content-trust       Signing and verification tools for Conda\n    create              Create a new conda environment from a list of\n                        specified packages.\n    deactivate          Deactivate the current active conda environment.\n    doctor              Display a health report for your environment.\n    env                 Create and manage conda environments.\n    export              Export a given environment\n    info                Display information about current conda install.\n    init                Initialize conda for shell interaction.\n    install             Install a list of packages into a specified conda\n                        environment.\n    list                List installed packages in a conda environment.\n    notices             Retrieve latest channel notifications.\n    package             Create low-level conda packages. (EXPERIMENTAL)\n    remove (uninstall)  Remove a list of packages from a specified conda\n                        environment.\n    rename              Rename an existing environment.\n    repoquery           Advanced search for repodata.\n    run                 Run an executable in a conda environment.\n    search              Search for packages and display associated information\n                        using the MatchSpec format.\n    token               See `conda token --help`.\n    tos                 A subcommand for viewing, accepting, rejecting, and\n                        otherwise interacting with a channel's Terms of\n                        Service (ToS). This plugin periodically checks for\n                        updated Terms of Service for the active/selected\n                        channels. Channels with a Terms of Service will need\n                        to be accepted or rejected prior to use. Conda will\n                        only allow package installation from channels without\n                        a Terms of Service or with an accepted Terms of\n                        Service. Attempting to use a channel with a rejected\n                        Terms of Service will result in an error.\n    update (upgrade)    Update conda packages to the latest compatible\n                        version.\n",
                            "status": "passed",
                            "warnings": []
                        },
                        {
                            "context": {
                                "file_name": "rdf.yaml",
                                "known_files": {
                                    "https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files/doc.md?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files/ilastik_pred.png?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files/ilastik_raw.png?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files/ilastik_sneak.png?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files/test_input.npy?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files/test_output.npy?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files/torchscript_tracing.pt?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files/unet.py?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files/unet3d-arabidopsis-ovules-confocal-ds2x.pytorch?version=v0": null,
                                    "torchscript_tracing.pt": "09be0d33ca00fb8137cca507a69f5e95719a159ada0d709286ae9dc183093aaf",
                                    "unet3d-arabidopsis-ovules-confocal-ds2x.pytorch": "0f11cbd0608d12ef161892586408c6ec1a074f1f27ea6afef9d1ceece3dd3c1f"
                                },
                                "original_source_name": null,
                                "perform_io_checks": true,
                                "root": "https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files?version=v0",
                                "update_hashes": false
                            },
                            "errors": [],
                            "loc": [],
                            "name": "Successfully created `ModelDescr` instance.",
                            "recommended_env": null,
                            "saved_conda_compare": null,
                            "status": "passed",
                            "warnings": []
                        },
                        {
                            "context": {
                                "file_name": "rdf.yaml",
                                "known_files": {
                                    "https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files/doc.md?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files/ilastik_pred.png?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files/ilastik_raw.png?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files/ilastik_sneak.png?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files/test_input.npy?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files/test_output.npy?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files/torchscript_tracing.pt?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files/unet.py?version=v0": null,
                                    "https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files/unet3d-arabidopsis-ovules-confocal-ds2x.pytorch?version=v0": null,
                                    "torchscript_tracing.pt": "09be0d33ca00fb8137cca507a69f5e95719a159ada0d709286ae9dc183093aaf",
                                    "unet3d-arabidopsis-ovules-confocal-ds2x.pytorch": "0f11cbd0608d12ef161892586408c6ec1a074f1f27ea6afef9d1ceece3dd3c1f"
                                },
                                "original_source_name": null,
                                "perform_io_checks": true,
                                "root": "https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files?version=v0",
                                "update_hashes": false
                            },
                            "errors": [],
                            "loc": [],
                            "name": "bioimageio.spec format validation model 0.4.10",
                            "recommended_env": null,
                            "saved_conda_compare": null,
                            "status": "passed",
                            "warnings": [
                                {
                                    "loc": [
                                        "weights",
                                        "pytorch_state_dict",
                                        "pytorch_version"
                                    ],
                                    "msg": "missing. Please specify the PyTorch version these PyTorch state dict weights were created with.",
                                    "severity": 35,
                                    "type": "warning"
                                }
                            ]
                        },
                        {
                            "context": null,
                            "errors": [],
                            "loc": [
                                "weights",
                                "pytorch_state_dict"
                            ],
                            "name": "Reproduce test outputs from test inputs (pytorch_state_dict)",
                            "recommended_env": {
                                "channels": [
                                    "pytorch",
                                    "conda-forge",
                                    "nodefaults"
                                ],
                                "dependencies": [
                                    "conda-forge::bioimageio.core",
                                    "mkl ==2024.0.0",
                                    "numpy <2",
                                    "pip",
                                    "pytorch==1.10.1",
                                    "setuptools <70.0.0",
                                    "torchaudio==0.10.1",
                                    "torchvision==0.11.2"
                                ],
                                "name": null
                            },
                            "saved_conda_compare": "pytorch found but mismatch. Specification pkg: pytorch==1.10.1, Running pkg: pytorch=2.0.0=py3.10_cpu_0\ntorchaudio found but mismatch. Specification pkg: torchaudio==0.10.1, Running pkg: torchaudio=2.0.0=py310_cpu\ntorchvision found but mismatch. Specification pkg: torchvision==0.11.2, Running pkg: torchvision=0.15.0=py310_cpu\n",
                            "status": "passed",
                            "warnings": []
                        },
                        {
                            "context": null,
                            "errors": [],
                            "loc": [
                                "weights",
                                "torchscript"
                            ],
                            "name": "Reproduce test outputs from test inputs (torchscript)",
                            "recommended_env": {
                                "channels": [
                                    "pytorch",
                                    "conda-forge",
                                    "nodefaults"
                                ],
                                "dependencies": [
                                    "conda-forge::bioimageio.core",
                                    "mkl ==2024.0.0",
                                    "numpy <2",
                                    "pip",
                                    "pytorch==2.0.0",
                                    "setuptools <70.0.0",
                                    "torchaudio==2.0.0",
                                    "torchvision==0.15.0"
                                ],
                                "name": null
                            },
                            "saved_conda_compare": "Success. All the packages in the specification file are present in the environment with matching version and build string.\n",
                            "status": "passed",
                            "warnings": []
                        }
                    ],
                    "env": [
                        [
                            "bioimageio.core",
                            "0.9.0",
                            "",
                            ""
                        ],
                        [
                            "bioimageio.spec",
                            "0.5.4.3",
                            "",
                            ""
                        ]
                    ],
                    "format_version": "0.4.10",
                    "id": "10.5281/zenodo.6334583/7805434",
                    "metadata_completeness": 0.0,
                    "name": "bioimageio format validation",
                    "saved_conda_list": "usage: conda [-h] [-v] [--no-plugins] [-V] COMMAND ...\n\nconda is a tool for managing and deploying applications, environments and packages.\n\noptions:\n  -h, --help            Show this help message and exit.\n  -v, --verbose         Can be used multiple times. Once for detailed output,\n                        twice for INFO logging, thrice for DEBUG logging, four\n                        times for TRACE logging.\n  --no-plugins          Disable all plugins that are not built into conda.\n  -V, --version         Show the conda version number and exit.\n\ncommands:\n  The following built-in and plugins subcommands are available.\n\n  COMMAND\n    activate            Activate a conda environment.\n    clean               Remove unused packages and caches.\n    commands            List all available conda subcommands (including those\n                        from plugins). Generally only used by tab-completion.\n    compare             Compare packages between conda environments.\n    config              Modify configuration values in .condarc.\n    content-trust       Signing and verification tools for Conda\n    create              Create a new conda environment from a list of\n                        specified packages.\n    deactivate          Deactivate the current active conda environment.\n    doctor              Display a health report for your environment.\n    env                 Create and manage conda environments.\n    export              Export a given environment\n    info                Display information about current conda install.\n    init                Initialize conda for shell interaction.\n    install             Install a list of packages into a specified conda\n                        environment.\n    list                List installed packages in a conda environment.\n    notices             Retrieve latest channel notifications.\n    package             Create low-level conda packages. (EXPERIMENTAL)\n    remove (uninstall)  Remove a list of packages from a specified conda\n                        environment.\n    rename              Rename an existing environment.\n    repoquery           Advanced search for repodata.\n    run                 Run an executable in a conda environment.\n    search              Search for packages and display associated information\n                        using the MatchSpec format.\n    token               See `conda token --help`.\n    tos                 A subcommand for viewing, accepting, rejecting, and\n                        otherwise interacting with a channel's Terms of\n                        Service (ToS). This plugin periodically checks for\n                        updated Terms of Service for the active/selected\n                        channels. Channels with a Terms of Service will need\n                        to be accepted or rejected prior to use. Conda will\n                        only allow package installation from channels without\n                        a Terms of Service or with an accepted Terms of\n                        Service. Attempting to use a channel with a rejected\n                        Terms of Service will result in an error.\n    update (upgrade)    Update conda packages to the latest compatible\n                        version.\n",
                    "source_name": "https://hypha.aicell.io/bioimage-io/artifacts/passionate-t-rex/files/rdf.yaml?version=v0",
                    "status": "failed",
                    "type": "model"
                },
                "error": "'unet_2da9f7149e144b63fee715fb8fe5154e96bf9aa230d176c91e923d528ef0c4e1'",
                "links": [],
                "score": 0.0,
                "status": "failed"
            }
        },
        "careamics": {
            "0.0.16": {
                "badge": null,
                "details": [
                    "CAREamics compatibility check does not support `bioimageio.spec.v0.4` model desciptions."
                ],
                "error": null,
                "links": [],
                "score": 0.0,
                "status": "not-applicable"
            },
            "0.0.17": {
                "badge": null,
                "details": [
                    "CAREamics compatibility check does not support `bioimageio.spec.v0.4` model desciptions."
                ],
                "error": null,
                "links": [],
                "score": 0.0,
                "status": "not-applicable"
            }
        }
    }
}