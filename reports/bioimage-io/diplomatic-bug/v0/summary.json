{
    "rdf_content": {
        "attachments": [
            {
                "sha256": "a23c636b3619c96838ed8ce862d6e88fb7e3b5b6c43b646e41b415c07ed81523",
                "source": "vit_b_decoder.pt"
            }
        ],
        "authors": [
            {
                "affiliation": "University Goettingen",
                "github_user": "anwai98",
                "name": "Anwai Archit"
            },
            {
                "affiliation": "University Goettingen",
                "github_user": "constantinpape",
                "name": "Constantin Pape"
            }
        ],
        "cite": [
            {
                "doi": "10.1101/2023.08.21.554208",
                "text": "Archit et al. Segment Anything for Microscopy"
            }
        ],
        "config": {
            "bioimageio": {
                "thumbnails": {
                    "cover_lm.png": "cover_lm.thumbnail.png"
                }
            }
        },
        "covers": [
            "cover_lm.png"
        ],
        "description": "Finetuned Segment Anything Model for Microscopy",
        "documentation": "documentation.md",
        "format_version": "0.5.0",
        "git_repo": "https://github.com/computational-cell-analytics/micro-sam",
        "id": "diplomatic-bug",
        "id_emoji": "üêõ",
        "inputs": [
            {
                "axes": [
                    {
                        "type": "batch"
                    },
                    {
                        "channel_names": [
                            "R",
                            "G",
                            "B"
                        ],
                        "type": "channel"
                    },
                    {
                        "id": "y",
                        "size": {
                            "min": 1,
                            "step": 1
                        },
                        "type": "space"
                    },
                    {
                        "id": "x",
                        "size": {
                            "min": 1,
                            "step": 1
                        },
                        "type": "space"
                    }
                ],
                "data": {
                    "type": "uint8"
                },
                "id": "image",
                "test_tensor": {
                    "sha256": "81248ee1a4b156b07640d1ca2b3a3c38af712b380331c04f78106d657a6ad057",
                    "source": "input.npy"
                }
            },
            {
                "axes": [
                    {
                        "type": "batch"
                    },
                    {
                        "id": "object",
                        "size": {
                            "min": 1,
                            "step": 1
                        },
                        "type": "index"
                    },
                    {
                        "channel_names": [
                            "h",
                            "w",
                            "x",
                            "y"
                        ],
                        "type": "channel"
                    }
                ],
                "data": {
                    "type": "int64"
                },
                "id": "box_prompts",
                "optional": true,
                "test_tensor": {
                    "sha256": "ba0ed84525fc250518f8edd6936f94c7454e6f62685c902aaf085dbd0a8150c7",
                    "source": "box_prompts.npy"
                }
            },
            {
                "axes": [
                    {
                        "type": "batch"
                    },
                    {
                        "id": "object",
                        "size": {
                            "min": 1,
                            "step": 1
                        },
                        "type": "index"
                    },
                    {
                        "id": "point",
                        "size": {
                            "min": 1,
                            "step": 1
                        },
                        "type": "index"
                    },
                    {
                        "channel_names": [
                            "x",
                            "y"
                        ],
                        "type": "channel"
                    }
                ],
                "data": {
                    "type": "int64"
                },
                "id": "point_prompts",
                "optional": true,
                "test_tensor": {
                    "sha256": "132b63d0a07f422c22179a90a0ca1e23b5685b7d19128f0a3023cc2c57f5c355",
                    "source": "point_prompts.npy"
                }
            },
            {
                "axes": [
                    {
                        "type": "batch"
                    },
                    {
                        "id": "object",
                        "size": {
                            "min": 1,
                            "step": 1
                        },
                        "type": "index"
                    },
                    {
                        "id": "point",
                        "size": {
                            "min": 1,
                            "step": 1
                        },
                        "type": "index"
                    }
                ],
                "data": {
                    "type": "int64"
                },
                "id": "point_labels",
                "optional": true,
                "test_tensor": {
                    "sha256": "c4e6b5cec2d9be65ad0cd3b2fab7b6add275d16d5a457208777771362de9bb81",
                    "source": "point_labels.npy"
                }
            },
            {
                "axes": [
                    {
                        "type": "batch"
                    },
                    {
                        "id": "object",
                        "size": {
                            "min": 1,
                            "step": 1
                        },
                        "type": "index"
                    },
                    {
                        "channel_names": [
                            "channel"
                        ],
                        "type": "channel"
                    },
                    {
                        "id": "y",
                        "size": 256,
                        "type": "space"
                    },
                    {
                        "id": "x",
                        "size": 256,
                        "type": "space"
                    }
                ],
                "data": {
                    "type": "float32"
                },
                "id": "mask_prompts",
                "optional": true,
                "test_tensor": {
                    "sha256": "6300c3ff25ece25d5231ca4df0746958a5ff48e3ca20576ac326e23d1962547b",
                    "source": "mask_prompts.npy"
                }
            },
            {
                "axes": [
                    {
                        "type": "batch"
                    },
                    {
                        "channel_names": [
                            "c0",
                            "c1",
                            "c2",
                            "c3",
                            "c4",
                            "c5",
                            "c6",
                            "c7",
                            "c8",
                            "c9",
                            "c10",
                            "c11",
                            "c12",
                            "c13",
                            "c14",
                            "c15",
                            "c16",
                            "c17",
                            "c18",
                            "c19",
                            "c20",
                            "c21",
                            "c22",
                            "c23",
                            "c24",
                            "c25",
                            "c26",
                            "c27",
                            "c28",
                            "c29",
                            "c30",
                            "c31",
                            "c32",
                            "c33",
                            "c34",
                            "c35",
                            "c36",
                            "c37",
                            "c38",
                            "c39",
                            "c40",
                            "c41",
                            "c42",
                            "c43",
                            "c44",
                            "c45",
                            "c46",
                            "c47",
                            "c48",
                            "c49",
                            "c50",
                            "c51",
                            "c52",
                            "c53",
                            "c54",
                            "c55",
                            "c56",
                            "c57",
                            "c58",
                            "c59",
                            "c60",
                            "c61",
                            "c62",
                            "c63",
                            "c64",
                            "c65",
                            "c66",
                            "c67",
                            "c68",
                            "c69",
                            "c70",
                            "c71",
                            "c72",
                            "c73",
                            "c74",
                            "c75",
                            "c76",
                            "c77",
                            "c78",
                            "c79",
                            "c80",
                            "c81",
                            "c82",
                            "c83",
                            "c84",
                            "c85",
                            "c86",
                            "c87",
                            "c88",
                            "c89",
                            "c90",
                            "c91",
                            "c92",
                            "c93",
                            "c94",
                            "c95",
                            "c96",
                            "c97",
                            "c98",
                            "c99",
                            "c100",
                            "c101",
                            "c102",
                            "c103",
                            "c104",
                            "c105",
                            "c106",
                            "c107",
                            "c108",
                            "c109",
                            "c110",
                            "c111",
                            "c112",
                            "c113",
                            "c114",
                            "c115",
                            "c116",
                            "c117",
                            "c118",
                            "c119",
                            "c120",
                            "c121",
                            "c122",
                            "c123",
                            "c124",
                            "c125",
                            "c126",
                            "c127",
                            "c128",
                            "c129",
                            "c130",
                            "c131",
                            "c132",
                            "c133",
                            "c134",
                            "c135",
                            "c136",
                            "c137",
                            "c138",
                            "c139",
                            "c140",
                            "c141",
                            "c142",
                            "c143",
                            "c144",
                            "c145",
                            "c146",
                            "c147",
                            "c148",
                            "c149",
                            "c150",
                            "c151",
                            "c152",
                            "c153",
                            "c154",
                            "c155",
                            "c156",
                            "c157",
                            "c158",
                            "c159",
                            "c160",
                            "c161",
                            "c162",
                            "c163",
                            "c164",
                            "c165",
                            "c166",
                            "c167",
                            "c168",
                            "c169",
                            "c170",
                            "c171",
                            "c172",
                            "c173",
                            "c174",
                            "c175",
                            "c176",
                            "c177",
                            "c178",
                            "c179",
                            "c180",
                            "c181",
                            "c182",
                            "c183",
                            "c184",
                            "c185",
                            "c186",
                            "c187",
                            "c188",
                            "c189",
                            "c190",
                            "c191",
                            "c192",
                            "c193",
                            "c194",
                            "c195",
                            "c196",
                            "c197",
                            "c198",
                            "c199",
                            "c200",
                            "c201",
                            "c202",
                            "c203",
                            "c204",
                            "c205",
                            "c206",
                            "c207",
                            "c208",
                            "c209",
                            "c210",
                            "c211",
                            "c212",
                            "c213",
                            "c214",
                            "c215",
                            "c216",
                            "c217",
                            "c218",
                            "c219",
                            "c220",
                            "c221",
                            "c222",
                            "c223",
                            "c224",
                            "c225",
                            "c226",
                            "c227",
                            "c228",
                            "c229",
                            "c230",
                            "c231",
                            "c232",
                            "c233",
                            "c234",
                            "c235",
                            "c236",
                            "c237",
                            "c238",
                            "c239",
                            "c240",
                            "c241",
                            "c242",
                            "c243",
                            "c244",
                            "c245",
                            "c246",
                            "c247",
                            "c248",
                            "c249",
                            "c250",
                            "c251",
                            "c252",
                            "c253",
                            "c254",
                            "c255"
                        ],
                        "type": "channel"
                    },
                    {
                        "id": "y",
                        "size": 64,
                        "type": "space"
                    },
                    {
                        "id": "x",
                        "size": 64,
                        "type": "space"
                    }
                ],
                "data": {
                    "type": "float32"
                },
                "id": "embeddings",
                "optional": true,
                "test_tensor": {
                    "sha256": "d70b759cf8b99fb293fb67a685af5cae362d5c608f3fb279bf20d7b8d18ec5d8",
                    "source": "embeddings.npy"
                }
            }
        ],
        "license": "CC-BY-4.0",
        "name": "vit_b_lm",
        "outputs": [
            {
                "axes": [
                    {
                        "type": "batch"
                    },
                    {
                        "id": "object",
                        "size": {},
                        "type": "index"
                    },
                    {
                        "channel_names": [
                            "mask"
                        ],
                        "type": "channel"
                    },
                    {
                        "id": "y",
                        "size": {
                            "axis_id": "y",
                            "tensor_id": "image"
                        },
                        "type": "space"
                    },
                    {
                        "id": "x",
                        "size": {
                            "axis_id": "x",
                            "tensor_id": "image"
                        },
                        "type": "space"
                    }
                ],
                "data": {
                    "type": "uint8"
                },
                "id": "masks",
                "test_tensor": {
                    "sha256": "a2cef32db18495a5851f45ef07ed3eb39616b37968923fa89975ad0c9e611b33",
                    "source": "mask.npy"
                }
            },
            {
                "axes": [
                    {
                        "type": "batch"
                    },
                    {
                        "id": "object",
                        "size": {},
                        "type": "index"
                    },
                    {
                        "channel_names": [
                            "mask"
                        ],
                        "type": "channel"
                    }
                ],
                "data": {
                    "type": "float32"
                },
                "id": "scores",
                "test_tensor": {
                    "sha256": "ecb975233a05777133befd4e01359320c167aa9633f81b3205cdd58a7fd7ad08",
                    "source": "scores.npy"
                }
            },
            {
                "axes": [
                    {
                        "type": "batch"
                    },
                    {
                        "channel_names": [
                            "c0",
                            "c1",
                            "c2",
                            "c3",
                            "c4",
                            "c5",
                            "c6",
                            "c7",
                            "c8",
                            "c9",
                            "c10",
                            "c11",
                            "c12",
                            "c13",
                            "c14",
                            "c15",
                            "c16",
                            "c17",
                            "c18",
                            "c19",
                            "c20",
                            "c21",
                            "c22",
                            "c23",
                            "c24",
                            "c25",
                            "c26",
                            "c27",
                            "c28",
                            "c29",
                            "c30",
                            "c31",
                            "c32",
                            "c33",
                            "c34",
                            "c35",
                            "c36",
                            "c37",
                            "c38",
                            "c39",
                            "c40",
                            "c41",
                            "c42",
                            "c43",
                            "c44",
                            "c45",
                            "c46",
                            "c47",
                            "c48",
                            "c49",
                            "c50",
                            "c51",
                            "c52",
                            "c53",
                            "c54",
                            "c55",
                            "c56",
                            "c57",
                            "c58",
                            "c59",
                            "c60",
                            "c61",
                            "c62",
                            "c63",
                            "c64",
                            "c65",
                            "c66",
                            "c67",
                            "c68",
                            "c69",
                            "c70",
                            "c71",
                            "c72",
                            "c73",
                            "c74",
                            "c75",
                            "c76",
                            "c77",
                            "c78",
                            "c79",
                            "c80",
                            "c81",
                            "c82",
                            "c83",
                            "c84",
                            "c85",
                            "c86",
                            "c87",
                            "c88",
                            "c89",
                            "c90",
                            "c91",
                            "c92",
                            "c93",
                            "c94",
                            "c95",
                            "c96",
                            "c97",
                            "c98",
                            "c99",
                            "c100",
                            "c101",
                            "c102",
                            "c103",
                            "c104",
                            "c105",
                            "c106",
                            "c107",
                            "c108",
                            "c109",
                            "c110",
                            "c111",
                            "c112",
                            "c113",
                            "c114",
                            "c115",
                            "c116",
                            "c117",
                            "c118",
                            "c119",
                            "c120",
                            "c121",
                            "c122",
                            "c123",
                            "c124",
                            "c125",
                            "c126",
                            "c127",
                            "c128",
                            "c129",
                            "c130",
                            "c131",
                            "c132",
                            "c133",
                            "c134",
                            "c135",
                            "c136",
                            "c137",
                            "c138",
                            "c139",
                            "c140",
                            "c141",
                            "c142",
                            "c143",
                            "c144",
                            "c145",
                            "c146",
                            "c147",
                            "c148",
                            "c149",
                            "c150",
                            "c151",
                            "c152",
                            "c153",
                            "c154",
                            "c155",
                            "c156",
                            "c157",
                            "c158",
                            "c159",
                            "c160",
                            "c161",
                            "c162",
                            "c163",
                            "c164",
                            "c165",
                            "c166",
                            "c167",
                            "c168",
                            "c169",
                            "c170",
                            "c171",
                            "c172",
                            "c173",
                            "c174",
                            "c175",
                            "c176",
                            "c177",
                            "c178",
                            "c179",
                            "c180",
                            "c181",
                            "c182",
                            "c183",
                            "c184",
                            "c185",
                            "c186",
                            "c187",
                            "c188",
                            "c189",
                            "c190",
                            "c191",
                            "c192",
                            "c193",
                            "c194",
                            "c195",
                            "c196",
                            "c197",
                            "c198",
                            "c199",
                            "c200",
                            "c201",
                            "c202",
                            "c203",
                            "c204",
                            "c205",
                            "c206",
                            "c207",
                            "c208",
                            "c209",
                            "c210",
                            "c211",
                            "c212",
                            "c213",
                            "c214",
                            "c215",
                            "c216",
                            "c217",
                            "c218",
                            "c219",
                            "c220",
                            "c221",
                            "c222",
                            "c223",
                            "c224",
                            "c225",
                            "c226",
                            "c227",
                            "c228",
                            "c229",
                            "c230",
                            "c231",
                            "c232",
                            "c233",
                            "c234",
                            "c235",
                            "c236",
                            "c237",
                            "c238",
                            "c239",
                            "c240",
                            "c241",
                            "c242",
                            "c243",
                            "c244",
                            "c245",
                            "c246",
                            "c247",
                            "c248",
                            "c249",
                            "c250",
                            "c251",
                            "c252",
                            "c253",
                            "c254",
                            "c255"
                        ],
                        "type": "channel"
                    },
                    {
                        "id": "y",
                        "size": 64,
                        "type": "space"
                    },
                    {
                        "id": "x",
                        "size": 64,
                        "type": "space"
                    }
                ],
                "data": {
                    "type": "float32"
                },
                "id": "embeddings",
                "test_tensor": {
                    "sha256": "d70b759cf8b99fb293fb67a685af5cae362d5c608f3fb279bf20d7b8d18ec5d8",
                    "source": "embeddings.npy"
                }
            }
        ],
        "tags": [
            "segment-anything",
            "instance-segmentation"
        ],
        "type": "model",
        "uploader": {
            "email": "constantin.pape@informatik.uni-goettingen.de"
        },
        "version_number": 1,
        "weights": {
            "pytorch_state_dict": {
                "architecture": {
                    "callable": "PredictorAdaptor",
                    "kwargs": {
                        "model_type": "vit_b"
                    },
                    "sha256": "c55a850510e70b6b815afbec1d19da92792de97c4cf4384ba95d0024157f5c5d",
                    "source": "predictor_adaptor.py"
                },
                "dependencies": {
                    "sha256": "25d74fdd33d13778435320bb2d4708c01cfa537fa5d578951f7811f9eca6a97a",
                    "source": "environment.yaml"
                },
                "pytorch_version": "2.1.2",
                "sha256": "e684636c775be03afc36335525584cf239a050ad70650ee85e50f8b55eba8e7f",
                "source": "vit_b.pt"
            }
        }
    },
    "rdf_yaml_sha256": "d256744aab8d284cb23093f1be066e0be9f33f01b5f951144ee1f0d0df35dfe9",
    "scores": {
        "core_compatibility": 0.0,
        "metadata_completeness": 0.0,
        "metadata_format": 0.0,
        "overall_compatibility": 0.0,
        "overall_partner_tool_compatibility": 0.0,
        "tool_compatibility": {},
        "tool_compatibility_version_specific": {}
    },
    "status": "failed",
    "tests": {
        "biapy_3.6.5": {
            "badge": null,
            "details": "[all] pytorch_state_dict not found in model RDF or inputs != 1\n",
            "error": "[all] pytorch_state_dict not found in model RDF or inputs != 1\n",
            "links": [
                "biapy/biapy"
            ],
            "score": 0.0,
            "status": "failed"
        },
        "bioimageio.core_0.9.3": {
            "badge": null,
            "details": {
                "details": [
                    {
                        "context": null,
                        "errors": [
                            {
                                "loc": [],
                                "msg": "test command 'conda run -n 9378e8c7b0ac33627a1981c3d6609bd5a64f8cd438af37bf079e53a5cb06d762 bioimageio test https://hypha.aicell.io/bioimage-io/artifacts/diplomatic-bug/files/rdf.yaml?version=v0 --summary-path=/tmp/tmpg9w6o6pa/pytorch_state_dict/summary.json --determinism=full --stop-early' did not produce a summary file at /tmp/tmpg9w6o6pa/pytorch_state_dict/summary.json",
                                "traceback_html": "",
                                "traceback_md": "",
                                "type": "bioimageio cli",
                                "with_traceback": false
                            }
                        ],
                        "loc": [],
                        "name": "run 'bioimageio test'",
                        "recommended_env": null,
                        "saved_conda_compare": null,
                        "status": "failed",
                        "warnings": []
                    }
                ],
                "env": [],
                "format_version": "unknown",
                "id": null,
                "metadata_completeness": 0.0,
                "name": "calling bioimageio test command",
                "saved_conda_list": "# packages in environment at /usr/share/miniconda/envs/core:\n#\n# Name                     Version          Build                    Channel\n_libgcc_mutex              0.1              conda_forge              conda-forge\n_openmp_mutex              4.5              2_gnu                    conda-forge\nannotated-types            0.7.0            pyhd8ed1ab_1             conda-forge\nanyio                      4.11.0           pyhcf101f3_0             conda-forge\naom                        3.9.1            hac33072_0               conda-forge\nbackoffice                 0.1.0            pypi_0                   pypi\nbioimageio.core            0.9.3            pyhd8ed1ab_0             conda-forge\nbioimageio.spec            0.5.5.5          pyhd8ed1ab_0             conda-forge\nblosc                      1.21.6           he440d0b_1               conda-forge\nbrunsli                    0.1              he3183e4_1               conda-forge\nbzip2                      1.0.8            hda65f42_8               conda-forge\nc-ares                     1.34.5           hb9d3cd8_0               conda-forge\nc-blosc2                   2.21.3           h4cfbee9_0               conda-forge\nca-certificates            2025.10.5        hbd8a1cb_0               conda-forge\ncached-property            1.5.2            hd8ed1ab_1               conda-forge\ncached_property            1.5.2            pyha770c72_1             conda-forge\ncertifi                    2025.10.5        pyhd8ed1ab_0             conda-forge\ncffi                       2.0.0            pypi_0                   pypi\ncharls                     2.4.2            h59595ed_0               conda-forge\ncharset-normalizer         3.4.3            pypi_0                   pypi\ncolorama                   0.4.6            pyhd8ed1ab_1             conda-forge\ncryptography               46.0.2           pypi_0                   pypi\ndav1d                      1.2.1            hd590300_0               conda-forge\ndistro                     1.9.0            pyhd8ed1ab_1             conda-forge\ndnspython                  2.8.0            pyhcf101f3_0             conda-forge\nemail-validator            2.3.0            pyhd8ed1ab_0             conda-forge\nemail_validator            2.3.0            hd8ed1ab_0               conda-forge\nexceptiongroup             1.3.0            pyhd8ed1ab_0             conda-forge\nfilelock                   3.20.0           pyhd8ed1ab_0             conda-forge\ngenericache                0.5.2            pyhd8ed1ab_0             conda-forge\ngiflib                     5.2.2            hd590300_0               conda-forge\nh11                        0.16.0           pyhd8ed1ab_0             conda-forge\nh2                         4.3.0            pyhcf101f3_0             conda-forge\nh5py                       3.14.0           nompi_py313h253c126_101  conda-forge\nhdf5                       1.14.6           nompi_h6e4c0c1_103       conda-forge\nhpack                      4.1.0            pyhd8ed1ab_0             conda-forge\nhttpcore                   1.0.9            pyh29332c3_0             conda-forge\nhttpx                      0.28.1           pyhd8ed1ab_0             conda-forge\nhyperframe                 6.1.0            pyhd8ed1ab_0             conda-forge\nidna                       3.10             pyhd8ed1ab_1             conda-forge\nimagecodecs                2025.8.2         py313h718aa22_4          conda-forge\nimageio                    2.37.0           pyhfb79c49_0             conda-forge\nimportlib-metadata         8.7.0            pyhe01879c_1             conda-forge\njxrlib                     1.1              hd590300_3               conda-forge\nkeyutils                   1.6.3            hb9d3cd8_0               conda-forge\nkrb5                       1.21.3           h659f571_0               conda-forge\nlcms2                      2.17             h717163a_0               conda-forge\nld_impl_linux-64           2.44             ha97dd6f_2               conda-forge\nlerc                       4.0.0            h0aef613_1               conda-forge\nlibaec                     1.1.4            h3f801dc_0               conda-forge\nlibavif16                  1.3.0            h6395336_2               conda-forge\nlibblas                    3.9.0            36_h4a7cf45_openblas     conda-forge\nlibbrotlicommon            1.1.0            hb03c661_4               conda-forge\nlibbrotlidec               1.1.0            hb03c661_4               conda-forge\nlibbrotlienc               1.1.0            hb03c661_4               conda-forge\nlibcblas                   3.9.0            36_h0358290_openblas     conda-forge\nlibcurl                    8.14.1           h332b0f4_0               conda-forge\nlibdeflate                 1.24             h86f0d12_0               conda-forge\nlibedit                    3.1.20250104     pl5321h7949ede_0         conda-forge\nlibev                      4.33             hd590300_2               conda-forge\nlibexpat                   2.7.1            hecca717_0               conda-forge\nlibffi                     3.4.6            h2dba641_1               conda-forge\nlibfreetype                2.14.1           ha770c72_0               conda-forge\nlibfreetype6               2.14.1           h73754d4_0               conda-forge\nlibgcc                     15.2.0           h767d61c_7               conda-forge\nlibgcc-ng                  15.2.0           h69a702a_7               conda-forge\nlibgfortran                15.2.0           h69a702a_7               conda-forge\nlibgfortran5               15.2.0           hcd61629_7               conda-forge\nlibgomp                    15.2.0           h767d61c_7               conda-forge\nlibhwy                     1.3.0            h4c17acf_1               conda-forge\nlibjpeg-turbo              3.1.0            hb9d3cd8_0               conda-forge\nlibjxl                     0.11.1           h6cb5226_4               conda-forge\nliblapack                  3.9.0            36_h47877c9_openblas     conda-forge\nliblzma                    5.8.1            hb9d3cd8_2               conda-forge\nlibmpdec                   4.0.0            hb9d3cd8_0               conda-forge\nlibnghttp2                 1.67.0           had1ee68_0               conda-forge\nlibopenblas                0.3.30           pthreads_h94d23a6_2      conda-forge\nlibpng                     1.6.50           h421ea60_1               conda-forge\nlibsqlite                  3.50.4           h0c1763c_0               conda-forge\nlibssh2                    1.11.1           hcf80075_0               conda-forge\nlibstdcxx                  15.2.0           h8f9b012_7               conda-forge\nlibstdcxx-ng               15.2.0           h4852527_7               conda-forge\nlibtiff                    4.7.1            h8261f1e_0               conda-forge\nlibuuid                    2.41.2           he9a06e4_0               conda-forge\nlibwebp-base               1.6.0            hd42ef1d_0               conda-forge\nlibxcb                     1.17.0           h8a09558_0               conda-forge\nlibzlib                    1.3.1            hb9d3cd8_2               conda-forge\nlibzopfli                  1.0.3            h9c3ff4c_0               conda-forge\nloguru                     0.7.3            pyh707e725_0             conda-forge\nlz4-c                      1.10.0           h5888daf_1               conda-forge\nmarkdown                   3.9              pyhd8ed1ab_0             conda-forge\nmarkdown-it-py             4.0.0            pyhd8ed1ab_0             conda-forge\nmdurl                      0.1.2            pyhd8ed1ab_1             conda-forge\nncurses                    6.5              h2d0b736_3               conda-forge\nnumpy                      2.3.3            py313hf6604e3_0          conda-forge\nopenjpeg                   2.5.4            h55fea9a_0               conda-forge\nopenssl                    3.5.4            h26f9b46_0               conda-forge\npackaging                  25.0             pyh29332c3_1             conda-forge\npandas                     2.3.3            py313h08cd8bf_1          conda-forge\npillow                     11.3.0           py313ha492abd_3          conda-forge\npip                        25.2             pyh145f28c_0             conda-forge\nplatformdirs               4.5.0            pyhcf101f3_0             conda-forge\npthread-stubs              0.4              hb9d3cd8_1002            conda-forge\npycparser                  2.23             pypi_0                   pypi\npydantic                   2.11.10          pyh3cfb1c2_0             conda-forge\npydantic-core              2.33.2           py313h4b2b08d_0          conda-forge\npydantic-settings          2.11.0           pyh3cfb1c2_0             conda-forge\npygithub                   2.8.1            pypi_0                   pypi\npygments                   2.19.2           pyhd8ed1ab_0             conda-forge\npyjwt                      2.10.1           pypi_0                   pypi\npynacl                     1.6.0            pypi_0                   pypi\npython                     3.13.7           h2b335a9_100_cp313       conda-forge\npython-dateutil            2.9.0.post0      pyhe01879c_2             conda-forge\npython-dotenv              1.1.1            pyhe01879c_0             conda-forge\npython-tzdata              2025.2           pyhd8ed1ab_0             conda-forge\npython_abi                 3.13             8_cp313                  conda-forge\npytz                       2025.2           pyhd8ed1ab_0             conda-forge\nrav1e                      0.7.1            h8fae777_3               conda-forge\nreadline                   8.2              h8c095d6_2               conda-forge\nrequests                   2.32.5           pypi_0                   pypi\nrich                       14.1.0           pyhe01879c_0             conda-forge\nruyaml                     0.91.0           pyhd8ed1ab_1             conda-forge\nscipy                      1.16.2           py313h11c21cd_0          conda-forge\nsetuptools                 80.9.0           pyhff2d567_0             conda-forge\nsix                        1.17.0           pyhe01879c_1             conda-forge\nsnappy                     1.2.2            h03e3b7b_0               conda-forge\nsniffio                    1.3.1            pyhd8ed1ab_1             conda-forge\nsvt-av1                    3.1.2            hecca717_0               conda-forge\ntifffile                   2025.10.4        pyhd8ed1ab_0             conda-forge\ntk                         8.6.13           noxft_hd72426e_102       conda-forge\ntqdm                       4.67.1           pyhd8ed1ab_1             conda-forge\ntyping-extensions          4.15.0           h396c80c_0               conda-forge\ntyping-inspection          0.4.2            pyhd8ed1ab_0             conda-forge\ntyping_extensions          4.15.0           pyhcf101f3_0             conda-forge\ntzdata                     2025b            h78e105d_0               conda-forge\nurllib3                    2.5.0            pypi_0                   pypi\nxarray                     2025.1.2         pyhd8ed1ab_0             conda-forge\nxorg-libxau                1.0.12           hb9d3cd8_0               conda-forge\nxorg-libxdmcp              1.1.5            hb9d3cd8_0               conda-forge\nzfp                        1.0.1            h909a3a2_3               conda-forge\nzipp                       3.23.0           pyhd8ed1ab_0             conda-forge\nzlib-ng                    2.2.5            hde8ca8f_0               conda-forge\nzstd                       1.5.7            hb8e6e7a_2               conda-forge\n",
                "source_name": "https://hypha.aicell.io/bioimage-io/artifacts/diplomatic-bug/files/rdf.yaml?version=v0",
                "status": "failed",
                "type": "unknown"
            },
            "error": "test command 'conda run -n 9378e8c7b0ac33627a1981c3d6609bd5a64f8cd438af37bf079e53a5cb06d762 bioimageio test https://hypha.aicell.io/bioimage-io/artifacts/diplomatic-bug/files/rdf.yaml?version=v0 --summary-path=/tmp/tmpg9w6o6pa/pytorch_state_dict/summary.json --determinism=full --stop-early' did not produce a summary file at /tmp/tmpg9w6o6pa/pytorch_state_dict/summary.json",
            "links": [],
            "score": 0.0,
            "status": "failed"
        },
        "bioimageio.core_0.9.4": {
            "badge": null,
            "details": {
                "details": [
                    {
                        "context": {
                            "file_name": "rdf.yaml",
                            "known_files": {
                                "box_prompts.npy": "ba0ed84525fc250518f8edd6936f94c7454e6f62685c902aaf085dbd0a8150c7",
                                "embeddings.npy": "d70b759cf8b99fb293fb67a685af5cae362d5c608f3fb279bf20d7b8d18ec5d8",
                                "environment.yaml": "25d74fdd33d13778435320bb2d4708c01cfa537fa5d578951f7811f9eca6a97a",
                                "https://github.com/computational-cell-analytics/micro-sam": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/diplomatic-bug/files/box_prompts.npy?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/diplomatic-bug/files/cover_lm.png?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/diplomatic-bug/files/documentation.md?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/diplomatic-bug/files/embeddings.npy?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/diplomatic-bug/files/environment.yaml?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/diplomatic-bug/files/input.npy?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/diplomatic-bug/files/mask.npy?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/diplomatic-bug/files/mask_prompts.npy?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/diplomatic-bug/files/point_labels.npy?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/diplomatic-bug/files/point_prompts.npy?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/diplomatic-bug/files/predictor_adaptor.py?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/diplomatic-bug/files/scores.npy?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/diplomatic-bug/files/vit_b.pt?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/diplomatic-bug/files/vit_b_decoder.pt?version=v0": null,
                                "input.npy": "81248ee1a4b156b07640d1ca2b3a3c38af712b380331c04f78106d657a6ad057",
                                "mask.npy": "a2cef32db18495a5851f45ef07ed3eb39616b37968923fa89975ad0c9e611b33",
                                "mask_prompts.npy": "6300c3ff25ece25d5231ca4df0746958a5ff48e3ca20576ac326e23d1962547b",
                                "point_labels.npy": "c4e6b5cec2d9be65ad0cd3b2fab7b6add275d16d5a457208777771362de9bb81",
                                "point_prompts.npy": "132b63d0a07f422c22179a90a0ca1e23b5685b7d19128f0a3023cc2c57f5c355",
                                "predictor_adaptor.py": "c55a850510e70b6b815afbec1d19da92792de97c4cf4384ba95d0024157f5c5d",
                                "scores.npy": "ecb975233a05777133befd4e01359320c167aa9633f81b3205cdd58a7fd7ad08",
                                "vit_b.pt": "e684636c775be03afc36335525584cf239a050ad70650ee85e50f8b55eba8e7f",
                                "vit_b_decoder.pt": "a23c636b3619c96838ed8ce862d6e88fb7e3b5b6c43b646e41b415c07ed81523"
                            },
                            "original_source_name": null,
                            "perform_io_checks": true,
                            "root": "https://hypha.aicell.io/bioimage-io/artifacts/diplomatic-bug/files?version=v0",
                            "update_hashes": false
                        },
                        "errors": [],
                        "loc": [],
                        "name": "Successfully created `ModelDescr` instance.",
                        "recommended_env": null,
                        "saved_conda_compare": null,
                        "status": "passed",
                        "warnings": []
                    },
                    {
                        "context": {
                            "file_name": "rdf.yaml",
                            "known_files": {
                                "box_prompts.npy": "ba0ed84525fc250518f8edd6936f94c7454e6f62685c902aaf085dbd0a8150c7",
                                "embeddings.npy": "d70b759cf8b99fb293fb67a685af5cae362d5c608f3fb279bf20d7b8d18ec5d8",
                                "environment.yaml": "25d74fdd33d13778435320bb2d4708c01cfa537fa5d578951f7811f9eca6a97a",
                                "https://github.com/computational-cell-analytics/micro-sam": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/diplomatic-bug/files/box_prompts.npy?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/diplomatic-bug/files/cover_lm.png?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/diplomatic-bug/files/documentation.md?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/diplomatic-bug/files/embeddings.npy?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/diplomatic-bug/files/environment.yaml?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/diplomatic-bug/files/input.npy?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/diplomatic-bug/files/mask.npy?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/diplomatic-bug/files/mask_prompts.npy?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/diplomatic-bug/files/point_labels.npy?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/diplomatic-bug/files/point_prompts.npy?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/diplomatic-bug/files/predictor_adaptor.py?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/diplomatic-bug/files/scores.npy?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/diplomatic-bug/files/vit_b.pt?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/diplomatic-bug/files/vit_b_decoder.pt?version=v0": null,
                                "input.npy": "81248ee1a4b156b07640d1ca2b3a3c38af712b380331c04f78106d657a6ad057",
                                "mask.npy": "a2cef32db18495a5851f45ef07ed3eb39616b37968923fa89975ad0c9e611b33",
                                "mask_prompts.npy": "6300c3ff25ece25d5231ca4df0746958a5ff48e3ca20576ac326e23d1962547b",
                                "point_labels.npy": "c4e6b5cec2d9be65ad0cd3b2fab7b6add275d16d5a457208777771362de9bb81",
                                "point_prompts.npy": "132b63d0a07f422c22179a90a0ca1e23b5685b7d19128f0a3023cc2c57f5c355",
                                "predictor_adaptor.py": "c55a850510e70b6b815afbec1d19da92792de97c4cf4384ba95d0024157f5c5d",
                                "scores.npy": "ecb975233a05777133befd4e01359320c167aa9633f81b3205cdd58a7fd7ad08",
                                "vit_b.pt": "e684636c775be03afc36335525584cf239a050ad70650ee85e50f8b55eba8e7f",
                                "vit_b_decoder.pt": "a23c636b3619c96838ed8ce862d6e88fb7e3b5b6c43b646e41b415c07ed81523"
                            },
                            "original_source_name": null,
                            "perform_io_checks": true,
                            "root": "https://hypha.aicell.io/bioimage-io/artifacts/diplomatic-bug/files?version=v0",
                            "update_hashes": false
                        },
                        "errors": [],
                        "loc": [],
                        "name": "bioimageio.spec format validation model 0.5.5",
                        "recommended_env": null,
                        "saved_conda_compare": null,
                        "status": "passed",
                        "warnings": [
                            {
                                "loc": [
                                    "inputs",
                                    0,
                                    "sample_tensor"
                                ],
                                "msg": "Needs to be filled for FAIR compliance",
                                "severity": 35,
                                "type": "warning"
                            },
                            {
                                "loc": [
                                    "inputs",
                                    1,
                                    "sample_tensor"
                                ],
                                "msg": "Needs to be filled for FAIR compliance",
                                "severity": 35,
                                "type": "warning"
                            },
                            {
                                "loc": [
                                    "inputs",
                                    2,
                                    "sample_tensor"
                                ],
                                "msg": "Needs to be filled for FAIR compliance",
                                "severity": 35,
                                "type": "warning"
                            },
                            {
                                "loc": [
                                    "inputs",
                                    3,
                                    "sample_tensor"
                                ],
                                "msg": "Needs to be filled for FAIR compliance",
                                "severity": 35,
                                "type": "warning"
                            },
                            {
                                "loc": [
                                    "inputs",
                                    4,
                                    "sample_tensor"
                                ],
                                "msg": "Needs to be filled for FAIR compliance",
                                "severity": 35,
                                "type": "warning"
                            },
                            {
                                "loc": [
                                    "inputs",
                                    5,
                                    "sample_tensor"
                                ],
                                "msg": "Needs to be filled for FAIR compliance",
                                "severity": 35,
                                "type": "warning"
                            },
                            {
                                "loc": [
                                    "outputs",
                                    0,
                                    "sample_tensor"
                                ],
                                "msg": "Needs to be filled for FAIR compliance",
                                "severity": 35,
                                "type": "warning"
                            },
                            {
                                "loc": [
                                    "outputs",
                                    1,
                                    "sample_tensor"
                                ],
                                "msg": "Needs to be filled for FAIR compliance",
                                "severity": 35,
                                "type": "warning"
                            },
                            {
                                "loc": [
                                    "outputs",
                                    2,
                                    "sample_tensor"
                                ],
                                "msg": "Needs to be filled for FAIR compliance",
                                "severity": 35,
                                "type": "warning"
                            }
                        ]
                    },
                    {
                        "context": null,
                        "errors": [],
                        "loc": [
                            "weights",
                            "pytorch_state_dict"
                        ],
                        "name": "Reproduce test outputs from test inputs (pytorch_state_dict)",
                        "recommended_env": {
                            "channels": [
                                "pytorch",
                                "conda-forge",
                                "nodefaults"
                            ],
                            "dependencies": [
                                "conda-forge::bioimageio.core",
                                "pip",
                                "segment-anything"
                            ],
                            "name": "sam"
                        },
                        "saved_conda_compare": "Success. All the packages in the specification file are present in the environment with matching version and build string.\n",
                        "status": "passed",
                        "warnings": []
                    },
                    {
                        "context": null,
                        "errors": [],
                        "loc": [
                            "weights",
                            "pytorch_state_dict"
                        ],
                        "name": "Run pytorch_state_dict inference for inputs with batch_size: 1 and size parameter n: 0",
                        "recommended_env": null,
                        "saved_conda_compare": null,
                        "status": "passed",
                        "warnings": []
                    },
                    {
                        "context": null,
                        "errors": [],
                        "loc": [
                            "weights",
                            "pytorch_state_dict"
                        ],
                        "name": "Run pytorch_state_dict inference for inputs with batch_size: 1 and size parameter n: 1",
                        "recommended_env": null,
                        "saved_conda_compare": null,
                        "status": "passed",
                        "warnings": []
                    },
                    {
                        "context": null,
                        "errors": [],
                        "loc": [
                            "weights",
                            "pytorch_state_dict"
                        ],
                        "name": "Run pytorch_state_dict inference for inputs with batch_size: 1 and size parameter n: 2",
                        "recommended_env": null,
                        "saved_conda_compare": null,
                        "status": "passed",
                        "warnings": []
                    },
                    {
                        "context": null,
                        "errors": [
                            {
                                "loc": [
                                    "weights",
                                    "pytorch_state_dict"
                                ],
                                "msg": "",
                                "traceback_html": "<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<style>\n.r1 {color: #800000; text-decoration-color: #800000}\n.r2 {color: #800000; text-decoration-color: #800000; font-weight: bold}\n.r3 {color: #bf7f7f; text-decoration-color: #bf7f7f; font-weight: bold}\n.r4 {color: #7f7f7f; text-decoration-color: #7f7f7f}\n.r5 {color: #0000ff; text-decoration-color: #0000ff}\n.r6 {color: #ff00ff; text-decoration-color: #ff00ff}\n.r7 {color: #00ffff; text-decoration-color: #00ffff}\n.r8 {color: #808000; text-decoration-color: #808000}\n.r9 {color: #00ffff; text-decoration-color: #00ffff; font-weight: bold; text-decoration: underline}\n.r10 {font-weight: bold; text-decoration: underline}\n.r11 {color: #ff00ff; text-decoration-color: #ff00ff; font-weight: bold}\n.r12 {color: #808080; text-decoration-color: #808080}\n.r13 {color: #00ff00; text-decoration-color: #00ff00}\n.r14 {font-weight: bold}\n.r15 {color: #bfbf7f; text-decoration-color: #bfbf7f}\n.r16 {color: #0000ff; text-decoration-color: #0000ff; font-weight: bold; text-decoration: underline}\n.r17 {color: #ff0000; text-decoration-color: #ff0000; font-weight: bold}\nbody {\n    color: #000000;\n    background-color: #ffffff;\n}\n</style>\n</head>\n<body>\n    <pre style=\"font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><code style=\"font-family:inherit\"><span class=\"r1\">‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ </span><span class=\"r2\">Traceback </span><span class=\"r3\">(most recent call last)</span><span class=\"r1\"> ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/9378e8c7b0ac33627a1981c3d6609bd5a64f8cd438af37bf079e53a5cb06d762/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 998 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>) <span class=\"r5\">as</span> prediction_pipeline:                                                         <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 999 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">for</span> n, batch_size, inputs, exptected_output_shape <span class=\"r6\">in</span> generate_test_cases():   <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">1000 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span>error: Optional[<span class=\"r7\">str</span>] = <span class=\"r5\">None</span>                                               <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span>1001 <span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span>result = prediction_pipeline.predict_sample_without_blocking(inputs)      <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">1002 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">if</span> <span class=\"r7\">len</span>(result.members) != <span class=\"r7\">len</span>(exptected_output_shape):                    <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">1003 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span>error = (                                                             <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">1004 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r8\">f&quot;Expected {</span><span class=\"r7\">len</span>(exptected_output_shape)<span class=\"r8\">} outputs,&quot;</span>                <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/9378e8c7b0ac33627a1981c3d6609bd5a64f8cd438af37bf079e53a5cb06d762/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">157 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">if</span> <span class=\"r6\">not</span> skip_preprocessing:                                                         <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">158 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r7\">self</span>.apply_preprocessing(sample)                                               <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">159 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>                                                                                   <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span>160 <span class=\"r4\">‚îÇ   ‚îÇ   </span>output = <span class=\"r9\">self</span><span class=\"r10\">._adapter.forward(sample)</span>                                             <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">161 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">if</span> <span class=\"r6\">not</span> skip_postprocessing:                                                        <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">162 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r7\">self</span>.apply_postprocessing(output)                                              <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">163 </span>                                                                                           <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/9378e8c7b0ac33627a1981c3d6609bd5a64f8cd438af37bf079e53a5cb06d762/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">199 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span>)                                                                              <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">200 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">for</span> in_id, in_order <span class=\"r6\">in</span> <span class=\"r7\">zip</span>(<span class=\"r7\">self</span>._input_ids, <span class=\"r7\">self</span>._input_axes)                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">201 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>]                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span>202 <span class=\"r4\">‚îÇ   ‚îÇ   </span>output_arrays = <span class=\"r9\">self</span><span class=\"r10\">._forward_impl(input_arrays)</span>                                   <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">203 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">assert</span> <span class=\"r7\">len</span>(output_arrays) &lt;= <span class=\"r7\">len</span>(<span class=\"r7\">self</span>._output_ids)                                 <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">204 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>output_tensors = [                                                                 <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">205 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">None</span> <span class=\"r5\">if</span> a <span class=\"r6\">is</span> <span class=\"r5\">None</span> <span class=\"r5\">else</span> Tensor(a, dims=d)                                       <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/9378e8c7b0ac33627a1981c3d6609bd5a64f8cd438af37bf079e53a5cb06d762/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 62 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span>assert_never(<span class=\"r7\">self</span>._mode)                                                       <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 63 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>                                                                                   <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 64 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">with</span> ctxt():                                                                       <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span> 65 <span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span>model_out = <span class=\"r9\">self</span><span class=\"r10\">._model(*tensors)</span>                                              <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 66 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>                                                                                   <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 67 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">if</span> is_tuple(model_out) <span class=\"r6\">or</span> is_list(model_out):                                      <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 68 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span>model_out_seq = model_out                                                      <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/9378e8c7b0ac33627a1981c3d6609bd5a64f8cd438af37bf079e53a5cb06d762/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">1748 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">if</span> <span class=\"r7\">self</span>._compiled_call_impl <span class=\"r6\">is</span> <span class=\"r6\">not</span> <span class=\"r5\">None</span>:                                          <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">1749 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">return</span> <span class=\"r7\">self</span>._compiled_call_impl(*args, **kwargs)  <span class=\"r4\"># type: ignore[misc]</span>        <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">1750 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">else</span>:                                                                             <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span>1751 <span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">return</span> <span class=\"r9\">self</span><span class=\"r10\">._call_impl(*args, **kwargs)</span>                                       <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">1752 </span><span class=\"r4\">‚îÇ   </span>                                                                                      <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">1753 </span><span class=\"r4\">‚îÇ   </span><span class=\"r4\"># torchrec tests the code consistency with the following code</span>                         <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">1754 </span><span class=\"r4\">‚îÇ   </span><span class=\"r4\"># fmt: off</span>                                                                            <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/9378e8c7b0ac33627a1981c3d6609bd5a64f8cd438af37bf079e53a5cb06d762/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">1759 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">if</span> <span class=\"r6\">not</span> (<span class=\"r7\">self</span>._backward_hooks <span class=\"r6\">or</span> <span class=\"r7\">self</span>._backward_pre_hooks <span class=\"r6\">or</span> <span class=\"r7\">self</span>._forward_hooks <span class=\"r6\">o</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">1760 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r6\">or</span> _global_backward_pre_hooks <span class=\"r6\">or</span> _global_backward_hooks                   <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">1761 </span><span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r6\">or</span> _global_forward_hooks <span class=\"r6\">or</span> _global_forward_pre_hooks):                   <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span>1762 <span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">return</span> <span class=\"r10\">forward_call(*args, **kwargs)</span>                                          <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">1763 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">1764 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>result = <span class=\"r5\">None</span>                                                                     <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">1765 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>called_always_called_hooks = <span class=\"r7\">set</span>()                                                <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/usr/share/miniconda/envs/9378e8c7b0ac33627a1981c3d6609bd5a64f8cd438af37bf079e53a5cb06d762/lib/p</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">113 </span><span class=\"r4\">‚îÇ   </span><span class=\"r11\">@functools</span>.wraps(func)                                                                 <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">114 </span><span class=\"r4\">‚îÇ   </span><span class=\"r5\">def</span><span class=\"r12\"> </span><span class=\"r13\">decorate_context</span>(*args, **kwargs):                                                 <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">115 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">with</span> ctx_factory():                                                                <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span>116 <span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r5\">return</span> <span class=\"r10\">func(*args, **kwargs)</span>                                                   <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">117 </span><span class=\"r4\">‚îÇ   </span>                                                                                       <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">118 </span><span class=\"r4\">‚îÇ   </span><span class=\"r5\">return</span> decorate_context                                                                <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\">119 </span>                                                                                           <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r4\">/tmp/tmpd50i35k7/</span><span class=\"r14\">predictor_adaptor_c55a850510e70b6b815afbec1d19da92792de97c4cf4384ba95d0024157f5</span> <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>                                                                                                  <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 58 </span><span class=\"r15\">‚îÇ   ‚îÇ   </span><span class=\"r8\">&quot;&quot;&quot;</span>                                                                                <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 59 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>batch_size = image.shape[<span class=\"r5\">0</span>]                                                        <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 60 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">if</span> batch_size != <span class=\"r5\">1</span>:                                                                <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span> <span class=\"r1\">‚ù± </span> 61 <span class=\"r4\">‚îÇ   ‚îÇ   ‚îÇ   </span><span class=\"r16\">raise</span><span class=\"r10\"> </span><span class=\"r9\">ValueError</span>                                                               <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 62 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span>                                                                                   <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 63 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r4\"># We have image embeddings set and image embeddings were not passed.</span>               <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚îÇ</span>   <span class=\"r4\"> 64 </span><span class=\"r4\">‚îÇ   ‚îÇ   </span><span class=\"r5\">if</span> <span class=\"r7\">self</span>.sam.is_image_set <span class=\"r6\">and</span> embeddings <span class=\"r6\">is</span> <span class=\"r5\">None</span>:                                   <span class=\"r1\">‚îÇ</span>\n<span class=\"r1\">‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ</span>\n<span class=\"r17\">ValueError</span>\n</code></pre>\n</body>\n</html>\n",
                                "traceback_md": "‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Traceback (most recent call last) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ /usr/share/miniconda/envs/9378e8c7b0ac33627a1981c3d6609bd5a64f8cd438af37bf079e53a5cb06d762/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ    998 ‚îÇ   ‚îÇ   ) as prediction_pipeline:                                                         ‚îÇ\n‚îÇ    999 ‚îÇ   ‚îÇ   ‚îÇ   for n, batch_size, inputs, exptected_output_shape in generate_test_cases():   ‚îÇ\n‚îÇ   1000 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   error: Optional[str] = None                                               ‚îÇ\n‚îÇ ‚ù± 1001 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   result = prediction_pipeline.predict_sample_without_blocking(inputs)      ‚îÇ\n‚îÇ   1002 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   if len(result.members) != len(exptected_output_shape):                    ‚îÇ\n‚îÇ   1003 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   error = (                                                             ‚îÇ\n‚îÇ   1004 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   f\"Expected {len(exptected_output_shape)} outputs,\"                ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ /usr/share/miniconda/envs/9378e8c7b0ac33627a1981c3d6609bd5a64f8cd438af37bf079e53a5cb06d762/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ   157 ‚îÇ   ‚îÇ   if not skip_preprocessing:                                                         ‚îÇ\n‚îÇ   158 ‚îÇ   ‚îÇ   ‚îÇ   self.apply_preprocessing(sample)                                               ‚îÇ\n‚îÇ   159 ‚îÇ   ‚îÇ                                                                                      ‚îÇ\n‚îÇ ‚ù± 160 ‚îÇ   ‚îÇ   output = self._adapter.forward(sample)                                             ‚îÇ\n‚îÇ   161 ‚îÇ   ‚îÇ   if not skip_postprocessing:                                                        ‚îÇ\n‚îÇ   162 ‚îÇ   ‚îÇ   ‚îÇ   self.apply_postprocessing(output)                                              ‚îÇ\n‚îÇ   163                                                                                            ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ /usr/share/miniconda/envs/9378e8c7b0ac33627a1981c3d6609bd5a64f8cd438af37bf079e53a5cb06d762/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ   199 ‚îÇ   ‚îÇ   ‚îÇ   )                                                                              ‚îÇ\n‚îÇ   200 ‚îÇ   ‚îÇ   ‚îÇ   for in_id, in_order in zip(self._input_ids, self._input_axes)                  ‚îÇ\n‚îÇ   201 ‚îÇ   ‚îÇ   ]                                                                                  ‚îÇ\n‚îÇ ‚ù± 202 ‚îÇ   ‚îÇ   output_arrays = self._forward_impl(input_arrays)                                   ‚îÇ\n‚îÇ   203 ‚îÇ   ‚îÇ   assert len(output_arrays) <= len(self._output_ids)                                 ‚îÇ\n‚îÇ   204 ‚îÇ   ‚îÇ   output_tensors = [                                                                 ‚îÇ\n‚îÇ   205 ‚îÇ   ‚îÇ   ‚îÇ   None if a is None else Tensor(a, dims=d)                                       ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ /usr/share/miniconda/envs/9378e8c7b0ac33627a1981c3d6609bd5a64f8cd438af37bf079e53a5cb06d762/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ    62 ‚îÇ   ‚îÇ   ‚îÇ   assert_never(self._mode)                                                       ‚îÇ\n‚îÇ    63 ‚îÇ   ‚îÇ                                                                                      ‚îÇ\n‚îÇ    64 ‚îÇ   ‚îÇ   with ctxt():                                                                       ‚îÇ\n‚îÇ ‚ù±  65 ‚îÇ   ‚îÇ   ‚îÇ   model_out = self._model(*tensors)                                              ‚îÇ\n‚îÇ    66 ‚îÇ   ‚îÇ                                                                                      ‚îÇ\n‚îÇ    67 ‚îÇ   ‚îÇ   if is_tuple(model_out) or is_list(model_out):                                      ‚îÇ\n‚îÇ    68 ‚îÇ   ‚îÇ   ‚îÇ   model_out_seq = model_out                                                      ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ /usr/share/miniconda/envs/9378e8c7b0ac33627a1981c3d6609bd5a64f8cd438af37bf079e53a5cb06d762/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ   1748 ‚îÇ   ‚îÇ   if self._compiled_call_impl is not None:                                          ‚îÇ\n‚îÇ   1749 ‚îÇ   ‚îÇ   ‚îÇ   return self._compiled_call_impl(*args, **kwargs)  # type: ignore[misc]        ‚îÇ\n‚îÇ   1750 ‚îÇ   ‚îÇ   else:                                                                             ‚îÇ\n‚îÇ ‚ù± 1751 ‚îÇ   ‚îÇ   ‚îÇ   return self._call_impl(*args, **kwargs)                                       ‚îÇ\n‚îÇ   1752 ‚îÇ                                                                                         ‚îÇ\n‚îÇ   1753 ‚îÇ   # torchrec tests the code consistency with the following code                         ‚îÇ\n‚îÇ   1754 ‚îÇ   # fmt: off                                                                            ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ /usr/share/miniconda/envs/9378e8c7b0ac33627a1981c3d6609bd5a64f8cd438af37bf079e53a5cb06d762/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ   1759 ‚îÇ   ‚îÇ   if not (self._backward_hooks or self._backward_pre_hooks or self._forward_hooks o ‚îÇ\n‚îÇ   1760 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   or _global_backward_pre_hooks or _global_backward_hooks                   ‚îÇ\n‚îÇ   1761 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   or _global_forward_hooks or _global_forward_pre_hooks):                   ‚îÇ\n‚îÇ ‚ù± 1762 ‚îÇ   ‚îÇ   ‚îÇ   return forward_call(*args, **kwargs)                                          ‚îÇ\n‚îÇ   1763 ‚îÇ   ‚îÇ                                                                                     ‚îÇ\n‚îÇ   1764 ‚îÇ   ‚îÇ   result = None                                                                     ‚îÇ\n‚îÇ   1765 ‚îÇ   ‚îÇ   called_always_called_hooks = set()                                                ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ /usr/share/miniconda/envs/9378e8c7b0ac33627a1981c3d6609bd5a64f8cd438af37bf079e53a5cb06d762/lib/p ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ   113 ‚îÇ   @functools.wraps(func)                                                                 ‚îÇ\n‚îÇ   114 ‚îÇ   def decorate_context(*args, **kwargs):                                                 ‚îÇ\n‚îÇ   115 ‚îÇ   ‚îÇ   with ctx_factory():                                                                ‚îÇ\n‚îÇ ‚ù± 116 ‚îÇ   ‚îÇ   ‚îÇ   return func(*args, **kwargs)                                                   ‚îÇ\n‚îÇ   117 ‚îÇ                                                                                          ‚îÇ\n‚îÇ   118 ‚îÇ   return decorate_context                                                                ‚îÇ\n‚îÇ   119                                                                                            ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ /tmp/tmpd50i35k7/predictor_adaptor_c55a850510e70b6b815afbec1d19da92792de97c4cf4384ba95d0024157f5 ‚îÇ\n‚îÇ                                                                                                  ‚îÇ\n‚îÇ    58 ‚îÇ   ‚îÇ   \"\"\"                                                                                ‚îÇ\n‚îÇ    59 ‚îÇ   ‚îÇ   batch_size = image.shape[0]                                                        ‚îÇ\n‚îÇ    60 ‚îÇ   ‚îÇ   if batch_size != 1:                                                                ‚îÇ\n‚îÇ ‚ù±  61 ‚îÇ   ‚îÇ   ‚îÇ   raise ValueError                                                               ‚îÇ\n‚îÇ    62 ‚îÇ   ‚îÇ                                                                                      ‚îÇ\n‚îÇ    63 ‚îÇ   ‚îÇ   # We have image embeddings set and image embeddings were not passed.               ‚îÇ\n‚îÇ    64 ‚îÇ   ‚îÇ   if self.sam.is_image_set and embeddings is None:                                   ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\nValueError\n",
                                "type": "bioimageio.core",
                                "with_traceback": true
                            }
                        ],
                        "loc": [
                            "weights",
                            "pytorch_state_dict"
                        ],
                        "name": "Run pytorch_state_dict inference for parametrized inputs",
                        "recommended_env": null,
                        "saved_conda_compare": null,
                        "status": "failed",
                        "warnings": []
                    }
                ],
                "env": [
                    [
                        "bioimageio.spec",
                        "0.5.5.6",
                        "",
                        ""
                    ],
                    [
                        "bioimageio.core",
                        "0.9.4",
                        "",
                        ""
                    ]
                ],
                "format_version": "0.5.5",
                "id": "diplomatic-bug",
                "metadata_completeness": 0.6607142857142857,
                "name": "bioimageio format validation",
                "saved_conda_list": "# packages in environment at /usr/share/miniconda/envs/9378e8c7b0ac33627a1981c3d6609bd5a64f8cd438af37bf079e53a5cb06d762:\n#\n# Name                                  Version          Build                         Channel\n_openmp_mutex                           4.5              5_kmp_llvm                    conda-forge\nalsa-lib                                1.2.14           hb9d3cd8_0                    conda-forge\nannotated-types                         0.7.0            pyhd8ed1ab_1                  conda-forge\nanyio                                   4.11.0           pyhcf101f3_0                  conda-forge\naom                                     3.9.1            hac33072_0                    conda-forge\nattr                                    2.5.2            h39aace5_0                    conda-forge\nbioimageio.core                         0.9.4            pyhd8ed1ab_0                  conda-forge\nbioimageio.spec                         0.5.5.6          pyhd8ed1ab_0                  conda-forge\nblosc                                   1.21.6           he440d0b_1                    conda-forge\nbrotli                                  1.1.0            hb03c661_4                    conda-forge\nbrotli-bin                              1.1.0            hb03c661_4                    conda-forge\nbrunsli                                 0.1              he3183e4_1                    conda-forge\nbzip2                                   1.0.8            hda65f42_8                    conda-forge\nc-ares                                  1.34.5           hb9d3cd8_0                    conda-forge\nc-blosc2                                2.21.3           h4cfbee9_0                    conda-forge\nca-certificates                         2025.10.5        hbd8a1cb_0                    conda-forge\ncached-property                         1.5.2            hd8ed1ab_1                    conda-forge\ncached_property                         1.5.2            pyha770c72_1                  conda-forge\ncairo                                   1.18.4           h3394656_0                    conda-forge\ncertifi                                 2025.10.5        pyhd8ed1ab_0                  conda-forge\ncharls                                  2.4.2            h59595ed_0                    conda-forge\ncolorama                                0.4.6            pyhd8ed1ab_1                  conda-forge\ncoloredlogs                             15.0.1           pyhd8ed1ab_4                  conda-forge\ncontourpy                               1.3.3            py313h7037e92_2               conda-forge\ncpython                                 3.13.9           py313hd8ed1ab_101             conda-forge\ncycler                                  0.12.1           pyhd8ed1ab_1                  conda-forge\ncyrus-sasl                              2.1.28           hd9c7081_0                    conda-forge\ndav1d                                   1.2.1            hd590300_0                    conda-forge\ndbus                                    1.16.2           h3c4dab8_0                    conda-forge\ndistro                                  1.9.0            pyhd8ed1ab_1                  conda-forge\ndnspython                               2.8.0            pyhcf101f3_0                  conda-forge\ndouble-conversion                       3.3.1            h5888daf_0                    conda-forge\nemail-validator                         2.3.0            pyhd8ed1ab_0                  conda-forge\nemail_validator                         2.3.0            hd8ed1ab_0                    conda-forge\nexceptiongroup                          1.3.0            pyhd8ed1ab_0                  conda-forge\nffmpeg                                  8.0.0            gpl_hbbdf940_906              conda-forge\nfilelock                                3.20.0           pyhd8ed1ab_0                  conda-forge\nfont-ttf-dejavu-sans-mono               2.37             hab24e00_0                    conda-forge\nfont-ttf-inconsolata                    3.000            h77eed37_0                    conda-forge\nfont-ttf-source-code-pro                2.038            h77eed37_0                    conda-forge\nfont-ttf-ubuntu                         0.83             h77eed37_3                    conda-forge\nfontconfig                              2.15.0           h7e30c49_1                    conda-forge\nfonts-conda-ecosystem                   1                0                             conda-forge\nfonts-conda-forge                       1                0                             conda-forge\nfonttools                               4.60.1           py313h3dea7bd_0               conda-forge\nfreeglut                                3.2.2            ha6d2627_3                    conda-forge\nfreetype                                2.14.1           ha770c72_0                    conda-forge\nfribidi                                 1.0.16           hb03c661_0                    conda-forge\nfsspec                                  2025.9.0         pyhd8ed1ab_0                  conda-forge\ngdk-pixbuf                              2.44.4           h2b0a6b4_0                    conda-forge\ngenericache                             0.5.2            pyhd8ed1ab_0                  conda-forge\ngettext                                 0.25.1           h3f43e3d_1                    conda-forge\ngettext-tools                           0.25.1           h3f43e3d_1                    conda-forge\ngiflib                                  5.2.2            hd590300_0                    conda-forge\nglslang                                 16.0.0           hfd11570_0                    conda-forge\ngmp                                     6.3.0            hac33072_2                    conda-forge\ngmpy2                                   2.2.1            py313h86d8783_1               conda-forge\ngraphite2                               1.3.14           hecca717_2                    conda-forge\nh11                                     0.16.0           pyhd8ed1ab_0                  conda-forge\nh2                                      4.3.0            pyhcf101f3_0                  conda-forge\nh5py                                    3.15.1           nompi_py313h253c126_100       conda-forge\nharfbuzz                                12.1.0           h15599e2_0                    conda-forge\nhdf5                                    1.14.6           nompi_h6e4c0c1_103            conda-forge\nhpack                                   4.1.0            pyhd8ed1ab_0                  conda-forge\nhttpcore                                1.0.9            pyh29332c3_0                  conda-forge\nhttpx                                   0.28.1           pyhd8ed1ab_0                  conda-forge\nhumanfriendly                           10.0             pyh707e725_8                  conda-forge\nhyperframe                              6.1.0            pyhd8ed1ab_0                  conda-forge\nicu                                     75.1             he02047a_0                    conda-forge\nidna                                    3.11             pyhd8ed1ab_0                  conda-forge\nimagecodecs                             2025.8.2         py313h718aa22_4               conda-forge\nimageio                                 2.37.0           pyhfb79c49_0                  conda-forge\nimath                                   3.2.2            hde8ca8f_0                    conda-forge\nimportlib-metadata                      8.7.0            pyhe01879c_1                  conda-forge\nintel-gmmlib                            22.8.2           hb700be7_0                    conda-forge\nintel-media-driver                      25.3.4           hecca717_0                    conda-forge\njasper                                  4.2.8            he3c4edf_0                    conda-forge\njinja2                                  3.1.6            pyhd8ed1ab_0                  conda-forge\njxrlib                                  1.1              hd590300_3                    conda-forge\nkeyutils                                1.6.3            hb9d3cd8_0                    conda-forge\nkiwisolver                              1.4.9            py313hc8edb43_1               conda-forge\nkrb5                                    1.21.3           h659f571_0                    conda-forge\nlame                                    3.100            h166bdaf_1003                 conda-forge\nlcms2                                   2.17             h717163a_0                    conda-forge\nld_impl_linux-64                        2.44             h1aa0949_4                    conda-forge\nlerc                                    4.0.0            h0aef613_1                    conda-forge\nlevel-zero                              1.25.1           hb700be7_0                    conda-forge\nlibabseil                               20250512.1       cxx17_hba17884_0              conda-forge\nlibaec                                  1.1.4            h3f801dc_0                    conda-forge\nlibasprintf                             0.25.1           h3f43e3d_1                    conda-forge\nlibasprintf-devel                       0.25.1           h3f43e3d_1                    conda-forge\nlibass                                  0.17.4           h96ad9f0_0                    conda-forge\nlibavif16                               1.3.0            h6395336_2                    conda-forge\nlibblas                                 3.9.0            37_h4a7cf45_openblas          conda-forge\nlibbrotlicommon                         1.1.0            hb03c661_4                    conda-forge\nlibbrotlidec                            1.1.0            hb03c661_4                    conda-forge\nlibbrotlienc                            1.1.0            hb03c661_4                    conda-forge\nlibcap                                  2.76             h0b2e76d_0                    conda-forge\nlibcblas                                3.9.0            37_h0358290_openblas          conda-forge\nlibclang-cpp21.1                        21.1.4           default_h99862b1_0            conda-forge\nlibclang13                              21.1.4           default_h746c552_0            conda-forge\nlibcups                                 2.3.3            hb8b1518_5                    conda-forge\nlibcurl                                 8.16.0           h4e3cde8_0                    conda-forge\nlibde265                                1.0.15           h00ab1b0_0                    conda-forge\nlibdeflate                              1.24             h86f0d12_0                    conda-forge\nlibdrm                                  2.4.125          hb03c661_1                    conda-forge\nlibedit                                 3.1.20250104     pl5321h7949ede_0              conda-forge\nlibegl                                  1.7.0            ha4b6fd6_2                    conda-forge\nlibev                                   4.33             hd590300_2                    conda-forge\nlibexpat                                2.7.1            hecca717_0                    conda-forge\nlibffi                                  3.5.2            h9ec8514_0                    conda-forge\nlibflac                                 1.4.3            h59595ed_0                    conda-forge\nlibfreetype                             2.14.1           ha770c72_0                    conda-forge\nlibfreetype6                            2.14.1           h73754d4_0                    conda-forge\nlibgcc                                  15.2.0           h767d61c_7                    conda-forge\nlibgcc-ng                               15.2.0           h69a702a_7                    conda-forge\nlibgcrypt-lib                           1.11.1           hb9d3cd8_0                    conda-forge\nlibgettextpo                            0.25.1           h3f43e3d_1                    conda-forge\nlibgettextpo-devel                      0.25.1           h3f43e3d_1                    conda-forge\nlibgfortran                             15.2.0           h69a702a_7                    conda-forge\nlibgfortran5                            15.2.0           hcd61629_7                    conda-forge\nlibgl                                   1.7.0            ha4b6fd6_2                    conda-forge\nlibglib                                 2.86.0           h32235b2_1                    conda-forge\nlibglu                                  9.0.3            h5888daf_1                    conda-forge\nlibglvnd                                1.7.0            ha4b6fd6_2                    conda-forge\nlibglx                                  1.7.0            ha4b6fd6_2                    conda-forge\nlibgpg-error                            1.55             h3f2d84a_0                    conda-forge\nlibheif                                 1.19.7           gpl_hc18d805_100              conda-forge\nlibhwloc                                2.12.1           default_h7f8ec31_1002         conda-forge\nlibhwy                                  1.3.0            h4c17acf_1                    conda-forge\nlibiconv                                1.18             h3b78370_2                    conda-forge\nlibjpeg-turbo                           3.1.0            hb9d3cd8_0                    conda-forge\nlibjxl                                  0.11.1           h6cb5226_4                    conda-forge\nliblapack                               3.9.0            37_h47877c9_openblas          conda-forge\nliblapacke                              3.9.0            37_h6ae95b6_openblas          conda-forge\nlibllvm21                               21.1.4           hf7376ad_0                    conda-forge\nliblzma                                 5.8.1            hb9d3cd8_2                    conda-forge\nlibmpdec                                4.0.0            hb9d3cd8_0                    conda-forge\nlibnghttp2                              1.67.0           had1ee68_0                    conda-forge\nlibntlm                                 1.8              hb9d3cd8_0                    conda-forge\nlibogg                                  1.3.5            hd0c01bc_1                    conda-forge\nlibopenblas                             0.3.30           pthreads_h94d23a6_2           conda-forge\nlibopencv                               4.12.0           qt6_py313hee252e0_607         conda-forge\nlibopengl                               1.7.0            ha4b6fd6_2                    conda-forge\nlibopenvino                             2025.2.0         hb617929_1                    conda-forge\nlibopenvino-auto-batch-plugin           2025.2.0         hed573e4_1                    conda-forge\nlibopenvino-auto-plugin                 2025.2.0         hed573e4_1                    conda-forge\nlibopenvino-hetero-plugin               2025.2.0         hd41364c_1                    conda-forge\nlibopenvino-intel-cpu-plugin            2025.2.0         hb617929_1                    conda-forge\nlibopenvino-intel-gpu-plugin            2025.2.0         hb617929_1                    conda-forge\nlibopenvino-intel-npu-plugin            2025.2.0         hb617929_1                    conda-forge\nlibopenvino-ir-frontend                 2025.2.0         hd41364c_1                    conda-forge\nlibopenvino-onnx-frontend               2025.2.0         h1862bb8_1                    conda-forge\nlibopenvino-paddle-frontend             2025.2.0         h1862bb8_1                    conda-forge\nlibopenvino-pytorch-frontend            2025.2.0         hecca717_1                    conda-forge\nlibopenvino-tensorflow-frontend         2025.2.0         h0767aad_1                    conda-forge\nlibopenvino-tensorflow-lite-frontend    2025.2.0         hecca717_1                    conda-forge\nlibopus                                 1.5.2            hd0c01bc_0                    conda-forge\nlibpciaccess                            0.18             hb9d3cd8_0                    conda-forge\nlibpng                                  1.6.50           h421ea60_1                    conda-forge\nlibpq                                   18.0             h3675c94_0                    conda-forge\nlibprotobuf                             6.31.1           h49aed37_2                    conda-forge\nlibrsvg                                 2.60.0           h61e6d4b_0                    conda-forge\nlibsndfile                              1.2.2            hc60ed4a_1                    conda-forge\nlibsqlite                               3.50.4           h0c1763c_0                    conda-forge\nlibssh2                                 1.11.1           hcf80075_0                    conda-forge\nlibstdcxx                               15.2.0           h8f9b012_7                    conda-forge\nlibstdcxx-ng                            15.2.0           h4852527_7                    conda-forge\nlibsystemd0                             257.9            h996ca69_0                    conda-forge\nlibtiff                                 4.7.1            h8261f1e_0                    conda-forge\nlibtorch                                2.7.1            cpu_generic_h1322af4_3        conda-forge\nlibudev1                                257.9            h085a93f_0                    conda-forge\nlibunwind                               1.8.3            h65a8314_0                    conda-forge\nliburing                                2.12             hb700be7_0                    conda-forge\nlibusb                                  1.0.29           h73b1eb8_0                    conda-forge\nlibuuid                                 2.41.2           he9a06e4_0                    conda-forge\nlibuv                                   1.51.0           hb03c661_1                    conda-forge\nlibva                                   2.22.0           h4f16b4b_2                    conda-forge\nlibvorbis                               1.3.7            h54a6638_2                    conda-forge\nlibvpl                                  2.15.0           h54a6638_1                    conda-forge\nlibvpx                                  1.14.1           hac33072_0                    conda-forge\nlibvulkan-loader                        1.4.328.1        h5279c79_0                    conda-forge\nlibwebp-base                            1.6.0            hd42ef1d_0                    conda-forge\nlibxcb                                  1.17.0           h8a09558_0                    conda-forge\nlibxcrypt                               4.4.36           hd590300_1                    conda-forge\nlibxkbcommon                            1.12.2           hca5e8e5_0                    conda-forge\nlibxml2                                 2.15.1           h26afc86_0                    conda-forge\nlibxml2-16                              2.15.1           ha9997c6_0                    conda-forge\nlibzlib                                 1.3.1            hb9d3cd8_2                    conda-forge\nlibzopfli                               1.0.3            h9c3ff4c_0                    conda-forge\nllvm-openmp                             21.1.4           h4922eb0_0                    conda-forge\nloguru                                  0.7.3            pyh707e725_0                  conda-forge\nlz4-c                                   1.10.0           h5888daf_1                    conda-forge\nmarkdown                                3.9              pyhd8ed1ab_0                  conda-forge\nmarkdown-it-py                          4.0.0            pyhd8ed1ab_0                  conda-forge\nmarkupsafe                              3.0.3            py313h3dea7bd_0               conda-forge\nmatplotlib-base                         3.10.7           py313h683a580_0               conda-forge\nmdurl                                   0.1.2            pyhd8ed1ab_1                  conda-forge\nml_dtypes                               0.5.1            py313h08cd8bf_1               conda-forge\nmpc                                     1.3.1            h24ddda3_1                    conda-forge\nmpfr                                    4.2.1            h90cbb55_3                    conda-forge\nmpg123                                  1.32.9           hc50e24c_0                    conda-forge\nmpmath                                  1.3.0            pyhd8ed1ab_1                  conda-forge\nmunkres                                 1.1.4            pyhd8ed1ab_1                  conda-forge\nncurses                                 6.5              h2d0b736_3                    conda-forge\nnetworkx                                3.5              pyhe01879c_0                  conda-forge\nnomkl                                   1.0              h5ca1d4c_0                    conda-forge\nnumpy                                   2.3.4            py313hf6604e3_0               conda-forge\nocl-icd                                 2.3.3            hb9d3cd8_0                    conda-forge\nonnx                                    1.19.1           np2py313hc6067f8_0            conda-forge\nonnxruntime                             1.22.0           py313hd753461_0_cpu           conda-forge\nopencl-headers                          2025.06.13       h5888daf_0                    conda-forge\nopencv                                  4.12.0           qt6_py313h6537eeb_607         conda-forge\nopenexr                                 3.4.2            hff891e4_0                    conda-forge\nopenh264                                2.6.0            hc22cd8d_0                    conda-forge\nopenjpeg                                2.5.4            h55fea9a_0                    conda-forge\nopenjph                                 0.24.1           h8d634f6_0                    conda-forge\nopenldap                                2.6.10           he970967_0                    conda-forge\nopenssl                                 3.5.4            h26f9b46_0                    conda-forge\noptree                                  0.17.0           py313h7037e92_1               conda-forge\npackaging                               25.0             pyh29332c3_1                  conda-forge\npandas                                  2.3.3            py313h08cd8bf_1               conda-forge\npango                                   1.56.4           hadf4263_0                    conda-forge\npcre2                                   10.46            h1321c63_0                    conda-forge\npillow                                  11.3.0           py313ha492abd_3               conda-forge\npip                                     25.2             pyh145f28c_0                  conda-forge\npixman                                  0.46.4           h54a6638_1                    conda-forge\nplatformdirs                            4.5.0            pyhcf101f3_0                  conda-forge\nprotobuf                                6.31.1           py313h8c92afc_2               conda-forge\npthread-stubs                           0.4              hb9d3cd8_1002                 conda-forge\npugixml                                 1.15             h3f63f65_0                    conda-forge\npulseaudio-client                       17.0             h9a8bead_2                    conda-forge\npy-opencv                               4.12.0           qt6_py313hc0a75a6_607         conda-forge\npybind11                                3.0.1            pyh7a1b43c_0                  conda-forge\npybind11-global                         3.0.1            pyhc7ab6ef_0                  conda-forge\npycocotools                             2.0.10           py313h29aa505_1               conda-forge\npydantic                                2.11.10          pyh3cfb1c2_0                  conda-forge\npydantic-core                           2.33.2           py313h4b2b08d_0               conda-forge\npydantic-settings                       2.11.0           pyh3cfb1c2_0                  conda-forge\npygments                                2.19.2           pyhd8ed1ab_0                  conda-forge\npyparsing                               3.2.5            pyhcf101f3_0                  conda-forge\npython                                  3.13.9           hc97d973_101_cp313            conda-forge\npython-dateutil                         2.9.0.post0      pyhe01879c_2                  conda-forge\npython-dotenv                           1.1.1            pyhe01879c_0                  conda-forge\npython-flatbuffers                      25.9.23          pyh1e1bc0e_0                  conda-forge\npython-tzdata                           2025.2           pyhd8ed1ab_0                  conda-forge\npython_abi                              3.13             8_cp313                       conda-forge\npytorch                                 2.7.1            cpu_generic_py313_h33fc178_3  conda-forge\npytz                                    2025.2           pyhd8ed1ab_0                  conda-forge\nqhull                                   2020.2           h434a139_5                    conda-forge\nqt6-main                                6.9.3            h5c1c036_1                    conda-forge\nrav1e                                   0.7.1            h8fae777_3                    conda-forge\nreadline                                8.2              h8c095d6_2                    conda-forge\nrich                                    14.2.0           pyhcf101f3_0                  conda-forge\nruyaml                                  0.91.0           pyhd8ed1ab_1                  conda-forge\nscipy                                   1.16.2           py313h11c21cd_0               conda-forge\nsdl2                                    2.32.56          h54a6638_0                    conda-forge\nsdl3                                    3.2.24           h68140b3_0                    conda-forge\nsegment-anything                        1.0.1            pyhd8ed1ab_1                  conda-forge\nsetuptools                              80.9.0           pyhff2d567_0                  conda-forge\nshaderc                                 2025.4           h3e344bc_0                    conda-forge\nsix                                     1.17.0           pyhe01879c_1                  conda-forge\nsleef                                   3.9.0            ha0421bc_0                    conda-forge\nsnappy                                  1.2.2            h03e3b7b_0                    conda-forge\nsniffio                                 1.3.1            pyhd8ed1ab_1                  conda-forge\nspirv-tools                             2025.4           hb700be7_0                    conda-forge\nsvt-av1                                 3.1.2            hecca717_0                    conda-forge\nsympy                                   1.14.0           pyh2585a3b_105                conda-forge\ntbb                                     2022.2.0         hb60516a_1                    conda-forge\ntifffile                                2025.10.16       pyhd8ed1ab_0                  conda-forge\ntk                                      8.6.13           noxft_hd72426e_102            conda-forge\ntorchvision                             0.24.0           cpu_py313_hf8de91a_0          conda-forge\ntorchvision-extra-decoders              0.0.2            py313hf1e760e_3               conda-forge\ntqdm                                    4.67.1           pyhd8ed1ab_1                  conda-forge\ntyping-extensions                       4.15.0           h396c80c_0                    conda-forge\ntyping-inspection                       0.4.2            pyhd8ed1ab_0                  conda-forge\ntyping_extensions                       4.15.0           pyhcf101f3_0                  conda-forge\ntzdata                                  2025b            h78e105d_0                    conda-forge\nwayland                                 1.24.0           hd6090a7_1                    conda-forge\nwayland-protocols                       1.45             hd8ed1ab_0                    conda-forge\nx264                                    1!164.3095       h166bdaf_2                    conda-forge\nx265                                    3.5              h924138e_3                    conda-forge\nxarray                                  2025.1.2         pyhd8ed1ab_0                  conda-forge\nxcb-util                                0.4.1            h4f16b4b_2                    conda-forge\nxcb-util-cursor                         0.1.5            hb9d3cd8_0                    conda-forge\nxcb-util-image                          0.4.0            hb711507_2                    conda-forge\nxcb-util-keysyms                        0.4.1            hb711507_0                    conda-forge\nxcb-util-renderutil                     0.3.10           hb711507_0                    conda-forge\nxcb-util-wm                             0.4.2            hb711507_0                    conda-forge\nxkeyboard-config                        2.46             hb03c661_0                    conda-forge\nxorg-libice                             1.1.2            hb9d3cd8_0                    conda-forge\nxorg-libsm                              1.2.6            he73a12e_0                    conda-forge\nxorg-libx11                             1.8.12           h4f16b4b_0                    conda-forge\nxorg-libxau                             1.0.12           hb9d3cd8_0                    conda-forge\nxorg-libxcomposite                      0.4.6            hb9d3cd8_2                    conda-forge\nxorg-libxcursor                         1.2.3            hb9d3cd8_0                    conda-forge\nxorg-libxdamage                         1.1.6            hb9d3cd8_0                    conda-forge\nxorg-libxdmcp                           1.1.5            hb9d3cd8_0                    conda-forge\nxorg-libxext                            1.3.6            hb9d3cd8_0                    conda-forge\nxorg-libxfixes                          6.0.2            hb03c661_0                    conda-forge\nxorg-libxi                              1.8.2            hb9d3cd8_0                    conda-forge\nxorg-libxrandr                          1.5.4            hb9d3cd8_0                    conda-forge\nxorg-libxrender                         0.9.12           hb9d3cd8_0                    conda-forge\nxorg-libxscrnsaver                      1.2.4            hb9d3cd8_0                    conda-forge\nxorg-libxtst                            1.2.5            hb9d3cd8_3                    conda-forge\nxorg-libxxf86vm                         1.1.6            hb9d3cd8_0                    conda-forge\nzfp                                     1.0.1            h909a3a2_3                    conda-forge\nzipp                                    3.23.0           pyhd8ed1ab_0                  conda-forge\nzlib-ng                                 2.2.5            hde8ca8f_0                    conda-forge\nzstd                                    1.5.7            hb8e6e7a_2                    conda-forge\n",
                "source_name": "https://hypha.aicell.io/bioimage-io/artifacts/diplomatic-bug/files/rdf.yaml?version=v0",
                "status": "failed",
                "type": "model"
            },
            "error": "",
            "links": [],
            "score": 0.0,
            "status": "failed"
        },
        "careamics_0.0.16": {
            "badge": null,
            "details": "'Model' resource not tagged with 'CAREamics' or 'careamics'.",
            "error": null,
            "links": [],
            "score": 0.0,
            "status": "not-applicable"
        },
        "careamics_0.0.17": {
            "badge": null,
            "details": "'Model' resource not tagged with 'CAREamics' or 'careamics'.",
            "error": null,
            "links": [],
            "score": 0.0,
            "status": "not-applicable"
        }
    }
}