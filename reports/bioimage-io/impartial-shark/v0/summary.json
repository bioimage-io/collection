{
    "rdf_content": {
        "attachments": {
            "files": [
                "exampleImage.tif",
                "resultImage.tif",
                "per_sample_scale_range.ijm",
                "binarize.ijm"
            ]
        },
        "authors": [
            {
                "affiliation": "SUSTech",
                "name": "Zoufu"
            }
        ],
        "cite": [
            {
                "doi": "10.5281/zenodo.6906897",
                "text": "Zoufu. (2022). Cells and gland Segmentation (FRUNet). Zenodo."
            }
        ],
        "config": {
            "bioimageio": {
                "nickname": "impartial-shark",
                "nickname_icon": "🦈",
                "thumbnails": {
                    "image.png": "image.thumbnail.png",
                    "lable.png": "lable.thumbnail.png"
                }
            },
            "deepimagej": {
                "allow_tiling": true,
                "model_keys": {
                    "tensorflow_model_tag": "tf.saved_model.tag_constants.SERVING",
                    "tensorflow_siganture_def": "tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY"
                },
                "prediction": {
                    "postprocess": [
                        {
                            "kwargs": "binarize.ijm",
                            "spec": "ij.IJ::runMacroFile"
                        }
                    ],
                    "preprocess": [
                        {
                            "kwargs": "per_sample_scale_range.ijm",
                            "spec": "ij.IJ::runMacroFile"
                        }
                    ]
                },
                "pyramidal_model": false,
                "test_information": {
                    "device": null,
                    "inputs": {
                        "name": "input",
                        "pixel_size": {
                            "x": "1.0 pixel",
                            "y": "1.0 pixel",
                            "z": "1.0 pixel"
                        },
                        "size": "256 x 256"
                    },
                    "memory_peak": null,
                    "outputs": {
                        "name": "output",
                        "size": "256 x 256",
                        "type": "image"
                    },
                    "runtime": null
                }
            }
        },
        "covers": [
            "image.png",
            "lable.png"
        ],
        "description": "DeepImageJ compatible FRUNet trained to subtly segment cells and gland.",
        "documentation": "README.md",
        "format_version": "0.4.10",
        "git_repo": "https://github.com/deepimagej/models/tree/13bb89b7c9b636db93dc20acaae2a8a0d23f241a/u-net_pancreatic_segmentation",
        "id": "10.5281/zenodo.6865412/6919253",
        "id_emoji": "🦈",
        "inputs": [
            {
                "axes": "byxc",
                "data_range": [
                    null,
                    null
                ],
                "data_type": "float32",
                "name": "input",
                "preprocessing": [
                    {
                        "kwargs": {
                            "axes": "xyc",
                            "max_percentile": 100,
                            "min_percentile": 0,
                            "mode": "per_sample"
                        },
                        "name": "scale_range"
                    }
                ],
                "shape": [
                    1,
                    256,
                    256,
                    1
                ]
            }
        ],
        "license": "CC-BY-4.0",
        "name": "Cells and gland Segmentation (FRUNet)",
        "outputs": [
            {
                "axes": "byxc",
                "data_range": [
                    null,
                    null
                ],
                "data_type": "float32",
                "halo": [
                    0,
                    16,
                    16,
                    0
                ],
                "name": "output",
                "postprocessing": [
                    {
                        "kwargs": {
                            "threshold": 0.9
                        },
                        "name": "binarize"
                    }
                ],
                "shape": {
                    "offset": [
                        0,
                        0,
                        0,
                        0
                    ],
                    "reference_tensor": "input",
                    "scale": [
                        1.0,
                        1.0,
                        1.0,
                        1.0
                    ]
                }
            }
        ],
        "packaged_by": [
            {
                "affiliation": "PIP python package",
                "name": "pydeepimagej"
            }
        ],
        "run_mode": {
            "name": "deepimagej"
        },
        "sample_inputs": [
            "exampleImage.tif"
        ],
        "sample_outputs": [
            "resultImage.tif"
        ],
        "tags": [
            "deepimagej",
            "segmentation",
            "cells and gland",
            "fourier channel attention"
        ],
        "test_inputs": [
            "exampleImage.npy"
        ],
        "test_outputs": [
            "resultImage.npy"
        ],
        "timestamp": "2022-07-28T07:37:36.393648",
        "type": "model",
        "uploader": {
            "email": "bioimageiobot@gmail.com"
        },
        "version": 1,
        "version_number": 1,
        "weights": {
            "keras_hdf5": {
                "sha256": "c0f7f23225ed6142f9ac5c7abfd7442afb11181dbe91c936b2d11a620f504655",
                "source": "keras_model.h5",
                "tensorflow_version": "2.6.0"
            }
        }
    },
    "rdf_yaml_sha256": "d2cd5c9e1081ca4e99f160256ea7970c064bcec923171c59756127b4e78470d8",
    "scores": {
        "core_compatibility": 0.0,
        "metadata_completeness": 0.0,
        "metadata_format": 0.0,
        "overall_compatibility": 0.0,
        "overall_partner_tool_compatibility": 0.0,
        "tool_compatibility": {},
        "tool_compatibility_version_specific": {}
    },
    "status": "failed",
    "tests": {
        "biapy_3.6.5": {
            "badge": null,
            "details": "[all] pytorch_state_dict not found in model RDF or inputs != 1\n",
            "error": "[all] pytorch_state_dict not found in model RDF or inputs != 1\n",
            "links": [
                "biapy/biapy"
            ],
            "score": 0.0,
            "status": "failed"
        },
        "bioimageio.core_0.9.4": {
            "badge": null,
            "details": {
                "details": [
                    {
                        "context": {
                            "file_name": "rdf.yaml",
                            "known_files": {
                                "https://hypha.aicell.io/bioimage-io/artifacts/impartial-shark/files/README.md?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/impartial-shark/files/binarize.ijm?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/impartial-shark/files/exampleImage.npy?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/impartial-shark/files/exampleImage.tif?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/impartial-shark/files/image.png?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/impartial-shark/files/keras_model.h5?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/impartial-shark/files/lable.png?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/impartial-shark/files/per_sample_scale_range.ijm?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/impartial-shark/files/resultImage.npy?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/impartial-shark/files/resultImage.tif?version=v0": null,
                                "keras_model.h5": "c0f7f23225ed6142f9ac5c7abfd7442afb11181dbe91c936b2d11a620f504655"
                            },
                            "original_source_name": null,
                            "perform_io_checks": true,
                            "root": "https://hypha.aicell.io/bioimage-io/artifacts/impartial-shark/files?version=v0",
                            "update_hashes": false
                        },
                        "errors": [],
                        "loc": [],
                        "name": "Successfully created `ModelDescr` instance.",
                        "recommended_env": null,
                        "saved_conda_compare": null,
                        "status": "passed",
                        "warnings": []
                    },
                    {
                        "context": {
                            "file_name": "rdf.yaml",
                            "known_files": {
                                "https://hypha.aicell.io/bioimage-io/artifacts/impartial-shark/files/README.md?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/impartial-shark/files/binarize.ijm?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/impartial-shark/files/exampleImage.npy?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/impartial-shark/files/exampleImage.tif?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/impartial-shark/files/image.png?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/impartial-shark/files/keras_model.h5?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/impartial-shark/files/lable.png?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/impartial-shark/files/per_sample_scale_range.ijm?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/impartial-shark/files/resultImage.npy?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/impartial-shark/files/resultImage.tif?version=v0": null,
                                "keras_model.h5": "c0f7f23225ed6142f9ac5c7abfd7442afb11181dbe91c936b2d11a620f504655"
                            },
                            "original_source_name": null,
                            "perform_io_checks": true,
                            "root": "https://hypha.aicell.io/bioimage-io/artifacts/impartial-shark/files?version=v0",
                            "update_hashes": false
                        },
                        "errors": [],
                        "loc": [],
                        "name": "bioimageio.spec format validation model 0.4.10",
                        "recommended_env": null,
                        "saved_conda_compare": null,
                        "status": "passed",
                        "warnings": []
                    },
                    {
                        "context": null,
                        "errors": [
                            {
                                "loc": [
                                    "weights",
                                    "keras_hdf5"
                                ],
                                "msg": "Command '['conda', 'env', 'create', '--yes', '--file=/tmp/tmpyyonap62/keras_hdf5/env.yaml', '--name=eec213b1c5b0228e047050c863eba6c37fb89b8f11074e2f17eae6bee33c8018', '--quiet']' returned non-zero exit status 1.",
                                "traceback_html": "<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<style>\n.r1 {color: #800000; text-decoration-color: #800000}\n.r2 {color: #800000; text-decoration-color: #800000; font-weight: bold}\n.r3 {color: #bf7f7f; text-decoration-color: #bf7f7f; font-weight: bold}\n.r4 {color: #bfbf7f; text-decoration-color: #bfbf7f}\n.r5 {color: #808000; text-decoration-color: #808000; font-weight: bold}\n.r6 {color: #0000ff; text-decoration-color: #0000ff}\n.r7 {color: #00ff00; text-decoration-color: #00ff00}\n.r8 {color: #7f7f7f; text-decoration-color: #7f7f7f}\n.r9 {color: #00ffff; text-decoration-color: #00ffff}\n.r10 {color: #808000; text-decoration-color: #808000}\n.r11 {color: #00ffff; text-decoration-color: #00ffff; text-decoration: underline}\n.r12 {color: #ff00ff; text-decoration-color: #ff00ff}\n.r13 {color: #ff0000; text-decoration-color: #ff0000; font-weight: bold}\n.r14 {color: #008000; text-decoration-color: #008000}\n.r15 {font-weight: bold}\n.r16 {color: #008080; text-decoration-color: #008080; font-weight: bold}\n.r17 {font-style: italic}\nbody {\n    color: #000000;\n    background-color: #ffffff;\n}\n</style>\n</head>\n<body>\n    <pre style=\"font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><code style=\"font-family:inherit\"><span class=\"r1\">╭─────────────────────────────── </span><span class=\"r2\">Traceback </span><span class=\"r3\">(most recent call last)</span><span class=\"r1\"> ────────────────────────────────╮</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/home/runner/.local/lib/python3.12/site-packages/bioimageio/core/</span><span class=\"r5\">_resource_tests.py</span>:<span class=\"r6\">399</span> in <span class=\"r7\">_test</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 396 </span><span class=\"r8\">│   │   </span><span class=\"r6\">raise</span> <span class=\"r9\">RuntimeError</span>(<span class=\"r10\">&quot;Conda not available&quot;</span>) <span class=\"r6\">from</span> <span class=\"r11\">e</span>                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 397 </span><span class=\"r8\">│   </span>                                                                                      <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 398 </span><span class=\"r8\">│   </span><span class=\"r6\">try</span>:                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span> 399 <span class=\"r8\">│   │   </span>run_command([CONDA_CMD, <span class=\"r10\">&quot;run&quot;</span>, <span class=\"r10\">&quot;-n&quot;</span>, env_name, <span class=\"r10\">&quot;python&quot;</span>, <span class=\"r10\">&quot;--version&quot;</span>])            <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 400 </span><span class=\"r8\">│   </span><span class=\"r6\">except</span> <span class=\"r9\">Exception</span> <span class=\"r6\">as</span> e:                                                                <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 401 </span><span class=\"r8\">│   │   </span>working_dir.mkdir(parents=<span class=\"r6\">True</span>, exist_ok=<span class=\"r6\">True</span>)                                    <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 402 </span><span class=\"r8\">│   │   </span>path = working_dir / <span class=\"r10\">&quot;env.yaml&quot;</span>                                                   <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/home/runner/.local/lib/python3.12/site-packages/bioimageio/core/</span><span class=\"r5\">_resource_tests.py</span>:<span class=\"r6\">197</span> in <span class=\"r7\">defau</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 194 </span>                                                                                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 195 </span><span class=\"r6\">def</span> <span class=\"r7\">default_run_command</span>(args: Sequence[<span class=\"r9\">str</span>]):                                             <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 196 </span><span class=\"r8\">│   </span>logger.info(<span class=\"r10\">&quot;running &#x27;{}&#x27;...&quot;</span>, <span class=\"r10\">&quot; &quot;</span>.join(args))                                        <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span> 197 <span class=\"r8\">│   </span>_ = subprocess.check_call(args)                                                       <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 198 </span>                                                                                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 199 </span>                                                                                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 200 </span><span class=\"r6\">def</span> <span class=\"r7\">test_description</span>(                                                                     <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/lib/python3.12/</span><span class=\"r5\">subprocess.py</span>:<span class=\"r6\">413</span> in <span class=\"r7\">check_call</span>                                              <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 410 </span><span class=\"r8\">│   │   </span>cmd = kwargs.get(<span class=\"r10\">&quot;args&quot;</span>)                                                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 411 </span><span class=\"r8\">│   │   </span><span class=\"r6\">if</span> cmd <span class=\"r12\">is</span> <span class=\"r6\">None</span>:                                                                   <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 412 </span><span class=\"r8\">│   │   │   </span>cmd = popenargs[<span class=\"r6\">0</span>]                                                            <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span> 413 <span class=\"r8\">│   │   </span><span class=\"r6\">raise</span> CalledProcessError(retcode, cmd)                                            <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 414 </span><span class=\"r8\">│   </span><span class=\"r6\">return</span> <span class=\"r6\">0</span>                                                                              <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 415 </span>                                                                                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 416 </span>                                                                                          <span class=\"r1\">│</span>\n<span class=\"r1\">╰──────────────────────────────────────────────────────────────────────────────────────────────────╯</span>\n<span class=\"r13\">CalledProcessError: </span>Command <span class=\"r14\">&#x27;[&#x27;</span>conda&#x27;, <span class=\"r14\">&#x27;run&#x27;</span>, <span class=\"r14\">&#x27;-n&#x27;</span>, <span class=\"r14\">&#x27;eec213b1c5b0228e047050c863eba6c37fb89b8f11074e2f17eae6bee33c8018&#x27;</span>, <span class=\"r14\">&#x27;python&#x27;</span>, <span class=\"r14\">&#x27;--version&#x27;</span><span class=\"r15\">]</span>&#x27; returned non-zero exit status <span class=\"r16\">1</span>.\n\n<span class=\"r17\">During handling of the above exception, another exception occurred:</span>\n\n<span class=\"r1\">╭─────────────────────────────── </span><span class=\"r2\">Traceback </span><span class=\"r3\">(most recent call last)</span><span class=\"r1\"> ────────────────────────────────╮</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/home/runner/.local/lib/python3.12/site-packages/bioimageio/core/</span><span class=\"r5\">_resource_tests.py</span>:<span class=\"r6\">406</span> in <span class=\"r7\">_test</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 403 </span><span class=\"r8\">│   │   </span><span class=\"r6\">try</span>:                                                                              <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 404 </span><span class=\"r8\">│   │   │   </span>_ = path.write_bytes(encoded_env)                                             <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 405 </span><span class=\"r8\">│   │   │   </span>logger.debug(<span class=\"r10\">&quot;written conda env to {}&quot;</span>, path)                                 <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span> 406 <span class=\"r8\">│   │   │   </span>run_command(                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 407 </span><span class=\"r8\">│   │   │   │   </span>[                                                                         <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 408 </span><span class=\"r8\">│   │   │   │   │   </span>CONDA_CMD,                                                            <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 409 </span><span class=\"r8\">│   │   │   │   │   </span><span class=\"r10\">&quot;env&quot;</span>,                                                                <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/home/runner/.local/lib/python3.12/site-packages/bioimageio/core/</span><span class=\"r5\">_resource_tests.py</span>:<span class=\"r6\">197</span> in <span class=\"r7\">defau</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 194 </span>                                                                                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 195 </span><span class=\"r6\">def</span> <span class=\"r7\">default_run_command</span>(args: Sequence[<span class=\"r9\">str</span>]):                                             <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 196 </span><span class=\"r8\">│   </span>logger.info(<span class=\"r10\">&quot;running &#x27;{}&#x27;...&quot;</span>, <span class=\"r10\">&quot; &quot;</span>.join(args))                                        <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span> 197 <span class=\"r8\">│   </span>_ = subprocess.check_call(args)                                                       <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 198 </span>                                                                                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 199 </span>                                                                                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 200 </span><span class=\"r6\">def</span> <span class=\"r7\">test_description</span>(                                                                     <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/lib/python3.12/</span><span class=\"r5\">subprocess.py</span>:<span class=\"r6\">413</span> in <span class=\"r7\">check_call</span>                                              <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 410 </span><span class=\"r8\">│   │   </span>cmd = kwargs.get(<span class=\"r10\">&quot;args&quot;</span>)                                                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 411 </span><span class=\"r8\">│   │   </span><span class=\"r6\">if</span> cmd <span class=\"r12\">is</span> <span class=\"r6\">None</span>:                                                                   <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 412 </span><span class=\"r8\">│   │   │   </span>cmd = popenargs[<span class=\"r6\">0</span>]                                                            <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span> 413 <span class=\"r8\">│   │   </span><span class=\"r6\">raise</span> CalledProcessError(retcode, cmd)                                            <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 414 </span><span class=\"r8\">│   </span><span class=\"r6\">return</span> <span class=\"r6\">0</span>                                                                              <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 415 </span>                                                                                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r8\"> 416 </span>                                                                                          <span class=\"r1\">│</span>\n<span class=\"r1\">╰──────────────────────────────────────────────────────────────────────────────────────────────────╯</span>\n<span class=\"r13\">CalledProcessError: </span>Command <span class=\"r14\">&#x27;[&#x27;</span>conda&#x27;, <span class=\"r14\">&#x27;env&#x27;</span>, <span class=\"r14\">&#x27;create&#x27;</span>, <span class=\"r14\">&#x27;--yes&#x27;</span>, <span class=\"r14\">&#x27;--file=/tmp/tmpyyonap62/keras_hdf5/env.yaml&#x27;</span>, <span class=\"r14\">&#x27;--name=eec213b1c5b0228e047050c863eba6c37fb89b8f11074e2f17eae6bee33c8018&#x27;</span>, <span class=\"r14\">&#x27;--quiet&#x27;</span><span class=\"r15\">]</span>&#x27; returned non-zero exit status <span class=\"r16\">1</span>.\n</code></pre>\n</body>\n</html>\n",
                                "traceback_md": "╭─────────────────────────────── Traceback (most recent call last) ────────────────────────────────╮\n│ /home/runner/.local/lib/python3.12/site-packages/bioimageio/core/_resource_tests.py:399 in _test │\n│                                                                                                  │\n│    396 │   │   raise RuntimeError(\"Conda not available\") from e                                  │\n│    397 │                                                                                         │\n│    398 │   try:                                                                                  │\n│ ❱  399 │   │   run_command([CONDA_CMD, \"run\", \"-n\", env_name, \"python\", \"--version\"])            │\n│    400 │   except Exception as e:                                                                │\n│    401 │   │   working_dir.mkdir(parents=True, exist_ok=True)                                    │\n│    402 │   │   path = working_dir / \"env.yaml\"                                                   │\n│                                                                                                  │\n│ /home/runner/.local/lib/python3.12/site-packages/bioimageio/core/_resource_tests.py:197 in defau │\n│                                                                                                  │\n│    194                                                                                           │\n│    195 def default_run_command(args: Sequence[str]):                                             │\n│    196 │   logger.info(\"running '{}'...\", \" \".join(args))                                        │\n│ ❱  197 │   _ = subprocess.check_call(args)                                                       │\n│    198                                                                                           │\n│    199                                                                                           │\n│    200 def test_description(                                                                     │\n│                                                                                                  │\n│ /usr/lib/python3.12/subprocess.py:413 in check_call                                              │\n│                                                                                                  │\n│    410 │   │   cmd = kwargs.get(\"args\")                                                          │\n│    411 │   │   if cmd is None:                                                                   │\n│    412 │   │   │   cmd = popenargs[0]                                                            │\n│ ❱  413 │   │   raise CalledProcessError(retcode, cmd)                                            │\n│    414 │   return 0                                                                              │\n│    415                                                                                           │\n│    416                                                                                           │\n╰──────────────────────────────────────────────────────────────────────────────────────────────────╯\nCalledProcessError: Command '['conda', 'run', '-n', 'eec213b1c5b0228e047050c863eba6c37fb89b8f11074e2f17eae6bee33c8018', 'python', '--version']' returned non-zero exit status 1.\n\nDuring handling of the above exception, another exception occurred:\n\n╭─────────────────────────────── Traceback (most recent call last) ────────────────────────────────╮\n│ /home/runner/.local/lib/python3.12/site-packages/bioimageio/core/_resource_tests.py:406 in _test │\n│                                                                                                  │\n│    403 │   │   try:                                                                              │\n│    404 │   │   │   _ = path.write_bytes(encoded_env)                                             │\n│    405 │   │   │   logger.debug(\"written conda env to {}\", path)                                 │\n│ ❱  406 │   │   │   run_command(                                                                  │\n│    407 │   │   │   │   [                                                                         │\n│    408 │   │   │   │   │   CONDA_CMD,                                                            │\n│    409 │   │   │   │   │   \"env\",                                                                │\n│                                                                                                  │\n│ /home/runner/.local/lib/python3.12/site-packages/bioimageio/core/_resource_tests.py:197 in defau │\n│                                                                                                  │\n│    194                                                                                           │\n│    195 def default_run_command(args: Sequence[str]):                                             │\n│    196 │   logger.info(\"running '{}'...\", \" \".join(args))                                        │\n│ ❱  197 │   _ = subprocess.check_call(args)                                                       │\n│    198                                                                                           │\n│    199                                                                                           │\n│    200 def test_description(                                                                     │\n│                                                                                                  │\n│ /usr/lib/python3.12/subprocess.py:413 in check_call                                              │\n│                                                                                                  │\n│    410 │   │   cmd = kwargs.get(\"args\")                                                          │\n│    411 │   │   if cmd is None:                                                                   │\n│    412 │   │   │   cmd = popenargs[0]                                                            │\n│ ❱  413 │   │   raise CalledProcessError(retcode, cmd)                                            │\n│    414 │   return 0                                                                              │\n│    415                                                                                           │\n│    416                                                                                           │\n╰──────────────────────────────────────────────────────────────────────────────────────────────────╯\nCalledProcessError: Command '['conda', 'env', 'create', '--yes', '--file=/tmp/tmpyyonap62/keras_hdf5/env.yaml', '--name=eec213b1c5b0228e047050c863eba6c37fb89b8f11074e2f17eae6bee33c8018', '--quiet']' returned non-zero exit status 1.\n",
                                "type": "conda",
                                "with_traceback": true
                            }
                        ],
                        "loc": [
                            "weights",
                            "keras_hdf5"
                        ],
                        "name": "Conda environment creation",
                        "recommended_env": {
                            "channels": [
                                "conda-forge",
                                "nodefaults"
                            ],
                            "dependencies": [
                                "bioimageio.core",
                                "pip",
                                "tensorflow ==2.6.0"
                            ],
                            "name": null
                        },
                        "saved_conda_compare": "bioimageio.core not found\npip not found\ntensorflow not found\n",
                        "status": "failed",
                        "warnings": []
                    }
                ],
                "env": [
                    [
                        "bioimageio.spec",
                        "0.5.5.6",
                        "",
                        ""
                    ]
                ],
                "format_version": "0.4.10",
                "id": "10.5281/zenodo.6865412/6919253",
                "metadata_completeness": 0.7831325301204819,
                "name": "bioimageio format validation",
                "saved_conda_list": "# packages in environment at /usr/share/miniconda/envs/core:\n#\n# Name                     Version          Build            Channel\n",
                "source_name": "https://hypha.aicell.io/bioimage-io/artifacts/impartial-shark/files/rdf.yaml?version=v0",
                "status": "failed",
                "type": "model"
            },
            "error": "Command '['conda', 'env', 'create', '--yes', '--file=/tmp/tmpyyonap62/keras_hdf5/env.yaml', '--name=eec213b1c5b0228e047050c863eba6c37fb89b8f11074e2f17eae6bee33c8018', '--quiet']' returned non-zero exit status 1.",
            "links": [],
            "score": 0.0,
            "status": "failed"
        },
        "careamics_0.0.16": {
            "badge": null,
            "details": [
                "CAREamics compatibility check does not support `bioimageio.spec.v0.4` model desciptions."
            ],
            "error": null,
            "links": [],
            "score": 0.0,
            "status": "not-applicable"
        },
        "careamics_0.0.17": {
            "badge": null,
            "details": [
                "CAREamics compatibility check does not support `bioimageio.spec.v0.4` model desciptions."
            ],
            "error": null,
            "links": [],
            "score": 0.0,
            "status": "not-applicable"
        }
    }
}