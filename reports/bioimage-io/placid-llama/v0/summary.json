{
    "rdf_content": {
        "attachments": {
            "files": [
                "training_evaluation.csv",
                "Contours2InstanceSegmentation.ijm",
                "per_sample_scale_range.ijm"
            ]
        },
        "authors": [
            {
                "affiliation": "Instituto Gulbenkian de Ciência",
                "name": "Estibaliz Gómez de Mariscal"
            }
        ],
        "cite": [
            {
                "doi": "10.1038/s41592-018-0261-2",
                "text": "Falk et al. Nature Methods 2019",
                "url": "https://doi.org/10.1038/s41592-018-0261-2"
            },
            {
                "doi": "10.1007/978-3-319-24574-4_28",
                "text": "Ronneberger et al. arXiv in 2015",
                "url": "https://doi.org/10.1007/978-3-319-24574-4_28"
            },
            {
                "doi": "10.1101/2020.03.20.000133",
                "text": "Lucas von Chamier et al. biorXiv 2020",
                "url": "https://doi.org/10.1101/2020.03.20.000133"
            },
            {
                "doi": "10.1038/s42003-022-03634-z",
                "text": "Christoph Spahn et al. Communications Biology 2022",
                "url": "https://doi.org/10.1038/s42003-022-03634-z"
            }
        ],
        "config": {
            "bioimageio": {
                "nickname": "placid-llama",
                "nickname_icon": "🦙",
                "thumbnails": {
                    "cover.png": "cover.thumbnail.png",
                    "cover_1.png": "cover_1.thumbnail.png"
                }
            },
            "deepimagej": {
                "allow_tiling": true,
                "model_keys": null,
                "prediction": {
                    "postprocess": [
                        {
                            "spec": null
                        }
                    ],
                    "preprocess": [
                        {
                            "kwargs": "per_sample_scale_range.ijm",
                            "spec": "ij.IJ::runMacroFile"
                        }
                    ]
                },
                "pyramidal_model": false,
                "test_information": {
                    "inputs": [
                        {
                            "name": "test_input.npy",
                            "pixel_size": {
                                "x": 0.065,
                                "y": 0.065,
                                "z": 1
                            },
                            "size": "512 x 512 x 1 x 1"
                        }
                    ],
                    "memory_peak": null,
                    "outputs": [
                        {
                            "name": "test_output.npy",
                            "size": "512 x 512 x 1 x 3",
                            "type": "image"
                        }
                    ],
                    "runtime": null
                }
            }
        },
        "covers": [
            "cover_1.png",
            "cover.png"
        ],
        "description": "This trained 2D U-Net model segments the contour, foreground and background of Bacillus Subtilis bacteria imaged with Widefield microscopy images. To obtain a unique label for each individual bacteria detected in the image one could run further watershed segmentation using the label 1 as the seed.",
        "documentation": "README.md",
        "format_version": "0.4.10",
        "id": "10.5281/zenodo.7261974/7782776",
        "id_emoji": "🦙",
        "inputs": [
            {
                "axes": "bxyc",
                "data_range": [
                    0.0,
                    255.0
                ],
                "data_type": "uint8",
                "name": "input_1",
                "preprocessing": [
                    {
                        "kwargs": {
                            "axes": "xyc",
                            "max_percentile": 99.8,
                            "min_percentile": 1,
                            "mode": "per_sample"
                        },
                        "name": "scale_range"
                    }
                ],
                "shape": [
                    1,
                    512,
                    512,
                    1
                ]
            }
        ],
        "license": "MIT",
        "links": [
            "deepimagej/deepimagej",
            "imjoy/BioImageIO-Packager",
            "zero/dataset_u-net_2d_multilabel_deepbacs",
            "ilastik/ilastik",
            "zero/notebook_u-net_2d_multilabel_zerocostdl4mic",
            "imjoy/BioImageIO-Packager",
            "imjoy/BioImageIO-Packager"
        ],
        "maintainers": [
            {
                "github_user": "esgomezm",
                "name": "Estibaliz Gómez de Mariscal"
            }
        ],
        "name": "B. Sutilist bacteria segmentation - Widefield microscopy - 2D UNet",
        "outputs": [
            {
                "axes": "bxyc",
                "data_range": [
                    null,
                    null
                ],
                "data_type": "float32",
                "name": "conv2d_19",
                "shape": {
                    "offset": [
                        0,
                        0,
                        0,
                        0
                    ],
                    "reference_tensor": "input_1",
                    "scale": [
                        1.0,
                        1.0,
                        1.0,
                        3.0
                    ]
                }
            }
        ],
        "sample_inputs": [
            "sample_input_0.tif"
        ],
        "sample_outputs": [
            "sample_output_0.tif"
        ],
        "tags": [
            "zerocostdl4mic",
            "deepimagej",
            "segmentation",
            "unet",
            "semantic-segmentation",
            "cells",
            "fluorescence-light-microscopy",
            "bacillus-subtilis",
            "deepbacs",
            "2d",
            "tensorflow",
            "microbiology",
            "bacteria"
        ],
        "test_inputs": [
            "test_input.npy"
        ],
        "test_outputs": [
            "test_output.npy"
        ],
        "timestamp": "2023-03-29T18:14:39.826271",
        "training_data": {
            "id": "zero/dataset_u-net_2d_multilabel_deepbacs"
        },
        "type": "model",
        "uploader": {
            "email": "bioimageiobot@gmail.com"
        },
        "version": 1,
        "version_number": 1,
        "weights": {
            "keras_hdf5": {
                "sha256": "3b351ad5af1dab75c16993f9da06ce15d84b38435b2ce6f6a799c7d5fde3b80d",
                "source": "keras_weights.hdf5",
                "tensorflow_version": "2.11.0"
            },
            "tensorflow_saved_model_bundle": {
                "sha256": "4780c1df39c35db679237acedc964dc58032474495042539a16941e8cb333d17",
                "source": "tf_weights.zip",
                "tensorflow_version": "2.11.0"
            }
        }
    },
    "rdf_yaml_sha256": "95e0b2895b2bbef2c7d27377cb8bf236ca97d74ad567d32023d3490354e045c4",
    "status": "failed",
    "scores": {
        "tool_compatibility_version_specific": {},
        "metadata_completeness": 0.0,
        "metadata_format": 0.0,
        "core_compatibility": 0.0,
        "tool_compatibility": {},
        "overall_partner_tool_compatibility": 0.0,
        "overall_compatibility": 0.0
    },
    "tests": {
        "bioimageio.core_0.9.4": {
            "status": "failed",
            "score": 0.0,
            "error": "module 'keras.api._v2.keras.layers' has no attribute 'TFSMLayer'\n\nmodule 'keras.api._v2.keras.layers' has no attribute 'TFSMLayer'",
            "details": {
                "name": "bioimageio format validation",
                "source_name": "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/rdf.yaml?version=v0",
                "id": "10.5281/zenodo.7261974/7782776",
                "type": "model",
                "format_version": "0.4.10",
                "status": "failed",
                "metadata_completeness": 0.7307692307692307,
                "details": [
                    {
                        "name": "Successfully created `ModelDescr` instance.",
                        "status": "passed",
                        "loc": [],
                        "errors": [],
                        "warnings": [],
                        "context": {
                            "file_name": "rdf.yaml",
                            "original_source_name": null,
                            "perform_io_checks": true,
                            "known_files": {
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/cover_1.png?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/cover.png?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/training_evaluation.csv?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/Contours2InstanceSegmentation.ijm?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/per_sample_scale_range.ijm?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/README.md?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/sample_input_0.tif?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/sample_output_0.tif?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/test_input.npy?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/test_output.npy?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/keras_weights.hdf5?version=v0": null,
                                "keras_weights.hdf5": "3b351ad5af1dab75c16993f9da06ce15d84b38435b2ce6f6a799c7d5fde3b80d",
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/tf_weights.zip?version=v0": null,
                                "tf_weights.zip": "4780c1df39c35db679237acedc964dc58032474495042539a16941e8cb333d17"
                            },
                            "update_hashes": false,
                            "root": "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files?version=v0"
                        },
                        "recommended_env": null,
                        "saved_conda_compare": null
                    },
                    {
                        "name": "bioimageio.spec format validation model 0.4.10",
                        "status": "passed",
                        "loc": [],
                        "errors": [],
                        "warnings": [
                            {
                                "loc": [
                                    "name"
                                ],
                                "msg": "Name longer than 64 characters.",
                                "type": "warning",
                                "severity": 20
                            }
                        ],
                        "context": {
                            "file_name": "rdf.yaml",
                            "original_source_name": null,
                            "perform_io_checks": true,
                            "known_files": {
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/cover_1.png?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/cover.png?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/training_evaluation.csv?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/Contours2InstanceSegmentation.ijm?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/per_sample_scale_range.ijm?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/README.md?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/sample_input_0.tif?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/sample_output_0.tif?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/test_input.npy?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/test_output.npy?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/keras_weights.hdf5?version=v0": null,
                                "keras_weights.hdf5": "3b351ad5af1dab75c16993f9da06ce15d84b38435b2ce6f6a799c7d5fde3b80d",
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/tf_weights.zip?version=v0": null,
                                "tf_weights.zip": "4780c1df39c35db679237acedc964dc58032474495042539a16941e8cb333d17"
                            },
                            "update_hashes": false,
                            "root": "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files?version=v0"
                        },
                        "recommended_env": null,
                        "saved_conda_compare": null
                    },
                    {
                        "name": "Reproduce test outputs from test inputs (keras_hdf5)",
                        "status": "failed",
                        "loc": [
                            "weights",
                            "keras_hdf5"
                        ],
                        "errors": [
                            {
                                "loc": [
                                    "weights",
                                    "keras_hdf5"
                                ],
                                "msg": "module 'keras.api._v2.keras.layers' has no attribute 'TFSMLayer'",
                                "type": "bioimageio.core",
                                "with_traceback": true,
                                "traceback_md": "╭─────────────────────────────── Traceback (most recent call last) ────────────────────────────────╮\n│ /usr/share/miniconda/envs/2ad0e538313e48766b5028448ff211eb420bef29973543270a33249e51da7f67/lib/p │\n│                                                                                                  │\n│   139 │   │   │   )                                                                              │\n│   140 │   │   except Exception as e:                                                             │\n│   141 │   │   │   try:                                                                           │\n│ ❱ 142 │   │   │   │   self._network = tf.keras.layers.TFSMLayer(  # pyright: ignore[reportAttrib │\n│   143 │   │   │   │   │   weight_file, call_endpoint=\"serving_default\"                           │\n│   144 │   │   │   │   )                                                                          │\n│   145 │   │   │   except Exception as ee:                                                        │\n╰──────────────────────────────────────────────────────────────────────────────────────────────────╯\nAttributeError: module 'keras.api._v2.keras.layers' has no attribute 'TFSMLayer'\n\nDuring handling of the above exception, another exception occurred:\n\n╭─────────────────────────────── Traceback (most recent call last) ────────────────────────────────╮\n│ /usr/share/miniconda/envs/2ad0e538313e48766b5028448ff211eb420bef29973543270a33249e51da7f67/lib/p │\n│                                                                                                  │\n│    774 │   │   test_input = get_test_input_sample(model)                                         │\n│    775 │   │   expected = get_test_output_sample(model)                                          │\n│    776 │   │                                                                                     │\n│ ❱  777 │   │   with create_prediction_pipeline(                                                  │\n│    778 │   │   │   bioimageio_model=model, devices=devices, weight_format=weight_format          │\n│    779 │   │   ) as prediction_pipeline:                                                         │\n│    780 │   │   │   results = prediction_pipeline.predict_sample_without_blocking(test_input)     │\n│                                                                                                  │\n│ /usr/share/miniconda/envs/2ad0e538313e48766b5028448ff211eb420bef29973543270a33249e51da7f67/lib/p │\n│                                                                                                  │\n│   368 │   │   │   f\"deprecated create_prediction_pipeline kwargs: {set(deprecated_kwargs)}\"      │\n│   369 │   │   )                                                                                  │\n│   370 │                                                                                          │\n│ ❱ 371 │   model_adapter = model_adapter or create_model_adapter(                                 │\n│   372 │   │   model_description=bioimageio_model,                                                │\n│   373 │   │   devices=devices,                                                                   │\n│   374 │   │   weight_format_priority_order=weights_format and (weights_format,),                 │\n│                                                                                                  │\n│ /usr/share/miniconda/envs/2ad0e538313e48766b5028448ff211eb420bef29973543270a33249e51da7f67/lib/p │\n│                                                                                                  │\n│   166 │   │   assert errors                                                                      │\n│   167 │   │   if len(weight_format_priority_order) == 1:                                         │\n│   168 │   │   │   assert len(errors) == 1                                                        │\n│ ❱ 169 │   │   │   raise errors[0]                                                                │\n│   170 │   │                                                                                      │\n│   171 │   │   else:                                                                              │\n│   172 │   │   │   msg = (                                                                        │\n│                                                                                                  │\n│ /usr/share/miniconda/envs/2ad0e538313e48766b5028448ff211eb420bef29973543270a33249e51da7f67/lib/p │\n│                                                                                                  │\n│   155 │   │   │   │   │   except Exception:                                                      │\n│   156 │   │   │   │   │   │   from .tensorflow_backend import KerasModelAdapter                  │\n│   157 │   │   │   │   │                                                                          │\n│ ❱ 158 │   │   │   │   │   return KerasModelAdapter(                                              │\n│   159 │   │   │   │   │   │   model_description=model_description, devices=devices               │\n│   160 │   │   │   │   │   )                                                                      │\n│   161 │   │   │   │   except Exception as e:                                                     │\n│                                                                                                  │\n│ /usr/share/miniconda/envs/2ad0e538313e48766b5028448ff211eb420bef29973543270a33249e51da7f67/lib/p │\n│                                                                                                  │\n│   146 │   │   │   │   logger.opt(exception=ee).info(                                             │\n│   147 │   │   │   │   │   \"keras.layers.TFSMLayer error for alternative call_endpoint='serving_d │\n│   148 │   │   │   │   )                                                                          │\n│ ❱ 149 │   │   │   │   raise e                                                                    │\n│   150 │                                                                                          │\n│   151 │   def _forward_impl(  # pyright: ignore[reportUnknownParameterType]                      │\n│   152 │   │   self, input_arrays: Sequence[Optional[NDArray[Any]]]                               │\n│                                                                                                  │\n│ /usr/share/miniconda/envs/2ad0e538313e48766b5028448ff211eb420bef29973543270a33249e51da7f67/lib/p │\n│                                                                                                  │\n│   133 │   │   )                                                                                  │\n│   134 │   │                                                                                      │\n│   135 │   │   try:                                                                               │\n│ ❱ 136 │   │   │   self._network = tf.keras.layers.TFSMLayer(  # pyright: ignore[reportAttributeA │\n│   137 │   │   │   │   weight_file,                                                               │\n│   138 │   │   │   │   call_endpoint=\"serve\",                                                     │\n│   139 │   │   │   )                                                                              │\n╰──────────────────────────────────────────────────────────────────────────────────────────────────╯\nAttributeError: module 'keras.api._v2.keras.layers' has no attribute 'TFSMLayer'\n",
                                "traceback_html": "<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<style>\n.r1 {color: #800000; text-decoration-color: #800000}\n.r2 {color: #800000; text-decoration-color: #800000; font-weight: bold}\n.r3 {color: #bf7f7f; text-decoration-color: #bf7f7f; font-weight: bold}\n.r4 {color: #7f7f7f; text-decoration-color: #7f7f7f}\n.r5 {color: #0000ff; text-decoration-color: #0000ff}\n.r6 {color: #00ffff; text-decoration-color: #00ffff}\n.r7 {color: #808000; text-decoration-color: #808000}\n.r8 {color: #ff0000; text-decoration-color: #ff0000; font-weight: bold}\n.r9 {color: #008000; text-decoration-color: #008000}\n.r10 {font-style: italic}\n.r11 {color: #ff00ff; text-decoration-color: #ff00ff}\n.r12 {color: #808080; text-decoration-color: #808080}\n.r13 {color: #00ffff; text-decoration-color: #00ffff; text-decoration: underline}\n.r14 {color: #00ff00; text-decoration-color: #00ff00}\nbody {\n    color: #000000;\n    background-color: #ffffff;\n}\n</style>\n</head>\n<body>\n    <pre style=\"font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><code style=\"font-family:inherit\"><span class=\"r1\">╭─────────────────────────────── </span><span class=\"r2\">Traceback </span><span class=\"r3\">(most recent call last)</span><span class=\"r1\"> ────────────────────────────────╮</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/2ad0e538313e48766b5028448ff211eb420bef29973543270a33249e51da7f67/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">139 </span><span class=\"r4\">│   │   │   </span>)                                                                              <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">140 </span><span class=\"r4\">│   │   </span><span class=\"r5\">except</span> <span class=\"r6\">Exception</span> <span class=\"r5\">as</span> e:                                                             <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">141 </span><span class=\"r4\">│   │   │   </span><span class=\"r5\">try</span>:                                                                           <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span>142 <span class=\"r4\">│   │   │   │   </span><span class=\"r6\">self</span>._network = tf.keras.layers.TFSMLayer(  <span class=\"r4\"># pyright: ignore[reportAttrib</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">143 </span><span class=\"r4\">│   │   │   │   │   </span>weight_file, call_endpoint=<span class=\"r7\">&quot;serving_default&quot;</span>                           <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">144 </span><span class=\"r4\">│   │   │   │   </span>)                                                                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">145 </span><span class=\"r4\">│   │   │   </span><span class=\"r5\">except</span> <span class=\"r6\">Exception</span> <span class=\"r5\">as</span> ee:                                                        <span class=\"r1\">│</span>\n<span class=\"r1\">╰──────────────────────────────────────────────────────────────────────────────────────────────────╯</span>\n<span class=\"r8\">AttributeError: </span>module <span class=\"r9\">&#x27;keras.api._v2.keras.layers&#x27;</span> has no attribute <span class=\"r9\">&#x27;TFSMLayer&#x27;</span>\n\n<span class=\"r10\">During handling of the above exception, another exception occurred:</span>\n\n<span class=\"r1\">╭─────────────────────────────── </span><span class=\"r2\">Traceback </span><span class=\"r3\">(most recent call last)</span><span class=\"r1\"> ────────────────────────────────╮</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/2ad0e538313e48766b5028448ff211eb420bef29973543270a33249e51da7f67/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 774 </span><span class=\"r4\">│   │   </span>test_input = get_test_input_sample(model)                                         <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 775 </span><span class=\"r4\">│   │   </span>expected = get_test_output_sample(model)                                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 776 </span><span class=\"r4\">│   │   </span>                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span> 777 <span class=\"r4\">│   │   </span><span class=\"r5\">with</span> create_prediction_pipeline(                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 778 </span><span class=\"r4\">│   │   │   </span>bioimageio_model=model, devices=devices, weight_format=weight_format          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 779 </span><span class=\"r4\">│   │   </span>) <span class=\"r5\">as</span> prediction_pipeline:                                                         <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 780 </span><span class=\"r4\">│   │   │   </span>results = prediction_pipeline.predict_sample_without_blocking(test_input)     <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/2ad0e538313e48766b5028448ff211eb420bef29973543270a33249e51da7f67/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">368 </span><span class=\"r4\">│   │   │   </span><span class=\"r7\">f&quot;deprecated create_prediction_pipeline kwargs: {</span><span class=\"r6\">set</span>(deprecated_kwargs)<span class=\"r7\">}&quot;</span>      <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">369 </span><span class=\"r4\">│   │   </span>)                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">370 </span><span class=\"r4\">│   </span>                                                                                       <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span>371 <span class=\"r4\">│   </span>model_adapter = model_adapter <span class=\"r11\">or</span> create_model_adapter(                                 <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">372 </span><span class=\"r4\">│   │   </span>model_description=bioimageio_model,                                                <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">373 </span><span class=\"r4\">│   │   </span>devices=devices,                                                                   <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">374 </span><span class=\"r4\">│   │   </span>weight_format_priority_order=weights_format <span class=\"r11\">and</span> (weights_format,),                 <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/2ad0e538313e48766b5028448ff211eb420bef29973543270a33249e51da7f67/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">166 </span><span class=\"r4\">│   │   </span><span class=\"r5\">assert</span> errors                                                                      <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">167 </span><span class=\"r4\">│   │   </span><span class=\"r5\">if</span> <span class=\"r6\">len</span>(weight_format_priority_order) == <span class=\"r5\">1</span>:                                         <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">168 </span><span class=\"r4\">│   │   │   </span><span class=\"r5\">assert</span> <span class=\"r6\">len</span>(errors) == <span class=\"r5\">1</span>                                                        <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span>169 <span class=\"r4\">│   │   │   </span><span class=\"r5\">raise</span> errors[<span class=\"r5\">0</span>]                                                                <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">170 </span><span class=\"r4\">│   │   </span>                                                                                   <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">171 </span><span class=\"r4\">│   │   </span><span class=\"r5\">else</span>:                                                                              <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">172 </span><span class=\"r4\">│   │   │   </span>msg = (                                                                        <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/2ad0e538313e48766b5028448ff211eb420bef29973543270a33249e51da7f67/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">155 </span><span class=\"r4\">│   │   │   │   │   </span><span class=\"r5\">except</span> <span class=\"r6\">Exception</span>:                                                      <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">156 </span><span class=\"r4\">│   │   │   │   │   │   </span><span class=\"r5\">from</span><span class=\"r12\"> </span><span class=\"r13\">.tensorflow_backend</span><span class=\"r12\"> </span><span class=\"r5\">import</span> KerasModelAdapter                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">157 </span><span class=\"r4\">│   │   │   │   │   </span>                                                                       <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span>158 <span class=\"r4\">│   │   │   │   │   </span><span class=\"r5\">return</span> KerasModelAdapter(                                              <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">159 </span><span class=\"r4\">│   │   │   │   │   │   </span>model_description=model_description, devices=devices               <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">160 </span><span class=\"r4\">│   │   │   │   │   </span>)                                                                      <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">161 </span><span class=\"r4\">│   │   │   │   </span><span class=\"r5\">except</span> <span class=\"r6\">Exception</span> <span class=\"r5\">as</span> e:                                                     <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/2ad0e538313e48766b5028448ff211eb420bef29973543270a33249e51da7f67/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">146 </span><span class=\"r4\">│   │   │   │   </span>logger.opt(exception=ee).info(                                             <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">147 </span><span class=\"r4\">│   │   │   │   │   </span><span class=\"r7\">&quot;keras.layers.TFSMLayer error for alternative call_endpoint=&#x27;serving_d</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">148 </span><span class=\"r4\">│   │   │   │   </span>)                                                                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span>149 <span class=\"r4\">│   │   │   │   </span><span class=\"r5\">raise</span> e                                                                    <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">150 </span><span class=\"r4\">│   </span>                                                                                       <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">151 </span><span class=\"r4\">│   </span><span class=\"r5\">def</span><span class=\"r12\"> </span><span class=\"r14\">_forward_impl</span>(  <span class=\"r4\"># pyright: ignore[reportUnknownParameterType]</span>                      <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">152 </span><span class=\"r4\">│   │   </span><span class=\"r6\">self</span>, input_arrays: Sequence[Optional[NDArray[Any]]]                               <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/2ad0e538313e48766b5028448ff211eb420bef29973543270a33249e51da7f67/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">133 </span><span class=\"r4\">│   │   </span>)                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">134 </span><span class=\"r4\">│   │   </span>                                                                                   <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">135 </span><span class=\"r4\">│   │   </span><span class=\"r5\">try</span>:                                                                               <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span>136 <span class=\"r4\">│   │   │   </span><span class=\"r6\">self</span>._network = tf.keras.layers.TFSMLayer(  <span class=\"r4\"># pyright: ignore[reportAttributeA</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">137 </span><span class=\"r4\">│   │   │   │   </span>weight_file,                                                               <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">138 </span><span class=\"r4\">│   │   │   │   </span>call_endpoint=<span class=\"r7\">&quot;serve&quot;</span>,                                                     <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">139 </span><span class=\"r4\">│   │   │   </span>)                                                                              <span class=\"r1\">│</span>\n<span class=\"r1\">╰──────────────────────────────────────────────────────────────────────────────────────────────────╯</span>\n<span class=\"r8\">AttributeError: </span>module <span class=\"r9\">&#x27;keras.api._v2.keras.layers&#x27;</span> has no attribute <span class=\"r9\">&#x27;TFSMLayer&#x27;</span>\n</code></pre>\n</body>\n</html>\n"
                            }
                        ],
                        "warnings": [],
                        "context": null,
                        "recommended_env": {
                            "name": null,
                            "channels": [
                                "conda-forge",
                                "nodefaults"
                            ],
                            "dependencies": [
                                "bioimageio.core",
                                "pip",
                                "tensorflow ==2.11.0"
                            ]
                        },
                        "saved_conda_compare": "Success. All the packages in the specification file are present in the environment with matching version and build string.\n"
                    },
                    {
                        "name": "Successfully created `ModelDescr` instance.",
                        "status": "passed",
                        "loc": [],
                        "errors": [],
                        "warnings": [],
                        "context": {
                            "file_name": "rdf.yaml",
                            "original_source_name": null,
                            "perform_io_checks": true,
                            "known_files": {
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/cover_1.png?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/cover.png?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/training_evaluation.csv?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/Contours2InstanceSegmentation.ijm?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/per_sample_scale_range.ijm?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/README.md?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/sample_input_0.tif?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/sample_output_0.tif?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/test_input.npy?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/test_output.npy?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/keras_weights.hdf5?version=v0": null,
                                "keras_weights.hdf5": "3b351ad5af1dab75c16993f9da06ce15d84b38435b2ce6f6a799c7d5fde3b80d",
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/tf_weights.zip?version=v0": null,
                                "tf_weights.zip": "4780c1df39c35db679237acedc964dc58032474495042539a16941e8cb333d17"
                            },
                            "update_hashes": false,
                            "root": "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files?version=v0"
                        },
                        "recommended_env": null,
                        "saved_conda_compare": null
                    },
                    {
                        "name": "bioimageio.spec format validation model 0.4.10",
                        "status": "passed",
                        "loc": [],
                        "errors": [],
                        "warnings": [
                            {
                                "loc": [
                                    "name"
                                ],
                                "msg": "Name longer than 64 characters.",
                                "type": "warning",
                                "severity": 20
                            }
                        ],
                        "context": {
                            "file_name": "rdf.yaml",
                            "original_source_name": null,
                            "perform_io_checks": true,
                            "known_files": {
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/cover_1.png?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/cover.png?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/training_evaluation.csv?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/Contours2InstanceSegmentation.ijm?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/per_sample_scale_range.ijm?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/README.md?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/sample_input_0.tif?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/sample_output_0.tif?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/test_input.npy?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/test_output.npy?version=v0": null,
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/keras_weights.hdf5?version=v0": null,
                                "keras_weights.hdf5": "3b351ad5af1dab75c16993f9da06ce15d84b38435b2ce6f6a799c7d5fde3b80d",
                                "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files/tf_weights.zip?version=v0": null,
                                "tf_weights.zip": "4780c1df39c35db679237acedc964dc58032474495042539a16941e8cb333d17"
                            },
                            "update_hashes": false,
                            "root": "https://hypha.aicell.io/bioimage-io/artifacts/placid-llama/files?version=v0"
                        },
                        "recommended_env": null,
                        "saved_conda_compare": null
                    },
                    {
                        "name": "Reproduce test outputs from test inputs (keras_hdf5)",
                        "status": "failed",
                        "loc": [
                            "weights",
                            "keras_hdf5"
                        ],
                        "errors": [
                            {
                                "loc": [
                                    "weights",
                                    "keras_hdf5"
                                ],
                                "msg": "module 'keras.api._v2.keras.layers' has no attribute 'TFSMLayer'",
                                "type": "bioimageio.core",
                                "with_traceback": true,
                                "traceback_md": "╭─────────────────────────────── Traceback (most recent call last) ────────────────────────────────╮\n│ /usr/share/miniconda/envs/2ad0e538313e48766b5028448ff211eb420bef29973543270a33249e51da7f67/lib/p │\n│                                                                                                  │\n│   139 │   │   │   )                                                                              │\n│   140 │   │   except Exception as e:                                                             │\n│   141 │   │   │   try:                                                                           │\n│ ❱ 142 │   │   │   │   self._network = tf.keras.layers.TFSMLayer(  # pyright: ignore[reportAttrib │\n│   143 │   │   │   │   │   weight_file, call_endpoint=\"serving_default\"                           │\n│   144 │   │   │   │   )                                                                          │\n│   145 │   │   │   except Exception as ee:                                                        │\n╰──────────────────────────────────────────────────────────────────────────────────────────────────╯\nAttributeError: module 'keras.api._v2.keras.layers' has no attribute 'TFSMLayer'\n\nDuring handling of the above exception, another exception occurred:\n\n╭─────────────────────────────── Traceback (most recent call last) ────────────────────────────────╮\n│ /usr/share/miniconda/envs/2ad0e538313e48766b5028448ff211eb420bef29973543270a33249e51da7f67/lib/p │\n│                                                                                                  │\n│    774 │   │   test_input = get_test_input_sample(model)                                         │\n│    775 │   │   expected = get_test_output_sample(model)                                          │\n│    776 │   │                                                                                     │\n│ ❱  777 │   │   with create_prediction_pipeline(                                                  │\n│    778 │   │   │   bioimageio_model=model, devices=devices, weight_format=weight_format          │\n│    779 │   │   ) as prediction_pipeline:                                                         │\n│    780 │   │   │   results = prediction_pipeline.predict_sample_without_blocking(test_input)     │\n│                                                                                                  │\n│ /usr/share/miniconda/envs/2ad0e538313e48766b5028448ff211eb420bef29973543270a33249e51da7f67/lib/p │\n│                                                                                                  │\n│   368 │   │   │   f\"deprecated create_prediction_pipeline kwargs: {set(deprecated_kwargs)}\"      │\n│   369 │   │   )                                                                                  │\n│   370 │                                                                                          │\n│ ❱ 371 │   model_adapter = model_adapter or create_model_adapter(                                 │\n│   372 │   │   model_description=bioimageio_model,                                                │\n│   373 │   │   devices=devices,                                                                   │\n│   374 │   │   weight_format_priority_order=weights_format and (weights_format,),                 │\n│                                                                                                  │\n│ /usr/share/miniconda/envs/2ad0e538313e48766b5028448ff211eb420bef29973543270a33249e51da7f67/lib/p │\n│                                                                                                  │\n│   166 │   │   assert errors                                                                      │\n│   167 │   │   if len(weight_format_priority_order) == 1:                                         │\n│   168 │   │   │   assert len(errors) == 1                                                        │\n│ ❱ 169 │   │   │   raise errors[0]                                                                │\n│   170 │   │                                                                                      │\n│   171 │   │   else:                                                                              │\n│   172 │   │   │   msg = (                                                                        │\n│                                                                                                  │\n│ /usr/share/miniconda/envs/2ad0e538313e48766b5028448ff211eb420bef29973543270a33249e51da7f67/lib/p │\n│                                                                                                  │\n│   155 │   │   │   │   │   except Exception:                                                      │\n│   156 │   │   │   │   │   │   from .tensorflow_backend import KerasModelAdapter                  │\n│   157 │   │   │   │   │                                                                          │\n│ ❱ 158 │   │   │   │   │   return KerasModelAdapter(                                              │\n│   159 │   │   │   │   │   │   model_description=model_description, devices=devices               │\n│   160 │   │   │   │   │   )                                                                      │\n│   161 │   │   │   │   except Exception as e:                                                     │\n│                                                                                                  │\n│ /usr/share/miniconda/envs/2ad0e538313e48766b5028448ff211eb420bef29973543270a33249e51da7f67/lib/p │\n│                                                                                                  │\n│   146 │   │   │   │   logger.opt(exception=ee).info(                                             │\n│   147 │   │   │   │   │   \"keras.layers.TFSMLayer error for alternative call_endpoint='serving_d │\n│   148 │   │   │   │   )                                                                          │\n│ ❱ 149 │   │   │   │   raise e                                                                    │\n│   150 │                                                                                          │\n│   151 │   def _forward_impl(  # pyright: ignore[reportUnknownParameterType]                      │\n│   152 │   │   self, input_arrays: Sequence[Optional[NDArray[Any]]]                               │\n│                                                                                                  │\n│ /usr/share/miniconda/envs/2ad0e538313e48766b5028448ff211eb420bef29973543270a33249e51da7f67/lib/p │\n│                                                                                                  │\n│   133 │   │   )                                                                                  │\n│   134 │   │                                                                                      │\n│   135 │   │   try:                                                                               │\n│ ❱ 136 │   │   │   self._network = tf.keras.layers.TFSMLayer(  # pyright: ignore[reportAttributeA │\n│   137 │   │   │   │   weight_file,                                                               │\n│   138 │   │   │   │   call_endpoint=\"serve\",                                                     │\n│   139 │   │   │   )                                                                              │\n╰──────────────────────────────────────────────────────────────────────────────────────────────────╯\nAttributeError: module 'keras.api._v2.keras.layers' has no attribute 'TFSMLayer'\n",
                                "traceback_html": "<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<style>\n.r1 {color: #800000; text-decoration-color: #800000}\n.r2 {color: #800000; text-decoration-color: #800000; font-weight: bold}\n.r3 {color: #bf7f7f; text-decoration-color: #bf7f7f; font-weight: bold}\n.r4 {color: #7f7f7f; text-decoration-color: #7f7f7f}\n.r5 {color: #0000ff; text-decoration-color: #0000ff}\n.r6 {color: #00ffff; text-decoration-color: #00ffff}\n.r7 {color: #808000; text-decoration-color: #808000}\n.r8 {color: #ff0000; text-decoration-color: #ff0000; font-weight: bold}\n.r9 {color: #008000; text-decoration-color: #008000}\n.r10 {font-style: italic}\n.r11 {color: #ff00ff; text-decoration-color: #ff00ff}\n.r12 {color: #808080; text-decoration-color: #808080}\n.r13 {color: #00ffff; text-decoration-color: #00ffff; text-decoration: underline}\n.r14 {color: #00ff00; text-decoration-color: #00ff00}\nbody {\n    color: #000000;\n    background-color: #ffffff;\n}\n</style>\n</head>\n<body>\n    <pre style=\"font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><code style=\"font-family:inherit\"><span class=\"r1\">╭─────────────────────────────── </span><span class=\"r2\">Traceback </span><span class=\"r3\">(most recent call last)</span><span class=\"r1\"> ────────────────────────────────╮</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/2ad0e538313e48766b5028448ff211eb420bef29973543270a33249e51da7f67/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">139 </span><span class=\"r4\">│   │   │   </span>)                                                                              <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">140 </span><span class=\"r4\">│   │   </span><span class=\"r5\">except</span> <span class=\"r6\">Exception</span> <span class=\"r5\">as</span> e:                                                             <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">141 </span><span class=\"r4\">│   │   │   </span><span class=\"r5\">try</span>:                                                                           <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span>142 <span class=\"r4\">│   │   │   │   </span><span class=\"r6\">self</span>._network = tf.keras.layers.TFSMLayer(  <span class=\"r4\"># pyright: ignore[reportAttrib</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">143 </span><span class=\"r4\">│   │   │   │   │   </span>weight_file, call_endpoint=<span class=\"r7\">&quot;serving_default&quot;</span>                           <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">144 </span><span class=\"r4\">│   │   │   │   </span>)                                                                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">145 </span><span class=\"r4\">│   │   │   </span><span class=\"r5\">except</span> <span class=\"r6\">Exception</span> <span class=\"r5\">as</span> ee:                                                        <span class=\"r1\">│</span>\n<span class=\"r1\">╰──────────────────────────────────────────────────────────────────────────────────────────────────╯</span>\n<span class=\"r8\">AttributeError: </span>module <span class=\"r9\">&#x27;keras.api._v2.keras.layers&#x27;</span> has no attribute <span class=\"r9\">&#x27;TFSMLayer&#x27;</span>\n\n<span class=\"r10\">During handling of the above exception, another exception occurred:</span>\n\n<span class=\"r1\">╭─────────────────────────────── </span><span class=\"r2\">Traceback </span><span class=\"r3\">(most recent call last)</span><span class=\"r1\"> ────────────────────────────────╮</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/2ad0e538313e48766b5028448ff211eb420bef29973543270a33249e51da7f67/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 774 </span><span class=\"r4\">│   │   </span>test_input = get_test_input_sample(model)                                         <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 775 </span><span class=\"r4\">│   │   </span>expected = get_test_output_sample(model)                                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 776 </span><span class=\"r4\">│   │   </span>                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span> 777 <span class=\"r4\">│   │   </span><span class=\"r5\">with</span> create_prediction_pipeline(                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 778 </span><span class=\"r4\">│   │   │   </span>bioimageio_model=model, devices=devices, weight_format=weight_format          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 779 </span><span class=\"r4\">│   │   </span>) <span class=\"r5\">as</span> prediction_pipeline:                                                         <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\"> 780 </span><span class=\"r4\">│   │   │   </span>results = prediction_pipeline.predict_sample_without_blocking(test_input)     <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/2ad0e538313e48766b5028448ff211eb420bef29973543270a33249e51da7f67/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">368 </span><span class=\"r4\">│   │   │   </span><span class=\"r7\">f&quot;deprecated create_prediction_pipeline kwargs: {</span><span class=\"r6\">set</span>(deprecated_kwargs)<span class=\"r7\">}&quot;</span>      <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">369 </span><span class=\"r4\">│   │   </span>)                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">370 </span><span class=\"r4\">│   </span>                                                                                       <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span>371 <span class=\"r4\">│   </span>model_adapter = model_adapter <span class=\"r11\">or</span> create_model_adapter(                                 <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">372 </span><span class=\"r4\">│   │   </span>model_description=bioimageio_model,                                                <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">373 </span><span class=\"r4\">│   │   </span>devices=devices,                                                                   <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">374 </span><span class=\"r4\">│   │   </span>weight_format_priority_order=weights_format <span class=\"r11\">and</span> (weights_format,),                 <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/2ad0e538313e48766b5028448ff211eb420bef29973543270a33249e51da7f67/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">166 </span><span class=\"r4\">│   │   </span><span class=\"r5\">assert</span> errors                                                                      <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">167 </span><span class=\"r4\">│   │   </span><span class=\"r5\">if</span> <span class=\"r6\">len</span>(weight_format_priority_order) == <span class=\"r5\">1</span>:                                         <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">168 </span><span class=\"r4\">│   │   │   </span><span class=\"r5\">assert</span> <span class=\"r6\">len</span>(errors) == <span class=\"r5\">1</span>                                                        <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span>169 <span class=\"r4\">│   │   │   </span><span class=\"r5\">raise</span> errors[<span class=\"r5\">0</span>]                                                                <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">170 </span><span class=\"r4\">│   │   </span>                                                                                   <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">171 </span><span class=\"r4\">│   │   </span><span class=\"r5\">else</span>:                                                                              <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">172 </span><span class=\"r4\">│   │   │   </span>msg = (                                                                        <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/2ad0e538313e48766b5028448ff211eb420bef29973543270a33249e51da7f67/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">155 </span><span class=\"r4\">│   │   │   │   │   </span><span class=\"r5\">except</span> <span class=\"r6\">Exception</span>:                                                      <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">156 </span><span class=\"r4\">│   │   │   │   │   │   </span><span class=\"r5\">from</span><span class=\"r12\"> </span><span class=\"r13\">.tensorflow_backend</span><span class=\"r12\"> </span><span class=\"r5\">import</span> KerasModelAdapter                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">157 </span><span class=\"r4\">│   │   │   │   │   </span>                                                                       <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span>158 <span class=\"r4\">│   │   │   │   │   </span><span class=\"r5\">return</span> KerasModelAdapter(                                              <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">159 </span><span class=\"r4\">│   │   │   │   │   │   </span>model_description=model_description, devices=devices               <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">160 </span><span class=\"r4\">│   │   │   │   │   </span>)                                                                      <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">161 </span><span class=\"r4\">│   │   │   │   </span><span class=\"r5\">except</span> <span class=\"r6\">Exception</span> <span class=\"r5\">as</span> e:                                                     <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/2ad0e538313e48766b5028448ff211eb420bef29973543270a33249e51da7f67/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">146 </span><span class=\"r4\">│   │   │   │   </span>logger.opt(exception=ee).info(                                             <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">147 </span><span class=\"r4\">│   │   │   │   │   </span><span class=\"r7\">&quot;keras.layers.TFSMLayer error for alternative call_endpoint=&#x27;serving_d</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">148 </span><span class=\"r4\">│   │   │   │   </span>)                                                                          <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span>149 <span class=\"r4\">│   │   │   │   </span><span class=\"r5\">raise</span> e                                                                    <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">150 </span><span class=\"r4\">│   </span>                                                                                       <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">151 </span><span class=\"r4\">│   </span><span class=\"r5\">def</span><span class=\"r12\"> </span><span class=\"r14\">_forward_impl</span>(  <span class=\"r4\"># pyright: ignore[reportUnknownParameterType]</span>                      <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">152 </span><span class=\"r4\">│   │   </span><span class=\"r6\">self</span>, input_arrays: Sequence[Optional[NDArray[Any]]]                               <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r4\">/usr/share/miniconda/envs/2ad0e538313e48766b5028448ff211eb420bef29973543270a33249e51da7f67/lib/p</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>                                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">133 </span><span class=\"r4\">│   │   </span>)                                                                                  <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">134 </span><span class=\"r4\">│   │   </span>                                                                                   <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">135 </span><span class=\"r4\">│   │   </span><span class=\"r5\">try</span>:                                                                               <span class=\"r1\">│</span>\n<span class=\"r1\">│</span> <span class=\"r1\">❱ </span>136 <span class=\"r4\">│   │   │   </span><span class=\"r6\">self</span>._network = tf.keras.layers.TFSMLayer(  <span class=\"r4\"># pyright: ignore[reportAttributeA</span> <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">137 </span><span class=\"r4\">│   │   │   │   </span>weight_file,                                                               <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">138 </span><span class=\"r4\">│   │   │   │   </span>call_endpoint=<span class=\"r7\">&quot;serve&quot;</span>,                                                     <span class=\"r1\">│</span>\n<span class=\"r1\">│</span>   <span class=\"r4\">139 </span><span class=\"r4\">│   │   │   </span>)                                                                              <span class=\"r1\">│</span>\n<span class=\"r1\">╰──────────────────────────────────────────────────────────────────────────────────────────────────╯</span>\n<span class=\"r8\">AttributeError: </span>module <span class=\"r9\">&#x27;keras.api._v2.keras.layers&#x27;</span> has no attribute <span class=\"r9\">&#x27;TFSMLayer&#x27;</span>\n</code></pre>\n</body>\n</html>\n"
                            }
                        ],
                        "warnings": [],
                        "context": null,
                        "recommended_env": {
                            "name": null,
                            "channels": [
                                "conda-forge",
                                "nodefaults"
                            ],
                            "dependencies": [
                                "bioimageio.core",
                                "pip",
                                "tensorflow ==2.11.0"
                            ]
                        },
                        "saved_conda_compare": "Success. All the packages in the specification file are present in the environment with matching version and build string.\n"
                    }
                ],
                "env": [
                    [
                        "bioimageio.core",
                        "0.9.4",
                        "",
                        ""
                    ],
                    [
                        "bioimageio.spec",
                        "0.5.5.6",
                        "",
                        ""
                    ]
                ],
                "saved_conda_list": "# packages in environment at /usr/share/miniconda/envs/2ad0e538313e48766b5028448ff211eb420bef29973543270a33249e51da7f67:\n#\n# Name                     Version          Build                    Channel\n_libgcc_mutex              0.1              conda_forge              conda-forge\n_openmp_mutex              4.5              2_gnu                    conda-forge\nabsl-py                    2.3.1            pyhd8ed1ab_0             conda-forge\naiohappyeyeballs           2.6.1            pyhd8ed1ab_0             conda-forge\naiohttp                    3.13.0           py310h258c6eb_0          conda-forge\naiosignal                  1.4.0            pyhd8ed1ab_0             conda-forge\nannotated-types            0.7.0            pyhd8ed1ab_1             conda-forge\nanyio                      4.11.0           pyhcf101f3_0             conda-forge\naom                        3.9.1            hac33072_0               conda-forge\nastunparse                 1.6.3            pyhd8ed1ab_3             conda-forge\nasync-timeout              5.0.1            pyhd8ed1ab_1             conda-forge\nattrs                      25.4.0           pyh71513ae_0             conda-forge\nbioimageio.core            0.9.4            pyhd8ed1ab_0             conda-forge\nbioimageio.spec            0.5.5.6          pyhd8ed1ab_0             conda-forge\nblinker                    1.9.0            pyhff2d567_0             conda-forge\nblosc                      1.21.5           h0f2a231_0               conda-forge\nbrotli-python              1.1.0            py310hea6c23e_4          conda-forge\nbrunsli                    0.1              he3183e4_1               conda-forge\nbzip2                      1.0.8            hda65f42_8               conda-forge\nc-ares                     1.34.5           hb9d3cd8_0               conda-forge\nc-blosc2                   2.12.0           hb4ffafa_0               conda-forge\nca-certificates            2025.10.5        hbd8a1cb_0               conda-forge\ncached-property            1.5.2            hd8ed1ab_1               conda-forge\ncached_property            1.5.2            pyha770c72_1             conda-forge\ncachetools                 6.2.1            pyhd8ed1ab_0             conda-forge\ncertifi                    2025.10.5        pyhd8ed1ab_0             conda-forge\ncffi                       1.17.1           py310h8deb56e_0          conda-forge\ncharls                     2.4.2            h59595ed_0               conda-forge\ncharset-normalizer         3.4.4            pyhd8ed1ab_0             conda-forge\nclick                      8.3.0            pyh707e725_0             conda-forge\ncolorama                   0.4.6            pyhd8ed1ab_1             conda-forge\ncryptography               46.0.3           py310hed992bd_0          conda-forge\ndav1d                      1.2.1            hd590300_0               conda-forge\ndistro                     1.9.0            pyhd8ed1ab_1             conda-forge\ndnspython                  2.8.0            pyhcf101f3_0             conda-forge\nemail-validator            2.3.0            pyhd8ed1ab_0             conda-forge\nemail_validator            2.3.0            hd8ed1ab_0               conda-forge\nexceptiongroup             1.3.0            pyhd8ed1ab_0             conda-forge\nfilelock                   3.20.0           pyhd8ed1ab_0             conda-forge\nflatbuffers                22.12.06         hcb278e6_2               conda-forge\nfreetype                   2.14.1           ha770c72_0               conda-forge\nfrozenlist                 1.7.0            py310h9548a50_0          conda-forge\ngast                       0.4.0            pyh9f0ad1d_0             conda-forge\ngenericache                0.5.2            pyhd8ed1ab_0             conda-forge\ngiflib                     5.2.2            hd590300_0               conda-forge\ngoogle-auth                2.41.1           pyhd8ed1ab_0             conda-forge\ngoogle-auth-oauthlib       0.4.6            pyhd8ed1ab_0             conda-forge\ngoogle-pasta               0.2.0            pyhd8ed1ab_2             conda-forge\ngrpcio                     1.51.1           py310h4a5735c_1          conda-forge\nh11                        0.16.0           pyhd8ed1ab_0             conda-forge\nh2                         4.3.0            pyhcf101f3_0             conda-forge\nh5py                       3.15.1           nompi_py310h4aa865e_100  conda-forge\nhdf5                       1.14.6           nompi_h6e4c0c1_103       conda-forge\nhpack                      4.1.0            pyhd8ed1ab_0             conda-forge\nhttpcore                   1.0.9            pyh29332c3_0             conda-forge\nhttpx                      0.28.1           pyhd8ed1ab_0             conda-forge\nhyperframe                 6.1.0            pyhd8ed1ab_0             conda-forge\nicu                        70.1             h27087fc_0               conda-forge\nidna                       3.11             pyhd8ed1ab_0             conda-forge\nimagecodecs                2023.9.18        py310h3a85d3a_0          conda-forge\nimageio                    2.37.0           pyhfb79c49_0             conda-forge\nimportlib-metadata         8.7.0            pyhe01879c_1             conda-forge\njxrlib                     1.1              hd590300_3               conda-forge\nkeras                      2.11.0           pyhd8ed1ab_0             conda-forge\nkeras-preprocessing        1.1.2            pyhd8ed1ab_1             conda-forge\nkeyutils                   1.6.3            hb9d3cd8_0               conda-forge\nkrb5                       1.21.3           h659f571_0               conda-forge\nlcms2                      2.15             h7f713cb_2               conda-forge\nld_impl_linux-64           2.44             ha97dd6f_2               conda-forge\nlerc                       4.0.0            h0aef613_1               conda-forge\nlibabseil                  20220623.0       cxx17_h05df665_6         conda-forge\nlibaec                     1.1.4            h3f801dc_0               conda-forge\nlibavif16                  1.3.0            h6395336_2               conda-forge\nlibblas                    3.9.0            37_h4a7cf45_openblas     conda-forge\nlibbrotlicommon            1.1.0            hb03c661_4               conda-forge\nlibbrotlidec               1.1.0            hb03c661_4               conda-forge\nlibbrotlienc               1.1.0            hb03c661_4               conda-forge\nlibcblas                   3.9.0            37_h0358290_openblas     conda-forge\nlibcurl                    8.14.1           h332b0f4_0               conda-forge\nlibdeflate                 1.19             hd590300_0               conda-forge\nlibedit                    3.1.20250104     pl5321h7949ede_0         conda-forge\nlibev                      4.33             hd590300_2               conda-forge\nlibexpat                   2.7.1            hecca717_0               conda-forge\nlibffi                     3.5.2            h9ec8514_0               conda-forge\nlibfreetype                2.14.1           ha770c72_0               conda-forge\nlibfreetype6               2.14.1           h73754d4_0               conda-forge\nlibgcc                     15.2.0           h767d61c_7               conda-forge\nlibgcc-ng                  15.2.0           h69a702a_7               conda-forge\nlibgfortran                15.2.0           h69a702a_7               conda-forge\nlibgfortran5               15.2.0           hcd61629_7               conda-forge\nlibgomp                    15.2.0           h767d61c_7               conda-forge\nlibgrpc                    1.51.1           h4fad500_1               conda-forge\nlibjpeg-turbo              2.1.5.1          hd590300_1               conda-forge\nliblapack                  3.9.0            37_h47877c9_openblas     conda-forge\nliblzma                    5.8.1            hb9d3cd8_2               conda-forge\nliblzma-devel              5.8.1            hb9d3cd8_2               conda-forge\nlibnghttp2                 1.67.0           had1ee68_0               conda-forge\nlibnsl                     2.0.1            hb9d3cd8_1               conda-forge\nlibopenblas                0.3.30           pthreads_h94d23a6_2      conda-forge\nlibpng                     1.6.50           h421ea60_1               conda-forge\nlibprotobuf                3.21.12          hfc55251_2               conda-forge\nlibsqlite                  3.50.4           h0c1763c_0               conda-forge\nlibssh2                    1.11.1           hcf80075_0               conda-forge\nlibstdcxx                  15.2.0           h8f9b012_7               conda-forge\nlibstdcxx-ng               15.2.0           h4852527_7               conda-forge\nlibtiff                    4.6.0            h29866fb_1               conda-forge\nlibuuid                    2.41.2           he9a06e4_0               conda-forge\nlibwebp-base               1.6.0            hd42ef1d_0               conda-forge\nlibxcb                     1.15             h0b41bf4_0               conda-forge\nlibxcrypt                  4.4.36           hd590300_1               conda-forge\nlibzlib                    1.3.1            hb9d3cd8_2               conda-forge\nlibzopfli                  1.0.3            h9c3ff4c_0               conda-forge\nloguru                     0.7.3            pyh707e725_0             conda-forge\nlz4-c                      1.9.4            hcb278e6_0               conda-forge\nmarkdown                   3.9              pyhd8ed1ab_0             conda-forge\nmarkdown-it-py             4.0.0            pyhd8ed1ab_0             conda-forge\nmarkupsafe                 3.0.3            py310h3406613_0          conda-forge\nmdurl                      0.1.2            pyhd8ed1ab_1             conda-forge\nmultidict                  6.6.3            py310h89163eb_0          conda-forge\nncurses                    6.5              h2d0b736_3               conda-forge\nnumpy                      1.26.4           py310hb13e2d6_0          conda-forge\noauthlib                   3.3.1            pyhd8ed1ab_0             conda-forge\nopenjpeg                   2.5.2            h488ebb8_0               conda-forge\nopenssl                    3.5.4            h26f9b46_0               conda-forge\nopt_einsum                 3.4.0            pyhd8ed1ab_1             conda-forge\npackaging                  25.0             pyh29332c3_1             conda-forge\npandas                     2.3.3            py310h0158d43_1          conda-forge\npillow                     10.0.1           py310h29da1c1_1          conda-forge\npip                        25.2             pyh8b19718_0             conda-forge\nplatformdirs               4.5.0            pyhcf101f3_0             conda-forge\npropcache                  0.3.1            py310h89163eb_0          conda-forge\nprotobuf                   4.21.12          py310heca2aa9_0          conda-forge\npthread-stubs              0.4              hb9d3cd8_1002            conda-forge\npyasn1                     0.6.1            pyhd8ed1ab_2             conda-forge\npyasn1-modules             0.4.2            pyhd8ed1ab_0             conda-forge\npycparser                  2.22             pyh29332c3_1             conda-forge\npydantic                   2.11.10          pyh3cfb1c2_0             conda-forge\npydantic-core              2.33.2           py310hbcd0ec0_0          conda-forge\npydantic-settings          2.11.0           pyh3cfb1c2_0             conda-forge\npygments                   2.19.2           pyhd8ed1ab_0             conda-forge\npyjwt                      2.10.1           pyhd8ed1ab_0             conda-forge\npyopenssl                  25.3.0           pyhd8ed1ab_0             conda-forge\npysocks                    1.7.1            pyha55dd90_7             conda-forge\npython                     3.10.19          hd994cfb_1_cpython       conda-forge\npython-dateutil            2.9.0.post0      pyhe01879c_2             conda-forge\npython-dotenv              1.1.1            pyhe01879c_0             conda-forge\npython-flatbuffers         25.9.23          pyh1e1bc0e_0             conda-forge\npython-tzdata              2025.2           pyhd8ed1ab_0             conda-forge\npython_abi                 3.10             8_cp310                  conda-forge\npytz                       2025.2           pyhd8ed1ab_0             conda-forge\npyu2f                      0.1.5            pyhd8ed1ab_1             conda-forge\nrav1e                      0.7.1            h8fae777_3               conda-forge\nre2                        2023.02.01       hcb278e6_0               conda-forge\nreadline                   8.2              h8c095d6_2               conda-forge\nrequests                   2.32.5           pyhd8ed1ab_0             conda-forge\nrequests-oauthlib          2.0.0            pyhd8ed1ab_1             conda-forge\nrich                       14.2.0           pyhcf101f3_0             conda-forge\nrsa                        4.9.1            pyhd8ed1ab_0             conda-forge\nruyaml                     0.91.0           pyhd8ed1ab_1             conda-forge\nscipy                      1.15.2           py310h1d65ade_0          conda-forge\nsetuptools                 80.9.0           pyhff2d567_0             conda-forge\nsix                        1.17.0           pyhe01879c_1             conda-forge\nsnappy                     1.1.10           hdb0a2a9_1               conda-forge\nsniffio                    1.3.1            pyhd8ed1ab_1             conda-forge\nsvt-av1                    3.1.2            hecca717_0               conda-forge\ntensorboard                2.11.2           pyhd8ed1ab_0             conda-forge\ntensorboard-data-server    0.6.1            py310h600f1e7_4          conda-forge\ntensorboard-plugin-wit     1.8.1            pyhd8ed1ab_0             conda-forge\ntensorflow                 2.11.0           cpu_py310hd1aba9c_1      conda-forge\ntensorflow-base            2.11.0           cpu_py310h9fe5a9a_1      conda-forge\ntensorflow-estimator       2.11.0           cpu_py310hfed9998_1      conda-forge\ntermcolor                  3.1.0            pyhd8ed1ab_0             conda-forge\ntifffile                   2024.12.12       pyhd8ed1ab_0             conda-forge\ntk                         8.6.13           noxft_hd72426e_102       conda-forge\ntqdm                       4.67.1           pyhd8ed1ab_1             conda-forge\ntyping-extensions          4.15.0           h396c80c_0               conda-forge\ntyping-inspection          0.4.2            pyhd8ed1ab_0             conda-forge\ntyping_extensions          4.15.0           pyhcf101f3_0             conda-forge\ntzdata                     2025b            h78e105d_0               conda-forge\nurllib3                    2.5.0            pyhd8ed1ab_0             conda-forge\nwerkzeug                   3.1.3            pyhd8ed1ab_1             conda-forge\nwheel                      0.45.1           pyhd8ed1ab_1             conda-forge\nwrapt                      1.17.3           py310h7c4b9e2_1          conda-forge\nxarray                     2025.1.2         pyhd8ed1ab_0             conda-forge\nxorg-libxau                1.0.12           hb9d3cd8_0               conda-forge\nxorg-libxdmcp              1.1.5            hb9d3cd8_0               conda-forge\nxz                         5.8.1            hbcc6ac9_2               conda-forge\nxz-gpl-tools               5.8.1            hbcc6ac9_2               conda-forge\nxz-tools                   5.8.1            hb9d3cd8_2               conda-forge\nyarl                       1.20.1           py310h89163eb_0          conda-forge\nzfp                        1.0.1            h909a3a2_3               conda-forge\nzipp                       3.23.0           pyhd8ed1ab_0             conda-forge\nzlib                       1.3.1            hb9d3cd8_2               conda-forge\nzlib-ng                    2.0.7            h0b41bf4_0               conda-forge\nzstandard                  0.25.0           py310h139afa4_0          conda-forge\nzstd                       1.5.7            hb8e6e7a_2               conda-forge\n"
            },
            "badge": null,
            "links": []
        },
        "careamics_0.0.16": {
            "status": "not-applicable",
            "score": 0.0,
            "error": null,
            "details": [
                "CAREamics compatibility check does not support `bioimageio.spec.v0.4` model desciptions."
            ],
            "badge": null,
            "links": []
        },
        "careamics_0.0.17": {
            "status": "not-applicable",
            "score": 0.0,
            "error": null,
            "details": [
                "CAREamics compatibility check does not support `bioimageio.spec.v0.4` model desciptions."
            ],
            "badge": null,
            "links": []
        },
        "biapy_3.6.5": {
            "status": "failed",
            "score": 0.0,
            "error": "[all] pytorch_state_dict not found in model RDF or inputs != 1\n",
            "details": "[all] pytorch_state_dict not found in model RDF or inputs != 1\n",
            "badge": null,
            "links": [
                "biapy/biapy"
            ]
        }
    }
}