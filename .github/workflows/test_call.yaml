name: test call

on:
  workflow_call:
    inputs:
      concept_id:
        description: "Bioimage.io resource concept"
        required: true
        type: string
      version:
        required: true
        type: string
      environment_name:
        required: true
        type: string


concurrency: ${{inputs.environment_name}}-${{inputs.concept_id}}-call

env:
  S3_HOST: ${{ vars.S3_HOST }}
  S3_BUCKET: ${{ vars.S3_BUCKET }}
  S3_FOLDER: ${{vars.S3_FOLDER}}
  S3_ACCESS_KEY_ID: ${{secrets.S3_ACCESS_KEY_ID}}
  S3_SECRET_ACCESS_KEY: ${{secrets.S3_SECRET_ACCESS_KEY}}
  RUN_URL: ${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}
  MAIL_PASSWORD: ${{secrets.MAIL_PASSWORD}}
  BIOIMAGEIO_USER_ID: github|${{github.actor_id}}

jobs:
  validate_format:
    runs-on: ubuntu-latest
    environment: ${{inputs.environment_name}}
    outputs:
      dynamic_test_cases: ${{ steps.validate_format.outputs.dynamic_test_cases }}
      has_dynamic_test_cases: ${{ steps.validate_format.outputs.has_dynamic_test_cases }}
      conda_envs: ${{ steps.validate_format.outputs.conda_envs }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip" # caching pip dependencies
      - run: pip install .
      - id: validate_format
        run: backoffice validate_format "${{ inputs.concept_id }}" "${{ inputs.version }}"

  setup-test:
    needs: validate_format
    if: needs.validate_format.outputs.has_dynamic_test_cases == 'yes'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.validate_format.outputs.dynamic_test_cases) }} # include: [{weight_format: ...}, ...]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip" # caching pip dependencies
      - run: pip install ruyaml
      - name: save ${{inputs.environment_name}}_${{inputs.concept_id}}_${{inputs.version}}_conda_env_${{matrix.weight_format}}.yaml
        run: |
          import json
          from pathlib import Path
          from ruyaml import YAML
          yaml = YAML(typ="safe")
          conda_env = json.loads('${{ needs.validate_format.outputs.conda_envs }}')["${{ matrix.weight_format }}"]
          yaml.dump(conda_env, Path("${{inputs.environment_name}}_${{inputs.concept_id}}_${{inputs.version}}_conda_env_${{matrix.weight_format}}.yaml"))
        shell: python
      - uses: actions/upload-artifact@v4
        with:
          name: ${{inputs.environment_name}}_${{inputs.concept_id}}_${{inputs.version}}_conda_env_${{matrix.weight_format}}.yaml
          path: ${{inputs.environment_name}}_${{inputs.concept_id}}_${{inputs.version}}_conda_env_${{matrix.weight_format}}.yaml

  test:
    needs: [validate_format, setup-test]
    if: needs.validate_format.outputs.has_dynamic_test_cases == 'yes'
    runs-on: ubuntu-latest
    environment: ${{inputs.environment_name}}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.validate_format.outputs.dynamic_test_cases) }} # include: [{weight_format: ...}, ...]
      max-parallel: 1 # avoid prallel updates to log.json
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: ${{inputs.environment_name}}_${{inputs.concept_id}}_${{inputs.version}}_conda_env_${{matrix.weight_format}}.yaml
      - name: install validation dependencies
        id: create_env
        uses: mamba-org/setup-micromamba@v1
        with:
          cache-downloads: true
          environment-name: ${{ matrix.weight_format }}
          environment-file: ${{inputs.environment_name}}_${{inputs.concept_id}}_${{inputs.version}}_conda_env_${{matrix.weight_format}}.yaml
        continue-on-error: true # we inspect this step's outcome in run_dynamic_tests.py
        timeout-minutes: 60
      - name: setup pip to install backoffice (if conda env failed to install)
        if: steps.create_env.outcome == 'failure'
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip" # caching pip dependencies
      - name: install backoffice (if conda env failed to install)
        if: steps.create_env.outcome == 'failure'
        run: pip install .
      - name: dynamic validation
        shell: bash -el {0}
        run: backoffice test "${{inputs.concept_id}}" "${{ inputs.version }}" "${{ matrix.weight_format }}" "${{ steps.create_env.outcome }}"
        timeout-minutes: 60
      - name: check torch import # TODO: improve error messages in bioimageio.core
        if: matrix.weight_format == 'pytorch_state_dict' || matrix.weight_format == 'torchscript'
        shell: bash -el {0}
        run: python -c "import torch"
      - name: check onnx import  # TODO: improve error messages in bioimageio.core
        if: matrix.weight_format == 'onnx'
        shell: bash -el {0}
        run: python -c "import onnxruntime"
