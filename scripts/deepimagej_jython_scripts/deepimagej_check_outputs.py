"""
Python script that checks that the wanted objects have actually been created and correspond to the expected ones
"""

import json
import os
import argparse

from net.imglib2.img.display.imagej import ImageJFunctions

from ij import IJ


def find_expected_output(outputs_dir, name):
    for ff in os.listdir(outputs_dir):
        if ff.endswith(f"_{name}.tif") or ff.endswith(f"_{name}.tiff"):
            return os.path.join(outputs_dir, ff)
    raise Exception(f"Expected output for {name} not found")


def main(model_dir):
    with open(os.path.join(model_dir, os.getenv("JSON_OUTS_FNAME")), 'r') as f:
        expected_outputs = json.load(f)

        for output in expected_outputs:
            name = output["name"]
            dij_output = output["dij"]
            outputs_path = output["expected"]
            if not os.path.exists(dij_output):
                raise Exception("Output " + name + " was not generated by deepimagej")
            elif not os.path.exists(outputs_path):
                raise Exception("Cannot find expected output " + name)
            expected_output = find_expected_output(outputs_path, name)
            dij_rai = ImageJFunctions.wrap(IJ.openImage(dij_output))
            expected_rai = ImageJFunctions.wrap(IJ.openImage(expected_output))
            dij_shape = dij_rai.dimensionsAsLongArray()
            expected_shape = expected_rai.dimensionsAsLongArray()
            assert dij_shape == expected_shape, "Output " + name + " in deepimagej has different shape " + str(dij_shape) + " vs " + str(expected_shape)
            dij_cursor = dij_rai.cursor()
            expected_cursor = expected_rai.cursor()
            while dij_cursor.hasNext():
                dij_cursor.fwd()
                expected_cursor.fwd()
                if dij_cursor.get().getRealFloat() - expected_cursor.get().getRealFloat() > 1e-5:
                    raise Exception("Values of output " + name  + " differ")


if __name__ == '__main__':
    # Create the argument parser
    parser = argparse.ArgumentParser()

    # Add the arguments
    parser.add_argument('-model_dir', type=str, required=True)


    # Parse the arguments
    args = parser.parse_args()

    model_dir = args.model_dir
    main(model_dir)